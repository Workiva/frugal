// Mocks generated by Mockito 5.2.0 from annotations
// in frugal/test/transport/f_adapter_transport_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i6;

import 'package:frugal/src/frugal.dart' as _i7;
import 'package:logging/logging.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:thrift/thrift.dart' as _i3;
import 'package:w_common/disposable.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLogger_0 extends _i1.Fake implements _i2.Logger {}

class _FakeTSocket_1 extends _i1.Fake implements _i3.TSocket {}

class _FakeManagedDisposer_2 extends _i1.Fake implements _i4.ManagedDisposer {}

class _FakeTimer_3 extends _i1.Fake implements _i5.Timer {}

class _FakeStreamSubscription_4<T> extends _i1.Fake
    implements _i5.StreamSubscription<T> {}

class _FakeCompleter_5<T> extends _i1.Fake implements _i5.Completer<T> {}

/// A class which mocks [TSocketTransport].
///
/// See the documentation for Mockito's code generation for more information.
class MockTSocketTransport extends _i1.Mock implements _i3.TSocketTransport {
  MockTSocketTransport() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(),
      ) as _i2.Logger);
  @override
  _i3.TSocket get socket => (super.noSuchMethod(
        Invocation.getter(#socket),
        returnValue: _FakeTSocket_1(),
      ) as _i3.TSocket);
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);
  @override
  bool get hasReadData => (super.noSuchMethod(
        Invocation.getter(#hasReadData),
        returnValue: false,
      ) as bool);
  @override
  _i5.Future<dynamic> open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  void handleIncomingMessage(_i6.Uint8List? messageBytes) => super.noSuchMethod(
        Invocation.method(
          #handleIncomingMessage,
          [messageBytes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Uint8List consumeWriteBuffer() => (super.noSuchMethod(
        Invocation.method(
          #consumeWriteBuffer,
          [],
        ),
        returnValue: _i6.Uint8List(0),
      ) as _i6.Uint8List);
  @override
  int read(
    _i6.Uint8List? buffer,
    int? offset,
    int? length,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [
            buffer,
            offset,
            length,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  void write(
    _i6.Uint8List? buffer,
    int? offset,
    int? length,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #write,
          [
            buffer,
            offset,
            length,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<dynamic> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  int readAll(
    _i6.Uint8List? buffer,
    int? offset,
    int? length,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [
            buffer,
            offset,
            length,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  void writeAll(_i6.Uint8List? buffer) => super.noSuchMethod(
        Invocation.method(
          #writeAll,
          [buffer],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockTSocket extends _i1.Mock implements _i3.TSocket {
  MockTSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i3.TSocketState> get onState => (super.noSuchMethod(
        Invocation.getter(#onState),
        returnValue: Stream<_i3.TSocketState>.empty(),
      ) as _i5.Stream<_i3.TSocketState>);
  @override
  _i5.Stream<Object> get onError => (super.noSuchMethod(
        Invocation.getter(#onError),
        returnValue: Stream<Object>.empty(),
      ) as _i5.Stream<Object>);
  @override
  _i5.Stream<_i6.Uint8List> get onMessage => (super.noSuchMethod(
        Invocation.getter(#onMessage),
        returnValue: Stream<_i6.Uint8List>.empty(),
      ) as _i5.Stream<_i6.Uint8List>);
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i5.Future<dynamic> open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  void send(_i6.Uint8List? data) => super.noSuchMethod(
        Invocation.method(
          #send,
          [data],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FTransportMonitor].
///
/// See the documentation for Mockito's code generation for more information.
class MockFTransportMonitor extends _i1.Mock implements _i7.FTransportMonitor {
  MockFTransportMonitor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<Null> get didDispose => (super.noSuchMethod(
        Invocation.getter(#didDispose),
        returnValue: Future<Null>.value(),
      ) as _i5.Future<Null>);
  @override
  String get disposableTypeName => (super.noSuchMethod(
        Invocation.getter(#disposableTypeName),
        returnValue: '',
      ) as String);
  @override
  int get disposalTreeSize => (super.noSuchMethod(
        Invocation.getter(#disposalTreeSize),
        returnValue: 0,
      ) as int);
  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);
  @override
  bool get isLeakFlagSet => (super.noSuchMethod(
        Invocation.getter(#isLeakFlagSet),
        returnValue: false,
      ) as bool);
  @override
  bool get isOrWillBeDisposed => (super.noSuchMethod(
        Invocation.getter(#isOrWillBeDisposed),
        returnValue: false,
      ) as bool);
  @override
  void onClosedCleanly() => super.noSuchMethod(
        Invocation.method(
          #onClosedCleanly,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onReopenSucceeded() => super.noSuchMethod(
        Invocation.method(
          #onReopenSucceeded,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<T> awaitBeforeDispose<T>(_i5.Future<T>? future) =>
      (super.noSuchMethod(
        Invocation.method(
          #awaitBeforeDispose,
          [future],
        ),
        returnValue: Future<T>.value(null),
      ) as _i5.Future<T>);
  @override
  _i5.Future<Null> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: Future<Null>.value(),
      ) as _i5.Future<Null>);
  @override
  void flagLeak([String? description]) => super.noSuchMethod(
        Invocation.method(
          #flagLeak,
          [description],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<T> getManagedDelayedFuture<T>(
    Duration? duration,
    T Function()? callback,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManagedDelayedFuture,
          [
            duration,
            callback,
          ],
        ),
        returnValue: Future<T>.value(null),
      ) as _i5.Future<T>);
  @override
  _i4.ManagedDisposer getManagedDisposer(_i4.Disposer? disposer) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManagedDisposer,
          [disposer],
        ),
        returnValue: _FakeManagedDisposer_2(),
      ) as _i4.ManagedDisposer);
  @override
  _i5.Timer getManagedTimer(
    Duration? duration,
    void Function()? callback,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManagedTimer,
          [
            duration,
            callback,
          ],
        ),
        returnValue: _FakeTimer_3(),
      ) as _i5.Timer);
  @override
  _i5.Timer getManagedPeriodicTimer(
    Duration? duration,
    void Function(_i5.Timer)? callback,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManagedPeriodicTimer,
          [
            duration,
            callback,
          ],
        ),
        returnValue: _FakeTimer_3(),
      ) as _i5.Timer);
  @override
  _i5.StreamSubscription<T> listenToStream<T>(
    _i5.Stream<T>? stream,
    void Function(T)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenToStream,
          [
            stream,
            onData,
          ],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_4<T>(),
      ) as _i5.StreamSubscription<T>);
  @override
  T manageAndReturnTypedDisposable<T extends _i4.Disposable>(T? disposable) =>
      throw UnsupportedError(
          '\'manageAndReturnTypedDisposable\' cannot be used without a mockito fallback generator.');
  @override
  _i5.Completer<T> manageCompleter<T>(_i5.Completer<T>? completer) =>
      (super.noSuchMethod(
        Invocation.method(
          #manageCompleter,
          [completer],
        ),
        returnValue: _FakeCompleter_5<T>(),
      ) as _i5.Completer<T>);
  @override
  void manageDisposable(_i4.Disposable? disposable) => super.noSuchMethod(
        Invocation.method(
          #manageDisposable,
          [disposable],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void manageStreamController(_i5.StreamController<dynamic>? controller) =>
      super.noSuchMethod(
        Invocation.method(
          #manageStreamController,
          [controller],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<Null> onDispose() => (super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [],
        ),
        returnValue: Future<Null>.value(),
      ) as _i5.Future<Null>);
  @override
  _i5.Future<Null> onWillDispose() => (super.noSuchMethod(
        Invocation.method(
          #onWillDispose,
          [],
        ),
        returnValue: Future<Null>.value(),
      ) as _i5.Future<Null>);
}
