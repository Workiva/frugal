/**
 * Autogenerated by Frugal Compiler (3.4.6)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package variety.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.workiva.frugal.FContext;
import com.workiva.frugal.exception.TApplicationExceptionType;
import com.workiva.frugal.exception.TTransportExceptionType;
import com.workiva.frugal.middleware.InvocationHandler;
import com.workiva.frugal.middleware.ServiceMiddleware;
import com.workiva.frugal.processor.FBaseProcessor;
import com.workiva.frugal.processor.FProcessor;
import com.workiva.frugal.processor.FProcessorFunction;
import com.workiva.frugal.protocol.*;
import com.workiva.frugal.provider.FServiceProvider;
import com.workiva.frugal.transport.FTransport;
import com.workiva.frugal.transport.TMemoryOutputBuffer;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TMessage;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;
import java.util.Arrays;
import java.util.concurrent.*;

public class FFoo {

	private static final Logger logger = LoggerFactory.getLogger(FFoo.class);

	/**
	 * This is a thrift service. Frugal will generate bindings that include a frugal
	 * Context for each service call.
	 */
	public interface Iface extends actual_base.java.FBaseFoo.Iface {

		/**
		 * Ping the server.
		 * 
		 * @deprecated don't use this; use "something else"
		 */
		@Deprecated
		public void Ping(FContext ctx) throws TException;

		/**
		 * Blah the server.
		 */
		public long blah(FContext ctx, int num, String Str, Event event)
				throws TException, AwesomeException, actual_base.java.api_exception;

		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, long id, java.util.Map<Integer, String> req) throws TException;

		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str)
				throws TException, actual_base.java.api_exception;

		public long param_modifiers(FContext ctx, int opt_num, int default_num, int req_num) throws TException;

		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type,
				java.util.Set<Long> set_type) throws TException;

		public Thing getThing(FContext ctx) throws TException;

		public int getMyInt(FContext ctx) throws TException;

		public A use_subdir_struct(FContext ctx, A a) throws TException;

		public String sayHelloWith(FContext ctx, String newMessage) throws TException;

		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException;

		public String sayAgain(FContext ctx, String messageResult) throws TException;

	}

	public static class Client extends actual_base.java.FBaseFoo.Client implements Iface {

		private Iface proxy;

		public Client(FServiceProvider provider, ServiceMiddleware... middleware) {
			super(provider, middleware);
			Iface client = new InternalClient(provider);
			List<ServiceMiddleware> combined = new ArrayList<ServiceMiddleware>(Arrays.asList(middleware));
			combined.addAll(provider.getMiddleware());
			middleware = combined.toArray(new ServiceMiddleware[0]);
			proxy = InvocationHandler.composeMiddleware(client, Iface.class, middleware);
		}

		/**
		 * Ping the server.
		 */
		@Deprecated
		public void Ping(FContext ctx) throws TException {
			logger.warn("Call to deprecated function 'Foo.Ping'");
			proxy.Ping(ctx);
		}

		/**
		 * Blah the server.
		 */
		public long blah(FContext ctx, int num, String Str, Event event)
				throws TException, AwesomeException, actual_base.java.api_exception {
			return proxy.blah(ctx, num, Str, event);
		}

		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, long id, java.util.Map<Integer, String> req) throws TException {
			proxy.oneWay(ctx, id, req);
		}

		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str)
				throws TException, actual_base.java.api_exception {
			return proxy.bin_method(ctx, bin, Str);
		}

		public long param_modifiers(FContext ctx, int opt_num, int default_num, int req_num) throws TException {
			return proxy.param_modifiers(ctx, opt_num, default_num, req_num);
		}

		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type,
				java.util.Set<Long> set_type) throws TException {
			return proxy.underlying_types_test(ctx, list_type, set_type);
		}

		public Thing getThing(FContext ctx) throws TException {
			return proxy.getThing(ctx);
		}

		public int getMyInt(FContext ctx) throws TException {
			return proxy.getMyInt(ctx);
		}

		public A use_subdir_struct(FContext ctx, A a) throws TException {
			return proxy.use_subdir_struct(ctx, a);
		}

		public String sayHelloWith(FContext ctx, String newMessage) throws TException {
			return proxy.sayHelloWith(ctx, newMessage);
		}

		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException {
			return proxy.whatDoYouSay(ctx, messageArgs);
		}

		public String sayAgain(FContext ctx, String messageResult) throws TException {
			return proxy.sayAgain(ctx, messageResult);
		}

	}

	private static class InternalClient extends actual_base.java.FBaseFoo.Client implements Iface {

		private FTransport transport;
		private FProtocolFactory protocolFactory;

		public InternalClient(FServiceProvider provider) {
			super(provider);
			this.transport = provider.getTransport();
			this.protocolFactory = provider.getProtocolFactory();
		}

		/**
		 * Ping the server.
		 */
		public void Ping(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("ping", TMessageType.CALL, 0));
			Ping_args args = new Ping_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("ping")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "Ping failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				}

		
			f (message.type != TMessageType.REPLY) {
					
			
		}Ping_result res res.read(iprot);
		

	}
		/**
		 * Blah the server.
		 */
		public long blah(FContext ctx, int num, String Str, Event event) throws TException, AwesomeException, actual_base.java.api_exception {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("blah", TMessageType.CALL, 0));
			blah_args args = new blah_args();
			args.setNum(num);
			args.setStr(Str);
			args.setEvent(event);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("blah")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "blah failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					}

	
		throw returnedException;
				
	}
	if (message.type != TMessageType.REP	throw new TAppl}blh_result res = new b
	a
		es.read(iprot);
	iif(res.isStSccess
	)
		return res.suc
	}if(res.awe!=null)
	{
		throw res.awe;
	}if (res.api != null) {
		

		}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "blah failed: unknown result");
		}
		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, long id, java.util.Map<Integer, String> req) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("oneWay", TMessageType.ONEWAY, 0));
			oneWay_args args = new oneWay_args();
			args.setId(id);
			args.setReq(req);
			

		oprot.writeMessageEnd();
			this.transport.oneway(ctx, memoryBuffer.getWriteBytes());
		}
		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str) throws TException, actual_base.java.api_exception {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("bin_method", TMessageType.CALL, 0));
			bin_method_args args = new bin_method_args();
			args.setBin(bin);
			args.setStr(Str);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("bin_method")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "bin_method failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
						eturnedExcepton= new TTransportExc

	p
		}
				
		
	}if (message.type	throw new TApplication}
	bre.read(ipot;prot.readMessai	return res.success;	

		if (res.api != null) {
				throw res.api;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "bin_method failed: unknown result");
		}
		public long param_modifiers(FContext ctx, int opt_num, int default_num, int req_num) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("param_modifiers", TMessageType.CALL, 0));
			param_modifiers_args args = new param_modifiers_args();
			args.setOpt_num(opt_num);
			args.setDefault_num(default_num);
			args.setReq_num(req_num);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("param_modifiers")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "param_modifiers failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "param_modifiers failed: invalid message type");
			

		param_modifiers_result res = new param_modifiers_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "param_modifiers failed: unknown result");
		}
		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type, java.util.Set<Long> set_type) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("underlying_types_test", TMessageType.CALL, 0));
			underlying_types_test_args args = new underlying_types_test_args();
			args.setList_type(list_type);
			args.setSet_type(set_type);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("underlying_types_test")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "underlying_types_test failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			

			throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "underlying_types_test failed: invalid message type");
			}
			underlying_types_test_result res = new underlying_types_test_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "underlying_types_test failed: unknown result");
		}
		public Thing getThing(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			ogeThing_args ars  new getThing_args();rgs.write(oprot);
	prot.writeMessageEnd();Trnsport respose= this.transport.request(ctx, memoryBuffer.ge
	W
		
	Pprot.readResponseHeader(
	Tif(!message.nam.euals("getThing")) {
				

	}if (message.type	TApplicationException 	iprot.readMessageEnd();
			if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {	

			}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "getThing failed: invalid message type");
			}
			getThing_result res = new getThing_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getThing failed: unknown result");
		}
		public int getMyInt(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("getMyInt", TMessageType.CALL, 0));
			getMyInt_args args = new getMyInt_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());
FPotocol iprot  tis.protocolFactory.eprot.readResponseHeader(ctx);T

	if (!message.name.equals("getMyInt")) {	throw new TAppl}if(message.type == TMes			TApplicationException e = TA	iprot.readMessageEnd();
		

			if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "getMyInt failed: invalid message type");
			}
			getMyInt_result res = new getMyInt_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getMyInt failed: unknown result");
		}
		public A use_subdir_struct(FContext ctx, A a) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("use_subdir_struct", TMessageType.CALL, 0));
			use_subdir_struct_args args = new use_subdir_struct_args();
			args.setA(a);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("use_subdir_struct")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "use_subdir_struct failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
			

			iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "use_subdir_struct failed: invalid message type");
			}
			use_subdir_struct_result res = new use_subdir_struct_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "use_subdir_struct failed: unknown result");
		}
		public String sayHelloWith(FContext ctx, String newMessage) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("sayHelloWith", TMessageType.CALL, 0));
			sayHelloWith_args args = new sayHelloWith_args();
			args.setNewMessage(newMessage);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			Tif (!message.name.equals("sayHelloWith")) {

		

		}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "sayHelloWith failed: invalid message type");
			}
			sayHelloWith_result res = new sayHelloWith_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sayHelloWith failed: unknown result");
		}
		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("whatDoYouSay", TMessageType.CALL, 0));
			whatDoYouSay_args args = new whatDoYouSay_args();
			args.setMessageArgs(messageArgs);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			

		if (!message.name.equals("whatDoYouSay")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "whatDoYouSay failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "whatDoYouSay failed: invalid message type");
			}
			whatDoYouSay_result res = new whatDoYouSay_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "whatDoYouSay failed: unknown result");
		}
		public String sayAgain(FContext ctx, String messageResult) throws TException {
			TFPotocol oprot  tis.protocolFactory.getProtocol(memoryBuffer);o

	oprot.writeMessageBegin(new TMessage("sayAgasayAgain_args arargs.setMessageResult(mars.write(oprot);prot.writeMessageEn
T		

		if (!message.name.equals("sayAgain")) {

		}

			TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
			

			}
			throw returnedException;
		}
		if (message.type != TMessageType.RE
			throw new TApplicationException(TAppli
		}
		sayAgain_result res = new sayAgain_result();
		res.read(iprot);
		iprot.readMessageEnd();
		if (res.isSetSuccess()) {
			return res.success;
		}
		throw new TApplicationException(TApplicationExcepti
		
		
	

	

	
		private Iface handler;

		public Processor(Iface iface, ServiceMiddleware... middleware) {
			super(iface, middleware);
			handler = InvocationHandler.composeMiddleware(iface, Iface.class, middleware);
		}

	protected
		java.util.Map<String, FProcessorFunction> processMap = s
		processMap.put("ping", new Ping(
		processMap.put("blah", new Blah());   
		

		processMap.put("param_modifiers", new Param_modif

		processMap.put("getThing", new GetThing());
			processMap.put("getMyInt", new GetMyInt());
			processMap.put("use_subdir_struct", new Use_subdir_struct());
			processMap.put("sayHelloWith", new SayHelloWith());
			processMap.put("whatDoYouSay", new WhatDoYouSay());
			processMap.put("sayAgain", new SayAgain());
			return processMap;
		}

		protected java.util.Map<String, java.util.Map<String, String>> getAnnotationsMap() {
			java.util.Map<String, java.util.Map<String, String>> annotationsMap = super.getAnnotationsMap();
			java.util.Map<String, String> PingMap = new java.util.HashMap<>();
			PingMap.put("deprecated", "don't use this; use \"something else\"");
			annotationsMap.put("ping", PingMap);
			return annotationsMap;
		}

		@Override
		public void addMiddleware(ServiceMiddleware middleware) {
			super.addMiddleware(middleware);
			handler = InvocationHandler.composeMiddleware(handler, Iface.class, new ServiceMiddleware[]{middleware});
		}

		private class Ping implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				logger.warn("Deprecated function 'Foo.Ping' was called by a client");
				Ping_args args = new Ping_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "Ping", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				Ping_result result = new Ping_result();
				try {
					handler.Ping(ctx);
				} catch (TApplicationException e) {
				
		

				oprot.writeMessageEnd();

				return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "ping", "Internal error processing Ping: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
					

				result.write(oprot);

				oprot.writeMessageEnd();		o
		r
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
				thro 
		(TApplicationExceptio
		)
				}
			throwe
		;
		
			}
		}
		
		
			
			
			
			vate class Blah implemen
			
			blic vo
		bah_ars
		 args = new b
		a
			ry {
				rgs.read(iprot);
						
						
			 
			iprot.re
					e = writeAplicationExc
		p
			}
				hrow e;
				
				
				rot.readMessageEnd();
				ah_result result = new blah_r
			ry {
				esult.success = handler.blah(ctx, args.num, args.Str, args.even
					sult.setSuccessIsSet(true);
							
							
				c
				esult.aw
			 
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
		}

			try {
				oprot.writeResponseHeader(ctx);
		
	

				oprot.getTransport().flush();

				if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
					throw (TApplicationException) writeApplica
				}
				throw e;
			}
			
			
				
						
			
			vate cla
		

		oneWay_args args = new 
		try {
			args
			 catch (TException e) {
			iprot.readMessageEnd();
			throw e;
			
		
			prot.readMessageEnd();
			andler.oneWay(ctx, args.id, args.req);
			
			
			
			vate cl
		
			blic void process(FContext 
				n_method_args args = new bin_method_args();
						
						
			r
			args.rea
		}
			iprot.readMessageEnd();
			synch
				e = writeApplicationException(c
				
				hrow e;
				
				
			prot.readMessageEnd();
				n_method_result result = new bin_method_result();
					 {
							
							
				e
				esult.se
			 
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class Param_modifiers 
				
						
						
			b
			aram_mod
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				r
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class Underlying_types
				
						
						
			b
			nderlyin
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				d
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class GetThing impleme
				
						
						
			b
			etThing_
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				t
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class GetMyInt impleme
				
						
						
			b
			etMyInt_
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				t
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class Use_subdir_struc
				
						
						
			b
			se_subdi
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				e
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class SayHelloWith imp
				
						
						
			b
			ayHelloW
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				y
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class WhatDoYouSay imp
				
						
						
			b
			hatDoYou
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				a
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class SayAgain impleme
				
						
						
			b
			ayAgain_
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				y
				y {
			r
			
		
	

	

				oprot.getTransport().flush();
		
				return;
			

					e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "sayAgain", "Intern
				}
				throw e;
			}
		

				
	 * oprot.writeResponseHeader(ctx);
	 * 
	 
					oprot.writeMessageBegin(new TMessage("sayAgain", TMessageTy
			

					oprot.getTransport().flush();

					if (e
						throw (TApplicationException) writeApplicationExc
					}
				
			

		}
		 
		 
		
			 
			ic stati
				ate static f
			
		

		tat
		 chemes.put(StandardScheme.class, new Ping_argsStandardSchemeFactory()); emes.
		 * ut(TupleSchem
		 
		
			* The set of fields this struct contains,
			blic enum _Fields i
				plements org.apache.thrift.TFieldIdEnum {
			
		

		
		 tatic {
		 fo
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant tha

		public static _Fields findByThriftId(int fi
			switch(fieldId) {
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 *
	  */
	 pu
			return byName.get(name);
		

		private final short _thriftI
		private final String _field
	

			_thrift
			_fieldName = fieldN
		

		public short getThriftFieldId() {
			return _thriftI
		}
	

			return _fieldName;
		}
		
		
	/

	}
	 * 
	 * 
	 
	
		**
			 Performs a deep copy on <i>other</i>
		*

		
		
		ublic Ping_args deepCopy() {
		

	
	@Override
		ublic void clear(
			
		
			blic void setFieldValue(_Field s fiel
		switch (field
		

	
		ublic Object getF
			witch (field)

		throw new Il
	}

	/** Retur
	public boolean isSet(_F
		if (field == null) {

		}
	

		}
		throw new IllegalStateException();
		
			
		O

		if (that == null)

		if (that 
		

	}
		
	p

			return false;
		
		

	
		Override
	p

	
		return list.hashCode();
		
		

		ublic int compa
		if (!getClass().equal
		

	
		int lastComparison = 0;
		
		

	
		ublic
			eturn _Fields.findByThriftId(fieldId);
					
		
			
		u
		

	
		ublic
			chemes.get(oprot.getScheme()).getScheme().write(oprot, this);
			// 
			
					
		
			verride
		u
		

	
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IOExcep
				y
				/ it doesn't seem lik
			r
			 catch (org.apache.thr

			
			// 
			
		

		public Ping_argsStandardScheme getScheme() {
				
			return new Ping_ar

			
			
			ivate static class Ping
		

		

			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apach
			
		

					default:

				}
				iprot.readFieldEnd();
				
			}
			

			// check
			struct.validate();
				
			
		

		

	

			oprot.writeStructEnd();
		
		}
			

	
	private 
		public Ping_argsTupleScheme getScheme() {
			return new Ping_argsTupleScheme();
		

	
	 * 
	 * 
	 
	private static class Ping_argsTupleScheme extends TupleScheme<P
		

		public void write(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) thr

		}
			
				verride
			u
			

		
		 
		 
		
			 
			ic stati
				ate static f
			
		

		tat
		 chemes.put(StandardScheme.class, new Ping_resultStandardSchemeFactory() emes.
		 * ut(TupleSchem
		 
		
			* The set of fields this struct contains,
			blic enum _Fields i
				plements org.apache.thrift.TFieldIdEnum {
			
		

		
		 tatic {
		 fo
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant tha

		public static _Fields findByThriftId(int fi
			switch(fieldId) {
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 *
	  */
	 pu
			return byName.get(name);
		

		private final short _thriftId;
		private final String _fieldNa
	

			_thrift
			_fieldName = fieldN
		

		public short getThriftFieldId() {
			return _thriftI
		}
	

			return _fieldName;
		}
		
		
	/

	}
	 * 
	 * 
	 
	
		**
			 Performs a deep copy on <i>other</i>
		*

		
		
		ublic Ping_result deepCopy() {
		

	
	@Override
		ublic void clear(
			
		
			blic void setFieldValue(_Fields  field,
		switch (field
		

	
		ublic Object getF
			witch (field)

		throw new Il
	}

	/** Retur
	public boolean isSet(_F
		if (field == null) {

		}
	

		}
		throw new IllegalStateException();
		
			
		O

		if (that == null)

		if (that 
		

	}
		
	p

			return false;
		
		

	
		Override
	p

	
		return list.hashCode();
		
		

		ublic int compa
		if (!getClass().equal
		

	
		int lastComparison = 0;
		
		

	
		ublic
			eturn _Fields.findByThriftId(fieldId);
					
		
			
		u
		

	
		ublic
			chemes.get(oprot.getScheme()).getScheme().write(oprot, this);
			// 
			
					
		
			verride
		u
		

	
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IOExcep
				y
				/ it doesn't seem lik
			r
			 catch (org.apache.thr

			
			// 
			
		

		public Ping_resultStandardScheme getScheme() {
				
			return new Ping_re

			
			
			ivate static class Ping
		

		

			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.
			
		

					default:

				}
				iprot.readFieldEnd();
				
			}
			

			// check
			struct.validate();
				
			
		

		

	

			oprot.writeStructEnd();
		
		}
			

	}
			 
	
			 
	private static class Ping_resultTupleSchemeFactory implements SchemeFactory {
			 

			return new Ping_resultTupleScheme();
		}
		
		
	p

		@Override
		public void write
			TTupleProtocol op

		}
	 * 
	 * 
	 
	
		@Override  public void  read(org. 	TTupleProtoc ol iprot = }

		

		
			
				ic static class blah_args implements org
			i
		

		riv
		 ivate static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new
		 
		rivate static final Map<Class<? extends IScheme>, S
			atic { 
			hemes.put(Stan
				emes.put(Tu
			
				
			lic int num;
				ic String Str
			lic Even
				The set of f
			b
		N

		EVE
		  
		 * 
		 ri
		
			tatic {
			for (_Fields field 
				 EnumSet.allOf(_Fields.class)) {
				byName.put(fi
			

		
		 **
		 * 
		 */
			ublic static _Fields fin
			

					return NUM;
				case 2: // STR

				case 3: // EVENT
					return EVENT;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		/**
		

		public static _F	return  } 
		private
		private final S
		
		_Fields(short t
			_thriftId = thrift
		

	
	 public short getThriftFieldId() {
	 	r
		}
		
		public String getFiel
			return _fieldName;
			
		
		
			 isset id assignments
		r
	p

	}
		
	p

		String S
		Event event) {
		this();
		this.num = nu

		this.Str = Str;

		

	/

	 */
		ublic blah_args(
		

		if (other.isSetStr()) {
			this.Str = oth
		}
		if (other.is
		

	}
		
	p

	}
	 * 
	 * 
	 
	
		Override
	p

		this.num = 0;
		
		

		this.event = null;
		
	}

	public int getNum() {
		return this.num
		
	

		this.num = num;
		setNumIsSet(true
		

	
	 * 
	 * 
	 
	public void unsetNum() {
		__isset_bitfield = Encod
	}

	/** Returns true if field num is set (ha
		ublic boolean
			eturn EncodingUt
		
	

		__isset_bitfield = Encod
		
	

		return this.Str;
		
		
	p

		return this;
		
	

		th
	 * s.Str = null;
	 * 
	 
	}
		
	/

		return this.Str != null;
		
			
		u
		

		}
		
		
			blic Event getEvent(
				turn this.e
			
				 
			b
			his.ev

		
			
				lic void un
			his.even
				 
			
			* Retu

		return this
			
				
			blic voi
				 (!value) { 
			t
			

		
	p

		case NUM:
			if (value == nu
				unsetNu
			} else {

			}
			break;

		case STR:
			if (value == null)

			
				setStr((String)value);
		

	
	 * 
	 * 
	 
		case EVENT:
			if (value == null) 
				unsetEvent();
			

			}
			break;
			
		}
			
		
			blic Object getField
		s
		case NUM:
		

		case STR
			return getStr();
		
			ase EVENT:
			return getEvent();
			 
		}
		

	
		** Returns true i
			blic boolean 

			throw new IllegalArgumentExcept
		}
		
			witch (field) {
				se NUM:
			return isSetNum();
				se STR:
			

			return isSetEvent();
		}
		throw new IllegalStateException();
			
				
			verride
				lic boolean e
		i

		if (that instanceof blah_args)
			return this.equals((blah_args)that);
		return false;
			
				
			blic boolean equals(blah_args that)
				 (that == nul
			

		boolean this
		

			if (!(t
				return false;
			if (this.num != that.num)

		}
		
		boolean this_pre
			oolean that_pr

			if (!(this_present_Str && that_present_Str
				return false;
			if (!this.Str.e
				return false;

		
		boolean this_present_eve
		boolean that_prese
			f (this_present_

				return false;
		

		}
	
		return true;
			
		

		ublic int hashCode() {

		
		boolean present_num = true
			ist.add(present_num);
		i
			list.add(num);
			
			oolean present_Str = true 
				st.add(present_Str);
			f
			
		
		boolean present_event = tr
			ist.add(present_event)
		i
			list.add(event);
			
			eturn list.hashCode();
				
			
		O
		ublic int compareTo(blah_args other) {
		if (!getClass().equals(oth
			return getClass().getN
		}
		
			nt lastComparison = 0;
			
				stComparison = Boolean
			f
			
		}
		

			if (lastComparison != 0) {
				return lastComparison;
		

		lastComparison = Boolean.valueOf(isSetStr()).compareTo(other.isSetStr());
		if (lastComparison != 0) {
		

		if (isSetStr()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this
		

			}
		}
		lastComparison = Boolean.valueOf(isSetEvent()).comp
		if (lastComparison !=

		}
		if (isSetEvent()) {
			lastCompariso
			if (lastCo
			parison != 0) {
				return lastCompa
			}
			
		return 0
			
		
		ublic _Fields 
		return _Fie
			ds.findByThriftI
		
		
			blic void read(org
		schemes.
			
		
		ublic void wri
		schemes.get(opr
		
	

	public String toString() {
		StringBuilder sb = new Strin
		boolean first = true;
		
			b.append("num:");
		s
		

		sb.append("Str:");
		if (t
			sb.append("null");
					
		} else {
			sb.append(this.Str);
		}
		

		sb.append("event:");
		if (t
			sb.append("null");
			// 
			 else {
			sb.append(this.event);
					
		}
			irst = false;
		s
		

	
		ublic void validate() throws org.apache.thri
			/ check for required fields
		/
		

		}

		
				
			ivate void writeObject(java.io.ObjectOutputStr
			ry {
			write(new org.
				catch (org.apache.thrift.TException t
				hrow new java.io.IOException(te);
					
				
				
				ate void readO
					{
						t doesn't seem like you shoul
						set_bitfield = 0;
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
						e static class blah_argsStandard
						c blah_argsStandardScheme
					urn new 
						
					
					
				ate static class
					
						c void read(org.apache.thri
						apache.thrift.protocol.TF
						t.readStructBegin();
					le (true
						emeField = iprot.readFieldBegin();
					 
					reak;
				
					itch (schemeField.id) {
					
						if (schemeField.typ
				
							struct.setNumIsSet

							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
			// 
						}
			

						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
				
							struct.Str = i

						} else {
							org.apache.thrift.protocol.TProtoc
						}
						break;
					case 3: // EVENT
						if (schemeField.type =
							struct.event = new Event();
							struct.event.read(iprot);
							struct.setEventIsSet(tru
						} else {
				
						}
						break;
					default:
						org.apache.thrift.pr
				
				iprot.readFieldEnd();
			}
			

		

		}
		
			ublic void write(org.apache.thrift
			
	

			oprot.writeFieldBegin(NUM_FIELD_DESC);

			oprot.wr
			oprot.writeFieldEnd();
				
			if (struct.Str != null) {
				oprot.writeFieldBegin(STR_FIELD
				String elem258 = struct
				oprot.writeString
				
			}
				f (struct.event !
				
				struct.event.write(oprot)
				oprot.writeFieldE
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
				
				
			
			
				vate static class blah_argsT
				blic blah_argsTupleScheme g
			r
			
				
			
		r

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, blah_args struct
				 throws org.apache.thrift.TException 
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetNum())
				optionals.set(0);
				
			i
				optionals.set(1);
				
				f (struct.isSetEvent()) {
				
			}
				prot.writeBitSet(optionals,
				f (struct.isSetNum()) {
				int elem259 = struct.num;
				
			

		

	

				struct.event.write(oprot);
		
			}
			

	
			 
		@Override
			 
		public void read(org.apache.thrift.protocol.TProtocol prot, blah_args struct) throws org.apache.thrift.TException {
			 

			BitSet incoming = iprot.readBitSet(3);
			if (in
				struct.num = iprot.readI32();
				struct.setNumIsSet(true);
		

				struct.Str = ipro
				struct.setStrIsSet(true);
			}

			i
	 *  (incoming.get(2)) {
	 * 
	 
				struct.event = new Event();
				struct.event. read(iprot); 		struct.se tEventIsSe 	} }

		

		
			
				ic static class blah_result implements o
			i
		

		riv
		 ivate static final org.apache.thrift.protocol.TField API_FIELD_DESC = new o
		 
		rivate static final Map<Class<? extends IScheme>, S
			atic { 
			hemes.put(Standard
				emes.put(TupleS
			
				
			lic long succe
				ic AwesomeE
			lic actu
				The set of f
			b
		S

		API
		  
		 * 
		 ri
		
			tatic {
			for (_Fields field 
				 EnumSet.allOf(_Fields.class)) {
				byName.put(fi
			

		
		 **
		 * 
		 */
			ublic static _Fields fin
			

					return SUCCESS;
				case 1: // AWE

				case 2: // API
					return API;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		/**
		

		public static _Fie	return byNam } 
		private
		private final String _f
		
		_Fields(short t
			_thriftId = th
		

	
	 public short getThriftFieldId() {
	 	r
		}
		
		public String getFieldName() 
			return _fieldName;
			
		
		
			 isset id assignments
		r
	p

	}
		
	p

		AwesomeE
		actual_base.java.api
		this();
		this.success = suc

		this.awe = awe;

		

	/

	 */
		ublic blah_result(bl
		

		if (other.isSetAwe()) {
			this.awe = new Awesome
		}
		if (other.is
		

	}
		
	p

	}
	 * 
	 * 
	 
	
		Override
	p

		this.success = 0L;
		
		

		this.api = null;
		
	}

	public long getSuccess() {
		return this.suc
		
	

		this.success = success;
		setSuccessIsSet(
		

	
	 * 
	 * 
	 
	public void unsetSuccess() 
		__isset_bitfield = Encod
	}

	/** Returns true if field success is set
		ublic boolean
			eturn EncodingUt
		
	

		__isset_bitfield = EncodingUtils.setBit(__isset
		
	

		return this.awe;
		
		
	p

		return this;
		
	

		th
	 * s.awe = null;
	 * 
	 
	}
		
	/

		return this.awe != null;
		
			
		u
		

		}
		
		
			blic actual_base.jav
				turn this.api;
			
				 
			b
			his.ap

		
			
				lic void un
			his.api 
				 
			
			* Retu

		return th
			
				
			blic voi
				 (!value) { 
			t
			

		
	p

		case SUCCESS:
			if (value == nu
				unsetSucces
			} else {

			}
			break;

		case AWE:
			if (value == nul

			
				setAwe((AwesomeException)value);
		

	
	 * 
	 * 
	 
		case API:
			if (value == null) 
				unsetApi();
			

			}
			break;
			
		}
			
		
			blic Object getFie
		s
		case SUCCESS:
		

		case AWE
			return getAwe();
		
			ase API:
			return getApi();
			 
		}
		

	
		** Returns true i
			blic boolean 

			throw new IllegalArgumentException(
		}
		
			witch (field) {
				se SUCCESS:
			return isSetSuccess();
				se AWE:
			

			return isSetApi();
		}
		throw new IllegalStateException();
			
				
			verride
				lic boolean e
		i

		if (that instanceof blah_result)
			return this.equals((blah_result)that);
		return false;
			
				
			blic boolean equals(blah_result
				 (that == nul
			

		boolean this
		

			if (!(t
				return false;
			if (this.success != that.success)

		}
		
		boolean this_present
			oolean that_presen

			if (!(this_present_awe && that_present_awe
				return false;
			if (!this.awe.e
				return false;

		
		boolean this_present_a
		boolean that_pre
			f (this_presen

				return false;
		

		}
	
		return true;
			
		

		ublic int hashCode() {

		
		boolean present_success = 
			ist.add(present_succes
		i
			list.add(success);
			
			oolean present_awe = true 
				st.add(present_awe);
			f
			
		
		boolean present_api = true
			ist.add(present_api);
		i
			list.add(api);
			
			eturn list.hashCode();
				
			
		O
		ublic int compareTo(blah_result other) {
		if (!getClass().equals(oth
			return getClass().getN
		}
		
			nt lastComparison = 0;
			
				stComparison = Boolean
			f
			
		}
		

			if (lastComparison != 0) {
				return lastComparison;
		

		lastComparison = Boolean.valueOf(isSetAwe()).compareTo(other.isSetAwe());
		if (lastComparison != 0) {
		

		if (isSetAwe()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this
		

			}
		}
		lastComparison = Boolean.valueOf(isSetApi()).compareT
		if (lastComparison !=

		}
		if (isSetApi()) {
			lastCompariso
			if (lastCo
			parison != 0) {
				return lastCompa
			}
			
		return 0
			
		
		ublic _Fields 
		return _Fie
			ds.findByThriftI
		
		
			blic void read(org
		schemes.
			
		
		ublic void wri
		schemes.get(opr
		
	

	public String toString() {
		StringBuilder sb = new Strin
		boolean first = true;
		
			b.append("succe
		s
		first = false;
			f (!first) sb.a
		s
		

		} else {
			sb.a
			
					
		first = false;
			f (!first) sb.append(", ");
		s
		

		} else {
			sb.a
			
			// 
			irst = false;
			b.append(")");
					
		return sb.toString();
			
		
	p

		// check for sub-struct validity
		if (awe != null) {
			awe.validate();
		}
		

		}

		
				
			ivate void writeObject(java.io.ObjectOutputStr
			ry {
			write(new org.
				catch (org.apache.thrift.TException t
				hrow new java.io.IOException(te);
					
				
				
				ate void readObjec
					{
						t doesn't seem like you should ha
						set_bitfield = 0;
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
						e static class blah_resultStandardSc
						c blah_resultStandardSc
						rn new blah_resultStandar
					
						
					
					te sta
				
					ic void read(org.apache.thrift.protocol.TProtocol iprot, blah_resu
						apache.thrift.protocol.TField schemeField;
						t.readStructBegin();
						e (true) {
					hemeFiel
						(schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					r
					
				witch (s
					ase 0: // SUCCESS
					
							struct.success = i
				
						} else {

						}
			// 
						break;
			

							struct.awe = new AwesomeException();
				
							struct.awe.rea

						} else {
							org.apache.thrift.protoc
						}
						break;
					case 2: // API
						if (schemeField.type
				
							struct.api.read(iprot
							struct.setApiIsSet(true);
						} else {
							org.apache.thrift.p
				
						break;
					default:
						org.apache.thrift.prot
				}
				
			}
			iprot.readStructEnd();
		

		

	
		public void write(org.apache.thrift.protoco
			struct.validate();
		
		

				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);

				oprot.w
				oprot.writeFieldEnd();
				
			}
			if (struct.awe != null) {
				oprot.writeFieldBegin(AWE_F
				struct.awe.write(
				
			}
				f (struct.api != 
				
				struct.api.write(oprot)
				oprot.writeFieldE
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
				
				
			
			
				vate static class blah_r
			u
			return new blah_resultTu
				
			
		

		
		@Override
				
			ublic void write(org.apache.thrift.protocol.T
			TTupleProtocol oprot = (TTupleProtocol
			BitSet optionals = new
				f (struct.isSetSuccess()) {
				optionals.set(0);
			}
			if (struct.isSetAwe())
				optionals.set(1);
				
				f (struct.isSetApi()) {
				
			}
				prot.writeBitSet(optionals, 3);
				f (struct.isSetSuccess(
				long elem262 = struct.suc
				
			

		

	

			}
		
		}
			

		@Override
			 
		public void read(org.apache.thrift.protocol.TProtocol prot, blah_result struct) throws org.apache.thrift.TException
			{ 

			BitSet incoming = iprot.readBitSet(3);
			if (in
				struct.success = iprot.readI64();
				struct.setSuccessIsSet(true);
		

				struct.awe =
				struct.awe.read(iprot);

				
	 * truct.setAweIsSet(true);
	 * 
	 
			}
			if (incom ing.get(2 		struct.ap i = new a	

			}

		
			
				
			
		

		riv
		 
		 iv
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static f
				ic {
			hemes.put(Stan
				emes.put(Tu
			
				
			b
		u

		ubl
		 D((short)1, "id"), ((sho
		 * t)2, "req")
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 1: // ID

				case 2: // REQ
					return REQ;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		/**
		

		public static _Fie	return  }
		
		private final
		private final Str
		
		

			_
	 }
	 
		public short getThriftFieldId() {
			return _thriftId;
		}
		
			ublic String getFieldName() { 
			
		

	
		/ isset id assignments
	p

	public on
	}
		
		ublic oneWay_

		java.util.Map<In

		

		this.req = req;
		
	

	 * Performs a deep copy on <i>other
		*/
		ublic oneWay_args
		__isset_bitf
		

			this.req = new HashMa
		}
	}

	pub
	 * ic oneWay_args deepCopy() {
	 * 
	 
		return new oneWay_args(th
		
	

	public void clear() {
		setIdIsSet(false);
		

		this.req = null;
		
	}

	public long getId() {
		return this.id;
			 
		
		ublic oneWay_args setId
		

		return this;
		
	

		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __
		
		
	/

		return EncodingUtils.te
		
	

		__
	 * sset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, 
	 * alue);
	 
	}
		
	p

	}
		
			blic void putToR
		i
		

		this.req.put(key, val);
		
		
			blic java.util.Map<I
				turn this.
			
				 
			b
			his.re

		
			
				lic void un
			his.req 
				 
			
			* Retu

		r
	}

	public void setReqIsSet(boolean value) {
		if (!value) {
			this.re
			

		
			blic void setFie

		c
			if (value == null) {
		

				
	 * etId((Long)value);
	 * 
	 
			}
			break;
			
		c

				unsetReq();
			} else 
				setReq((java.uti
			}
			break;
		
		}
	}

	public Ob
		switch (field) {
		case ID:
			return getId(
		
			ase REQ: 
			return getRe
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields fie
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se ID:
			

			return isSetReq();
		}
		throw new IllegalStateException();
			
				
			verride
				lic boolean e
		i

		if (that ins
		

	}
	
		ublic boolean equals(oneWay_args that) {

			return false;
		
		boolean this_pr
			oolean that_p

			if (!(this_present_id && that_present_id))
				return false;
			if (this.id != 
				return false;

		
		

		if (this
			if (!(this_present_req && that_present_
				return false;
			if (!this.req.equals(that.req))
			

		

		
		
			verride
		u
		List<Object> lis
			
			oolean present_id = true;
				st.add(present_id);
			f
			
		
		boolean present_req = true
			ist.add(present_req);
		i
			list.add(req);
			
			eturn list.hashCode();
				
			
		O
		ublic int
		

		}
		
		

		lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
		if (lastComparison != 0) {
		

		if (isSetId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this
		

			}
		}
		lastComparison = Boolean.valueOf(isSetReq()).compareT
		if (lastComparison !=

		}
		if (isSetReq()) {
			lastCompariso
			if (lastCo
			parison != 0) {
				return lastCompa
			}
			
		return 0
			
		
		ublic _Fields 
		return _Fields.
		
	

		schemes.get(iprot.getScheme()).getScheme().read(iprot, this
		
		
	p

	}
		
			verride
					
		ublic String toString() {
			tringBuilder sb = new StringBuilde
		b
	

		sb.append(this.id);
		first
			f (!first) sb.append(", ");
			// 
			b.append("req:");
			f (this.req == null) {
					
			sb.append("null");
			 else {
			
		

		sb.append(")");
		return sb.toString();
			
		
	p

		// check for sub-struct validity

		
				
			ivate void writeObject(java.io.ObjectOutputStr
			ry {
			write(new org.
				catch (org.apache.thrift.TException t
				hrow new java.io.IOException(te);
					
				
				
				ate void read
					{
						t doesn't seem like you shou
						set_bitfield = 0;
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
						e static class oneWay_argsStandardSchemeFactory implements Sche
						c oneWay_argsStandardScheme getSc heme() {  
						rn new oneWay_argsStandardScheme();
							
							
							
						e
						
						c void read(org.apache.th
					.apache.
						t.readStructBegin();
					l
					hemeFi
				f (schem
					reak;
				}
				switch (schemeField.i
				
						if (schemeField.typ

							struct.setIdIsSet(true);
			// 
						} else {
			

						break;
				
					case 2: // REQ

							org.apache.thrift.protocol.TMap 
							struct.req = new HashMap<Integer,
							for (int elem266 = 0;
								int elem268 = iprot
								String elem267 = 
								struct.req.put(elem2
							}
							iprot.readMapEnd();
						
							struct.setReqIsSet(true);
						} else {
							org.apache.thrift.prot
						}
						break;
					
						org.apache.thrift.
				}
				
			}
			iprot.readStructEnd();
		

		

	
		public void write(org.apache.thrift.protoco
			struct.validate();
		
		

			long elem269 = struct.id;

			oprot.wr
			if (struct.req != null) {
				
				oprot.writeFieldBegin(REQ_FIELD_DESC);
				oprot.writeMapBegin(new org.apa
				for (Map.Entry<Integer
					int elem271 = el
				
					String elem272 = elem2
					oprot.writeStrin
				
				oprot.writeMapEnd();
				oprot.writeFieldEnd();
				
				prot.writeFieldStop();
			o
			
				
				
					
					ate static class oneWay_
					lic oneWay_argsTupleScheme getScheme
					turn new oneWay_argsTupleSc
				
			
		

		
		@Override
				
			ublic void write(org.apache.thrift.protocol.T
			TTupleProtocol oprot = (TTupleProtocol
			BitSet optionals = new
				f (struct.isSetId()) {
				optionals.set(0);
			}
			if (struct.isSetReq())
				optionals.set(1);
						
				   
				prot.writeBitSet(optionals, 2);
					 (struct.isSetId()) {
					ong elem273 = struct.id;
					prot.writeI64(elem273);
				
				f (struct.isSetReq()) {
				
			

		

	

			}
		
		}
			

		@Override
			 
		public void read(org.apache.thrift.protocol.TProtocol prot, oneWay_args struct) throws org.apache.thrift.TException
			{ 

			BitSet incoming = iprot.readBitSet(2);
			if (in
				struct.id = iprot.readI64();
				struct.setIdIsSet(true);
		

				org.apache.thrift.protocol.T
				struct.req = ne

				
	 * or (int elem278 = 0; elem278 < elem277.size; ++elem278) {
	 * 
	 
					int elem280 = iprot.readI32();
					String e lem279 = i 			struct.r eq.put(el	

			}

		
			
				
			
		

		riv
		 
		 iv
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static fi
				ic {
			hemes.put(Stan
				emes.put(Tu
			
				
			b
		u

		ubl
		 IN((short)1, "bin"), ((sho
		 * t)2, "Str")
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 1: // BIN

				case 2: // STR
					return STR;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields co */ public static
			return
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
		p
			return _thriftId;
			
		
		

		}
		
	

	public bi
	}
		

		java.nio.ByteBuf

		

		this.Str = Str;
		
		
	/

	 */
		ublic bin_method_args(bin_method_args other) {
		

		}
		if (other.isSetStr()) { 
			this.Str = 
		

	
		ublic bin_method_args deepCopy() {
		return new b
	}

	@Override
		ublic void clear
		

		th
	 * s.Str = null;
	 * 
	 
	
		
	

		setBin(org.apache.thrift.TBaseHelper.ri
		return bin ==
			
		
	p

	}
		
	p

		return this;
		
		
	p

		return this;
		
	

		th
	 * s.bin = null;
	 * 
	 
	}
		
	/

		return this.bin != null;
		
			
		u
		

		}
		
		
			blic String getStr()
				turn this.S
			
				 
			b
			his.St

		
			
				lic void un
			his.Str 
				 
			
			* Retu

		r
	}

	public void setStrIsSet(boolean value) {
		if (!value) {
			this.Str
			

		
			blic void setFie

		c
			if (value == null) {
		

				
	 * etBin((java.nio.ByteBuffer)value);
	 * 
	 
			}
			break;
			
		c

				unsetStr();
			} else {
				setStr((String)va
			}
			break;
		
		}
	}

	public Ob
		switch (field) {
		case BIN:
			return getBin
		
			ase STR: 
			return getSt
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se BIN:
			

			return isSetStr();
		}
		throw new IllegalStateException();
			
				
			verride
				lic boolean e
		i

		if (that ins
		

	}
	
		ublic boolean equals(bin_method_args that) {

			return false;
		
		boolean this_pre
			oolean that_pr

			if (!(this_present_bin && that_present_bin
				return false;
			if (!this.bin.e
				return false;

		
		

		if (this
			if (!(this_present_Str && that_present_Str)
				return false;
			if (!this.Str.equals(that.Str))
			

		

		
		
			verride
		u
		List<Object> list
			
			oolean present_bin = true 
				st.add(present_bin);
			f
			
		
		boolean present_Str = true
			ist.add(present_Str);
		i
			list.add(Str);
			
			eturn list.hashCode();
				
			
		O
		ublic int
		

		}
		
		

		lastComparison = Boolean.valueOf(isSetBin()).compareTo(other.isSetBin());
		if (lastComparison != 0) {
		

		if (isSetBin()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this
		

			}
		}
		lastComparison = Boolean.valueOf(isSetStr()).compareTo(ot
		if (lastComparison !=

		}
		if (isSetStr()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
			
		
		
			blic _Fields field
		return _
			
		
		ublic void rea
		schemes.get(ipr
		
	

		schemes.get(oprot.getScheme()).getScheme().write(oprot, thi
		
		
	@

		StringBuilder sb = new StringBuilder("bin_method_args(");
		boole
			
					
		sb.append("bin:");
			f (this.bin == null) {
			
		

		}
		first
			f (!first) sb.append(", ");
			// 
			b.append("Str:");
					
		if (this.Str == null) {
			sb.append("null");
		}
		

		first = false;
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like you s
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
						e static class bin_method_argsSt
						c bin_method_argsStandard
					urn new 
						
					
					
				ate stat
					
				b
				rg.apache.thrift.prot
			i
			while (true) {

				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
			// 
					break;
			

					case 1: // BIN
				
						if (schemeField

							struct.setBinIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtoco
						}
						break;
					case 2: // STR
				
							struct.Str = iprot.re
							struct.setStrIsSet(true);
						} else {
							org.apache.thrift.protoc
						}
				
					default:
						org.apache.thrift.pr
			

		

	
			// check for required fields of primitive type
			struct.validate();
		}
	

			struct.validate();

			oprot.wr
			if (struct.bin != null) {
				
				oprot.writeFieldBegin(BIN_FIELD_DESC);
				java.nio.ByteBuffer elem281 = s
				oprot.writeBinary(elem2
				oprot.writeFieldE
			}
			if (struct.Str != null) 
				oprot.writeFieldB
				
				oprot.writeString(elem282);
				oprot.writeFieldEnd();
				
				prot.writeFieldStop();
			o
			
				
				
			
		r

			return n
		}
				
			
			
			ivate static class bin
				
				verride
			u
			TTupleProtocol oprot =
				itSet optionals = new BitSet();
				f (struct.isSetBin()) {
				
			

		

	

				java.nio.ByteBuffer elem283 = struct.bin;
		
				oprot.writeBinary(elem283);
			

			if (struct.isSetStr()) {
			 
				String elem284 = struct.Str;
			 

			}
		}
		
		@Override
		

			BitSet incoming = iprot.readBitSe
			if (incoming.get(0)) {

				
	 * truct.bin = iprot.readBinary();
	 * 
	 
				struct.setBinIsSet(true);
			}  	if (incomi ng.get(1)	

			}

		
			
				
			
		

		riv
		 
		 iv
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final 
				ic {
			hemes.put(Stan
				emes.put(Tu
			
				
			b
		u

		ubl
		 UCCESS((short)0, "success"), ((sho
		 * t)1, "api")
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 0: // SUCCESS

				case 1: // API
					return API;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields cons */ public static _Fields findByName(Stri
			return
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
		p
			return _thriftId;
			
		
		

		}
		
	

	public bi
	}
		

		java.nio.ByteBuf

		

		this.api = api;
		
		
	/

	 */
		ublic bin_method_result(bin_method_result other) {
		

		}
		if (other.isSetApi()) { 
				
			this.api = 
		

	
		ublic bin_method_result deepCopy() {
		return new b
	}

	@Override
		ublic void clear() {
		

		th
	 * s.api = null;
	 * 
	 
	
		
	

		setSuccess(org.apache.thrift.TBaseHelper.ri
		return succes
			
		
	p

	}
		
	p

		return this;
		
		
	p

		return this;
		
	

		th
	 * s.success = null;
	 * 
	 
	}
		
	/

		return this.success != null;
		
			
		u
		

		}
		
		
			blic actual_base.jav
				turn this.api;
			
				 
			b
			his.ap

		
			
				lic void un
			his.api 
				 
			
			* Retu

		r
	}

	public void setApiIsSet(boolean value) {
		if (!value) {
			this.api = n
			

		
			blic void setFie

		c
			if (value == null) {
		

				
	 * etSuccess((java.nio.ByteBuffer)value);
	 * 
	 
			}
			break;
			
		c

				unsetApi();
			} else {
				setApi((actual_base.j
			}
			break;
		
		}
	}

	public Ob
		switch (field) {
		case SUCCESS:
			return getSuc
		
			ase API: 
			return getAp
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se SUCCESS:
			

			return isSetApi();
		}
		throw new IllegalStateException();
			
				
			verride
				lic boolean e
		i

		if (that ins
		

	}
	
		ublic boolean equals(bin_method_result that)

			return false;
		
		boolean this_present
			oolean that_presen

			if (!(this_present_success && that_present
				return false;
			if (!this.succe
				return false;

		
		

		if (this
			if (!(this_present_api && that_present_api))
				return false;
			if (!this.api.equals(that.api))
			

		

		
		
			verride
		u
		List<Object> list = n
			
			oolean present_success = t
				st.add(present_success
			f
			
		
		boolean present_api = true
			ist.add(present_api);
		i
			list.add(api);
			
			eturn list.hashCode();
				
			
		O
		ublic int
		

		}
		
		

		lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
		if (lastComparison != 0) {
		

		if (isSetSuccess()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this
		

			}
		}
		lastComparison = Boolean.valueOf(isSetApi()).compareTo(othe
		if (lastComparison !=

		}
		if (isSetApi()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
			
		
		
			blic _Fields field
		return _
			
		
		ublic void rea
		schemes.get(ipr
		
	

		schemes.get(oprot.getScheme()).getScheme().write(oprot, thi
		
		
		Override
			blic String toS
		S
		

		sb.append("success:");
		if (t
			sb.append("null");
					
		} else {
			org.apache.thrift.TBaseHelper.toSt
		}
		

		sb.append("api:");
		if (t
			sb.append("null");
			// 
			 else {
					
			sb.append(this.api);
			
		f
		

	}
		
			blic void validate() throws org.apache.thrift
		/
		

			api.validate();

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like you shoul
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
						e static class bin_method_resultStandardSchemeFact
						c bin_method_resultStan
						rn new bin_method_resultS
					
						
					
					te sta
				
					ic void read(org.apache.thrift.protocol.TProtocol iprot, bin_method_res
				r
				prot.readStructBegin(
			w
				schemeField = iprot.r

					break;
			// 
				}
			

						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
				
							struct.success

						} else {
							org.apache.thrift.protoco
						}
						break;
					case 1: // API
						if (schemeField.type
				
							struct.api.read(iprot
							struct.setApiIsSet(true);
						} else {
							org.apache.thrift.p
				
						break;
					default:
			

		

			iprot.readStructEnd();
		
			// check for required fields of primitive 
			
		

		public void write(org.apache.thrift.protocol.TProtocol oprot, bin_method_result struct) t

		
			oprot.writeStructBegin(STRUCT_DESC);
				
			if (struct.success != null) {
				oprot.writeFieldBegin(SUCCESS_F
				java.nio.ByteBuffer elem285
				oprot.writeBinary
				
			}
				f (struct.api != 
				
				struct.api.write(oprot);
				oprot.writeFieldEnd();
				
				prot.writeFieldStop();
			o
			
				
			
		

		public bi
			return new bin_method_resultTupleScheme();
				
			
			
			
				vate static class bin_method_resultT
				
			O
			ublic void write(org.a
				TupleProtocol oprot = (TTupleProtocol) prot;
				itSet optionals = new B
				f (struct.isSetSuccess())
				
			

		

	

				java.nio.ByteBuffer elem286 = struct
		success;
		
				oprot.writeBinary(elem286);
			

			if (struct.isSetApi()) {
			 
				struct.api.write(oprot);
			 
			}
			 

	
		@Overri
		public void read(org.apache.thrift.protocol.TProtocol prot, bin_method_result struc
			TTupleProtocol iprot = (TTupleProtocol) prot;
		

				struct.success =
				struct.setSuccessIsS
			}

			i
	 *  (incoming.get(1)) {
	 * 
	 
				struct.api = new actual_base.java.api_exception();
				struct.api.re ad(iprot); 		struct.setApiIsSe t(true); 	} }

		

		
			
				ic static class param_modifiers_args imp
			i
		

		riv
		 ivate static final org.apache.thrift.protocol.TField REQ_NUM_FIELD_DESC = n
		 
		rivate static final Map<Class<? extends IScheme>, S
			atic { 
			hemes.put(Standard
				emes.put(TupleS
			
				
			lic int opt_num;
				ic int default_
			lic int 
				The set of f
			b
		O

		REQ
		  
		 * 
		 ri
		
			tatic {
			for (_Fields field 
				 EnumSet.allOf(_Fields.class)) {
				byName.put(fi
			

		
		 **
		 * 
		 */
			ublic static _Fields fin
			

					return OPT_NUM;
				case 2: // DEFAULT_NUM

				case 3: // REQ_NUM
					return REQ_NUM;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	
		/**
		 * Find the _Fields constant that

		 */
		

		} private final sh private final 
		
		_Fields(short thriftId,
			_thriftId = thriftId;
			_fieldName = fieldName;
		}
		
		public short getThrift
		

	
	 public String getFieldName() {
	 	r
		}
		
		
		/ isset id assignments
		rivate static final int __OPT
	p

	private byte __isset_bitfield = 0;
		ublic param_modifiers_args() {
	}

	public pa
		int opt_num,
		int default_num,
		int req_num) {

		this.opt_num = opt_num;
		setOpt_numIsSet(true)

		setDefault_numIsSet(tru
		this.req_num = re

	}

	/**
		* Performs a deep co
	 

		__isset_bitfield = other.__isset_bitfield;
		this.opt_num = other.op
		this.default_num = oth
		this.req_num
	}

	public param_modifiers_args 
		return new param_modifiers_args(this);
	}

	@Ov
	 * rride
	 * 
	 
	public void clear() {
		setOpt_numIsSet(false);
		

		setDefault_numIsSet(false);
		this.default_num = 0;
	

		this.req_num = 0;
		
	}

	public int getOpt_num() {
		return this.opt_num;
		
		
	p

		setOpt_numIsSet(true);
		return this;
	}

	pub
	 * ic void unsetOpt_num() {
	 * 
	 
		__isset_bitfield = EncodingUtils.c
		
	

	public boolean isSetOpt_num() {
		return EncodingUtils.testBit(__isset_bitfield, __OPT_NUM_ISSET_ID);
	}

	public void setOpt_numIsS
		__isset_bitfield = E
	}

	public int getDefault_num() {
		return this.default_num
		
		
	p

		setDefault_numIsSet(true);
		return this;
	}

	pub
	 * ic void unsetDefault_num() {
	 * 
	 
		__isset_bitfield = EncodingUti
		
	

	public boolean isSetDefault_num() {
		return EncodingUtils.testBit(__isset_bitfield, __DEFAULT_NUM_ISSET_ID);
	}

	public void setDefault_numIsSet(boolean value) {
		__isset_bitfield
		
			
				lic int getReq_
			eturn th
				 
			
			blic p

		setReq_numIsSet(t
			eturn this;
				
			
				lic void unsetReq_num()  {
			_
			

		** Returns tr
			blic boolean isSetRe
				turn EncodingUt
			
				 
			b
			_isset

		
	p

		case OPT_NUM:
			if (value == nu
				unsetOpt_nu
			} else {

			}
			break;

		case DEFAULT_
			if (value == null) {

			
				setDefault_num((Integer)value);
		

	
	 * 
	 * 
	 
		case REQ_NUM:
			if (value == null) 
				unsetReq_num();
			

			}
			break;
			
		}
			
		
			blic Object getFieldVa
		s
		case OPT_NUM:
		

		case DEF
			return getDefault_num();
		
			ase REQ_NUM:
			return getReq_num();
			 
		}
		

	
		** Returns true i
			blic boolean 

			throw new IllegalArgumentException(
		}
		
			witch (field) {
				se OPT_NUM:
			return isSetOpt_num();
				se DEFAULT_NU
			

			return isSetReq_num();
		}
		throw new IllegalStateException();
			
				
			verride
				lic boolean e
		i

		if (that instanceof param_modifiers_
			return this.equals((param_modifiers
		return false;
			
				
			blic boolean equals(param_modifie
				 (that == nul
			

		boolean this
		

			if (!(t
				return false;
			if (this.opt_num != that.opt_num)

		}
		
		boolean this_present
			oolean that_presen

			if (!(this_present_default_num && 
				return false;
			if (this.default_num !=
				return false;

		
		boolean this_present_req_n
		boolean that_present
			f (this_present_re

				return false;
		

		}
	
		return true;
			
		

		ublic int hashCode() {

		
		boolean present_opt_num = 
			ist.add(present_opt_nu
		i
			list.add(opt_num);
			
			oolean present_default_num
				st.add(present_default
			f
			
		
		boolean present_req_num = 
			ist.add(present_req_nu
		i
			list.add(req_num);
			
			eturn list.hashCode();
				
			
		O
		ublic int compareTo(param_modifiers_args other) {
		if (!getClass().equals(oth
			return getClass().getN
		}
		
			nt lastComparison = 0;
			
				stComparison = Boolean
			f
			
		}
		

			if (lastComparison != 0) {
				return lastComparison;
		

		lastComparison = Boolean.valueOf(isSetDefault_num()).compareTo(other.isSetDefault_num());
		if (lastComparison != 0) {
		

		if (isSetDefault_num()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this
		

			}
		}
		lastComparison = Boolean.valueOf(isSetReq_num()).compareTo(oth
		if (lastComparison !=

		}
		if (isSetReq_num()) {
			lastCompariso
			if (lastCo
			parison != 0) {
				return lastComparison;
			}
		}
		return 0;
			
		
		
		ublic _Fields 
		return _Fields.
		
	

		schemes.get(iprot.getScheme()).getScheme().read(iprot, this
		
		
	p

	}
		
			verride
					
		ublic String toString() {
			tringBuilder sb = new StringBuilde
		b
	

		sb.append(this.opt_num);
		first
			f (!first) sb.append(", ");
			// 
			b.append("default_num
			b.append(this.default_num);
					
		first = false;
			f (!first) sb.append(", ");
		s
		

		sb.append(")");
		return sb.toString();
			
		
	p

		// check for sub-struct validity

		
				
			ivate void writeObject(java.io.ObjectOutputStr
			ry {
			write(new org.
				catch (org.apache.thrift.TException t
				hrow new java.io.IOException(te);
					
				
				
				ate void readObjec
					{
						t doesn't seem like you should ha
						set_bitfield = 0;
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
						e static class param_modifiers_argsSt
						c param_modifiers_argsStandardSch
					urn new 
						
					
					
				ate static class p
					
						c void read(org.apache.thrift.pro
						apache.thrift.protocol.TField
					ot.readS
						e (true) {
					h
					 (sche
				break;
					
				s
					case 1: // OPT_NUM
				
							struct.opt_num = i

						} else {
			// 
							org.apache.thrift.protoco
						}
						
				
					case 2: // DEFAU
			

							struct.setDefault_numIsSet(true);
				
						} else {

						}
						break;
					case 3: // REQ_NUM
						if (schemeField.type 
							struct.req_num = i
							struct.setReq_numIsSet(true);
						} else {
							org.apache.thrift.pr
						}
						break;
					default:
						org.apache.thrift.pro
				}
				iprot.readFieldEnd();
			}
			

		

				throw new org.apache.thrift.protocol.TProtocolException("Required field 'req_num' w
			}
			struct.validate();
		}
	

			struct.validate();

			oprot.wr
			oprot.writeFieldBegin(OPT_NUM_FIELD_DESC);
				
			int elem287 = struct.opt_num;
			oprot.writeI32(elem287);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(DEFAULT_NU
			int elem288 = struct.default
				prot.writeI32(ele
			o
			oprot.writeFieldBegin(REQ_NUM_FI
				nt elem289 = stru
			o
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
				prot.writeStructEnd();
				
			
			
				
				vate static class param_
			u
			

		
		
				
			ivate static class param_modifiers_argsTupleS
			
			Override
			ublic void write(org.apache.thrift.pro
			TTupleProtocol oprot =
				nt elem290 = struct.req_num;
				prot.writeI32(elem290);
			B
			if (struct.isSetOpt_nu
				optionals.set(0);
				
			i
			

		

	

			}
		
		
			if (struct.isSetDefault_num()) {
			

				oprot.writeI32(elem292);
			 

		}
	
		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, param_modifiers_arg
		

			struct.setReq_numI

			B
	 * tSet incoming = iprot.readBitSet(2);
	 * 
	 
			if (incoming.get(0)) {
				struct.opt_nu m = iprot.rea	

			if (incoming.get(1)) {

				struct
			}
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static final 
				
			vate sta
				ic {
			c
		s

		
		 blic long success; The s
		 * t of fields t
		 bl
		SUCCESS((short)0, "success")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 0: // SUCCESS
					return SUCCESS;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		/**
		

		public static _Fields findByN	return byName.
		}
		
		private final short _t
		

		_F
	 	_thriftId = thriftId;
	 	_
		}
		
		public short getThriftFieldId
		

	
		public String getFieldName() {
		

	}
	
		/ isset id assignments
		rivate static fina

	p

	
		ublic param_modifier
		

		this.success = success;
		setSuccessIsSet(true);
		
		
	/

	 */
		ublic param_modifiers_result(param_modifiers_result other) {
		

	}
	 * 
	 * 
	 
	
		ublic param_modifiers_result deepCopy() {
		

	
		Override
	p

		this.success = 0L;
		
		
			
				lic long getSuc
			eturn th
				 
			
			blic p

		s
		

	
		ublic void unset
		__isset_bitfi
			

		*
		ublic boolean isSetSuccess() {
		

	
	 * 
	 * 
	 
	public void setSuccessIsSet(boolean v
		__isset_bitfield = E
			
		

		switch (field) {
		case SUCCESS:
			if (value == null) {
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields field) { 
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field correspondi
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that instanceof 
			return this.equals

		
	

		if (that
			return false;
		
			oolean this_present_success = true;
		b

			if (!(this_present_suc

			if (this.success != that.success)
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_success)
			list.add(success);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other
		if (lastComparison !=

		}
		if (isSetSuccess()) {
			lastCompariso
			if (lastCompar
				return lastComparis
		

		return 0;
		
		
	p

	}
		
			blic void read(org.apache.thrift.protocol.TProtocol ip
					rot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().
			
		
	p

	}
		
			verride
			// 
			blic String toString(
			tringBuilder sb = new StringBuilder("param_modifiers_
					result(");
		boolean first = true;
			
		s
		

		sb.append(")");
		return sb.toString();
			
		
	p

		// check for sub-struct validity

		
				
			ivate void writeObject(java.io.ObjectOutputStr
			ry {
			write(new org.
				catch (org.apache.thrift.TException t
				hrow new java.io.IOException(te);
					
				
				
				ate void readObjec
					{
						t doesn't seem like you should ha
						set_bitfield = 0;
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
				v
				blic param_modifiers_
			r
			

			
			// 
			ivate static class
		

			org.apache.thrift.protocol.TField schemeField;
				
			iprot.readStructBe

				schemeField = iprot.readFieldBegin(
				if (schemeField.type == org
					break;
				}
				switch (schemeField.id) 
					case 0: // SUCCESS
				
							struct.success = ip
							struct.setSuccessIs
			

		

					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(ipro
				}
			
		

	

			struct.v
		}
				
			
			ublic void write(org.apache.thri
			struct.validate();
				
			o
			if (struct.isSetSuccess()) {
				oprot.writeFieldBegin(SUCCE
				long elem293 = struct.success;
				oprot.writeI64(elem293);
				
			

			oprot.wr
		}
				
			
			
			
				vate static class param_modifiers
				blic param_modifiers_resultTu
			r
		}

	



		public void write(org.apache.thrift.protocol
		TProtocol prot, param_modifiers_result struct) throws org.apache.thrift.TException {
		
			TTupleProtocol oprot = (TTupleProtocol) prot;
			

			if (struct.isSetSuccess()) {
			 
				optionals.set(0);
			 

			oprot.writeBitSet(optionals, 1);
			if (st
				long elem294 = struct.success;
				oprot.writeI64(elem294);
		

	
		@Override

		pu
	 * lic void read(org.apache.thrift.protocol.TProtocol prot, param_modifiers_r
	 * sult struct) throws org.apache
	 th
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming  = iprot.readBitS 	if (incoming.ge t(0)) {	

			}

		
			
				
			
		

		riv
		 
		 iv
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final Ma
				ic {
			hemes.put(StandardS
				emes.put(TupleSc
			
				
			b
		u

		ubl
		 IST_TYPE((short)1, "list_type"), _TYPE
		 * (short)2, "se
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 1: // LIST_TYPE

				case 2: // SET_TYPE
					return SET_TYPE;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields constant that */ public static _Fields findByNam
			return
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
			ublic short getThriftFieldId() {
				eturn _thriftId;
				
			
		p
			return _fieldName;
			
			
				
				isset id assignments
			b
		
	

		java.util.List<Long> list_type,
		java.util.Set<Long> set_type) {
		

		this.set
	}
		

		* Performs a deep cop

	p

			this.list_type = new ArrayLis
			for (long elem295 : other.list_type) {
		

			}
		}
		

			for (long elem297 : other.set_type) {
				long elem298 = elem297;
				this.set_type.add(elem298);
			
		}
	}

	public underlying_types_test_args deepCopy()
		return new underlying_
	}

	@Override
		ublic void clear() {
		this.list_ty
	

	
		
	

		re
	 * urn (this.list_type == null) ? 0 : this.list_type.size();
	 * 
	 
	}
		
	p

	}
		
			blic void addToList_ty
		i
		

		this.list_type.add(elem);
		
	

		return this.list_type;
		
	

		this.list_type = list_type;
		return this;
			
		
		ublic void unsetList_typ
		

	
		** Returns true if fi
	p

	}
		
		ublic void s
		

		}
		
	

		re
	 * urn (this.set_type == null) ? 0 : this.set_type.size();
	 * 
	 
	}
		
	p

	}
		
			blic void addToSet_ty
		i
		

		this.set_type.add(elem);
		
		
			blic java.util.Set<L
				turn this.set_typ
			
				 
			b
			his.se

		
			
				lic void unsetSe
			his.set_
				 
			
			* Retu

		r
	}

	public void setSet_typeIsSet(boolean value) 
		if (!value) {
			this.set_type 
			

		
			blic void setFieldVal

		c
			if (value == null) {
		

				
	 * etList_type((java.util.List<Long>)value);
	 * 
	 
			}
			break;
			
		c

				unsetSet_type(
			} else {
				setSet_type((java.util.
			}
			break;
		
		}
	}

	public Ob
		switch (field) {
		case LIST_TYPE:
			return getLis
		
			ase SET_TYPE: 
			return getSe
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se LIST_TYPE:
			

			return isSetSet_type();
		}
		throw new IllegalStateException();
			
				
			verride
				lic boolean e
		i

		if (that ins
		

	}
	
		ublic boolean equals(underlying_types_test_a

			return false;
		
		boolean this_present_l
			oolean that_present_

			if (!(this_present_list_type && that_present_list_ty
				return false;
			if (!this.list_type.
				return false;

		
		

		if (this
			if (!(this_present_set_type && that_present_set_type))
				return false;
			if (!this.set_type.equals(that.set_type))
			

		

		
		
			verride
		u
		List<Object> list = new
			
			oolean present_list_type =
				st.add(present_list_ty
			f
			
		
		boolean present_set_type =
			ist.add(present_set_ty
		i
			list.add(set_type);
			
			eturn list.hashCode();
				
			
		O
		ublic int
		

		}
		
		

		lastComparison = Boolean.valueOf(isSetList_type()).compareTo(other.isSetList_type());
		if (lastComparison != 0) {
		

		if (isSetList_type()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this
		

			}
		}
		lastComparison = Boolean.valueOf(isSetSet_type()).compareTo(other.is
		if (lastComparison !=

		}
		if (isSetSet_type()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
			
		
		
			blic _Fields field
		return _
			
		
		ublic void rea
		schemes.get(ipr
		
	

		schemes.get(oprot.getScheme()).getScheme().write(oprot, thi
		
		
	@

		StringBuilder sb = new StringBuilder("underlying_types_test_args(");
		boole
			
					
		sb.append("list_type:");
			f (this.list_type == null) {
			
		

		}
		first
			f (!first) sb.append(", ");
			// 
			b.append("set_type:");
					
		if (this.set_type == null) {
			sb.append("null");
		}
		

		first = false;
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.
						
						t doesn't seem like you should have to do this, but j
						(new org.apache.thrift.protocol.TCompactProtocol(new org.a
							h (org.apache.thrift.TException
							 new java.io.IOException(te);
						
						
						
					te stati
						c underlying_types_test_argsStandardScheme getScheme() {
					u
					
				
					
						e static class underlying_types_test_argsStandardScheme extends
						  
						c void read(org.apache.thrift.protocol.TProtocol iprot, un
							pache.thrift.protocol.TField sc
							.readStructBegin();
						e
						emeField = iprot.re
						(schemeField.type == org.apach
					reak;
						
					i
					ase 1:
					if (sch
						org.apache.thrift.protocol.TList elem299 = iprot.readListBegin();
					
							for (int elem300 =
				
								struct.list_type.

							iprot.readListEnd();
			// 
							struct.setList
			

						}
				
						break;

						if (schemeField.type == org.apach
							org.apache.thrift.protocol.
							struct.set_type = new HashSet<Long>(2*ele
							for (int elem303 = 0; elem303 < elem302.size; ++elem303) {
						
								long elem304 = iprot.readI64();
								struct.set_type.add(
							}
					
							struct.setSet_type
						} else {
				
						}
						break;
					default:
						
						org.apache.thrift.protocol.TProtocol
					
					prot.readFieldEnd();
				
				prot.readStructEnd()
				
			/
			struct.validate();
			
		

		

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.list_type != null) {
				oprot.writeFieldBegin(LIST_TYPE_FIELD_DESC);
			
		

					oprot.writeI64(elem306);

				oprot.w
				oprot.writeFieldEnd();
				
			}
			if (struct.set_type != null) {
				oprot.writeFieldBegin(SET_TYP
				oprot.writeSetBeg
				
					long elem308 = elem307;
					oprot.writeI64(e
				
				oprot.writeSetEnd();
				oprot.writeFieldEnd();
				
				prot.writeFieldStop();
					rot.writeStructEnd();
					
				
			
			
				vate static class underlying_types_test
				blic underlying_types_test_argsTupleSc
					turn new underlying_typ
					
				
			
		r

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, underlying_types_test_args struct
				 throws org.apache.thrift.TException 
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetList_t
				optionals.set(0);
						
				
				f (struct.isSetSet_type()) {
					ptionals.set(1);
					
				p
				f (struct.isSetList_type()) {
				
				for (long elem309 : s
					long elem310 = elem309;
						
					oprot.writeI64(elem310);  
				}
					
					 (struct.isSetSet_type()) {
				o
				for (long elem311 : struct.set
				
			

		



		public void read(org.apache.thrift.protocol.TP
		otocol prot, underlying_types_test_args struct) throws org.apache.thrift.TException {
		
			TTupleProtocol iprot = (TTupleProtocol) prot;
			

			if (incoming.get(0)) {
			 

				struct.list_type = new ArrayList<Long>(elem313.size);
				for (
					long elem315 = iprot.readI64();
					struct.list_type.add(elem315);
		

			}

			i
	 *  (incoming.get(1)) {
	 * 
	 
				org.apache.thrift.protocol.TSet elem316 = new org.apache.thr
				struct.set_ty pe = new Hash	

					struct.set_type.add(elem318);

				struct
			}
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static final 
				
			vate sta
				ic {
			c
		s

		
		 blic java.util.List<Long> success; The s
		 * t of fields t
		 bl
		SUCCESS((short)0, "success")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 0: // SUCCESS
					return SUCCESS;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields constant that m */
		public 
			return byName.get(name
		

		pr
	 private final String _fieldName;
	 
		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
			
				
				blic short getThriftFieldI
			r
		}
	

			return _fieldName;
		}
	}

	// isset 
	public underlying_typ
		

	p

		this();
		this.success = success;
	}

	/**
		* Performs a deep copy on <i>other</i>.
	 

		if (other.isSetSuccess()) {
			this.success = new ArrayLi
			for (long elem319 : other.success) {
			
				this.success.add(elem
		

	}
		
	p

	}
		
		Override
	p

	
		
	

		re
	 * urn (this.success == null) ? 0 : this.success.size();
	 * 
	 
	}
		
	p

	}
		
			blic void addToSucce
		i
		

		this.success.add(elem);
		
		
			blic java.util.List<
				turn this.succe
			
				 
			b
			his.su

		
	

		this.success = null;
		
		
			* Returns true if fi

		r
		
	

		if
	 * (!value) {
	 * 
	 
			this.success = null;
		}
			
		

		switch (field) {
		case SUCCESS:
			if (value == null) {
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields field) { 
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field corresponding to fieldID is set (h
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that instanceof 
			return this.equals

		
	

		if (that
			return false;
		
			oolean this_present_success = true && this.isSetSuccess();
		b

			if (!(this_present_suc

			if (!this.success.equals(that.success))
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_success)
			list.add(success);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSet
		if (lastComparison !=

		}
		if (isSetSuccess()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
		
	p

	}
		
			blic void write(org.apache.thrift.protocol.TProtocol o
					prot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().
			
		
	@

		StringBuilder sb = new StringBuilder("underlying_types_test_result(");
		boole
			
			// 
			b.append("success:");
					
		if (this.success == null) {
			sb.append("null");
		}
		

		first = false;
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields
			

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.
						
						t doesn't seem like you should have to do this, but
						(new org.apache.thrift.protocol.TCompactProtocol(new org.a
							h (org.apache.thrift.TException
							 new java.io.IOException(te)
						
						
						
					te stati
						c underlying_types_test_resultStandardScheme getScheme() {
					u
					
				
					
				v
				
			u
			org.apache.thrift.prot

			while (true) {
			// 
				schemeField = ipr
			

				}
				
				switch (schemeFie

						if (schemeField.type == org.apach
							org.apache.thrift.protoco
							struct.success = new ArrayList<Long>(el
							for (int elem322 = 0; elem322 < elem321.size; ++elem322) {
						
								long elem323 = iprot.readI64();
								struct.success.add(e
							}
					
							struct.setSuccessI
						} else {
				
						}
						break;
			

		

			}
			iprot.readStructEnd();
			
			
		

	

			struct.v
		
				
			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.success != null) {
				oprot.writeFieldBegin(SUCCE
				oprot.writeListBe
				
					long elem325 = elem324;
					oprot.writeI64(elem325);
				}
				oprot.writeListEnd();
					prot.writeFieldEnd();
					
				p
			o
		}

		
		
				
			ivate static class underlying_types_test_resu
			ublic underlying_types_test_resultTupl
			return new underlying_
				
						
				
				
					ate static class underlying_typ
					
				v
				blic void write(org.apache.th
			T
			

		

	

				oprot.writeI32(struct.success.size());
		
				for (long elem326 : struct.success) {
			

				}
			}
		}
		
		

			T
	 * upleProtocol iprot = (TTupleProtocol) prot;
	 * 
	 
			BitSet incoming = iprot.readBitSet(1);
			

				struct.success = new ArrayList<Long>(elem328.size);

					long 
					struct.success.add(elem330);
				}
				
			

		
		 
		 
		
			 
			ic stati
				ate static f
			
		

		tat
		 chemes.put(StandardScheme.class, new getThing_argsStandardSchemeFactory emes.
		 * ut(TupleSchem
		 
		
			* The set of fields this struct contains,
			blic enum _Fields i
				plements org.apache.thrift.TFieldIdEnum {
			
		

		
		 tatic {
		 fo
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant tha

		public static _Fields findByThriftId(int fi
			switch(fieldId) {
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 *
	  */
	 pu
			return byName.get(name);
		

		private final short _thriftId;
		private final String _fieldName
	

			_thrift
			_fieldName = fieldN
		

		public short getThriftFieldId() {
			return _thriftI
		}
	

			return _fieldName;
		}
		
		
	/

	}
	 * 
	 * 
	 
	
		**
			 Performs a deep copy on <i>other</i>
		*

		
		
		ublic getThing_args deepCopy() {
		

	
	@Override
		ublic void clear(
			
		
			blic void setFieldValue(_Fields fi eld, O
		switch (field
		

	
		ublic Object getF
			witch (field)

		throw new Il
	}

	/** Retur
	public boolean isSet(_F
		if (field == null) {

		}
	

		}
		throw new IllegalStateException();
		
			
		O

		if (that == null)

		if (that 
		

	}
		
	p

			return false;
		
		

	
		Override
	p

	
		return list.hashCode();
		
		

		ublic int compa
		if (!getClass().equal
		

	
		int lastComparison = 0;
		
		

	
		ublic
			eturn _Fields.findByThriftId(fieldId);
					
		
			
		u
		

	
		ublic
			chemes.get(oprot.getScheme()).getScheme().write(oprot, this);
			// 
			
					
		
			verride
		u
		

	
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IOExcep
				y
				/ it doesn't seem lik
			r
			 catch (org.apache.thr

			
			// 
			
		

		public getThing_argsStandardScheme getScheme() {
				
			return new getThin

			
			
			ivate static class getT
		

		

			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.th
			
		

					default:

				}
				iprot.readFieldEnd();
				
			}
			

			// check
			struct.validate();
				
			
		

		

	

			oprot.writeStructEnd();
		
		}
			

	}
			 

	private static class getThing_argsTupleSchemeFactory implements SchemeFactory {
		public 
			return new getThing_argsTupleScheme();
		}
	}

	private static class 

	
	 * 
	 * 
	 
		@Override
		public void wri te(org.apache	

		

		public v
			TTupleProtocol iprot = (TTupleProtocol) prot;
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static final 
				
			vate sta
				ic {
			c
		s

		
		 blic Thing success; The s
		 * t of fields t
		 bl
		SUCCESS((short)0, "success")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 0: // SUCCESS
					return SUCCESS;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields co */
		public 
			return byName.get(name
		

		pr
	 private final String _fieldName;
	 
		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}
	

			return _thriftId;
		}
	

			return 
		}
		

	/

	}
		
	p

		this();
		this.success = success;
		
	

	 * Performs a deep copy on <
		*/
	p

			t
	 * is.success = new Thing(other.success);
	 * 
	 
		}
		
	

		return new getThing_result(this);
		
			
		O
	p

	
		
		
			blic Thing getSucces
				turn this.succe
			
				 
			b
			his.su

		
	

		this.success = null;
		
		
			* Returns true if fi

		r
		
	

		if
	 * (!value) {
	 * 
	 
			this.success = null;
		}
			
		

		switch (field) {
		case SUCCESS:
			if (value == null) {
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields fi eld) {
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field corresponding to fieldID is set (h
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that instanceof 
			return this.equals

		
	

		if (that
			return false;
		
			oolean this_present_success = true && this.isSetSuccess();
		b

			if (!(this_present_suc

			if (!this.success.equals(that.success))
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_success)
			list.add(success);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetSuccess()).compareT
		if (lastComparison !=

		}
		if (isSetSuccess()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
		
		ublic void read(org.ap
			chemes.get(iprot.ge
		
	

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		
			
					
		Override
			blic String toString() {
		S
		

		sb.append("success:");
		if (t
			sb.append("null");
			// 
			 else {
					
			sb.append(this.success);
			
		f
		

	}
		
			blic void validate() throws org.apache.thri
		/
		

			success.validate();

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like you sho
						(new org.apache.thrift.protoc
					tch (org
						w new java.io.IOException(te);
					
					
				
					te static class getThing_resultStandardSchemeFactory implements SchemeF
				b
				eturn new getThing_re
			
			

			ivate static class getThing_resultStandardScheme extends StandardScheme<getTh
			// ng_result> {
			
		p

			iprot.readStructBegin();
				
			while (true) {

				if (schemeField.type == org.apache.
					break;
				}
				switch (schemeField.id) {
					case 0: // SUCCESS
				
							struct.success = ne
							struct.success.read
			

		

						break;
					default:
						org.apache.thrift.protocol.TProtocolU
			
		

			iprot.readStructEnd();

			// check
			struct.validate();
				
			
			
			ublic void write(org.apache.
				truct.validate();
			
			oprot.writeStructBegin(STRUCT_DE
			if (struct.success != null) 
				oprot.writeFieldBegin(SUCCES
				
			

			oprot.wr
			oprot.writeStructEnd();
				
			
			
			
				
				vate static class getThing_
				blic getThing_resultTupleSche
			r
		}

	



		public void write(org.apache.thrift.protocol.TProtocol prot, getThing_result struct) throws org.apache.th
		ift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			

				optionals.set(0);
			}
			oprot.writeBitSet(optionals, 1);
			if (struct.isSetSuccess()) {
		

		}
	 * 
	 * 
	 
	
		@

			TTupleProtocol iprot = (TTupleProtocol) prot;

			if (inc
				struct.success = new Thing();
				struct.success.read(iprot);
				
			

		
		 
		 
		
			 
			ic stati
				ate static f
			
		

		tat
		 chemes.put(StandardScheme.class, new getMyInt_argsStandardSchemeFactory emes.
		 * ut(TupleSchem
		 
		
			* The set of fields this struct contains,
			blic enum _Fields i
				plements org.apache.thrift.TFieldIdEnum {
			
		

		
		 tatic {
		 fo
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant tha

		public static _Fields findByThriftId(int fi
			switch(fieldId) {
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 *
	  */
	 pu
			return byName.get(name);
		

		private final short _thriftId;
		private final String _fieldName
	

			_thrift
			_fieldName = fieldN
		

		public short getThriftFieldId() {
			return _thriftI
		}
	

			return _fieldName;
		}
		
		
	/

	}
	 * 
	 * 
	 
	
		**
			 Performs a deep copy on <i>other</i>
		*

		
		
		ublic getMyInt_args deepCopy() {
		

	
	@Override
		ublic void clear(
			
		
			blic void setFieldValue(_Fields fi eld, O
		switch (field
		

	
		ublic Object getF
			witch (field)

		throw new Il
	}

	/** Retur
	public boolean isSet(_F
		if (field == null) {

		}
	

		}
		throw new IllegalStateException();
		
			
		O

		if (that == null)

		if (that 
		

	}
		
	p

			return false;
		
		

	
		Override
	p

	
		return list.hashCode();
		
		

		ublic int compa
		if (!getClass().equal
		

	
		int lastComparison = 0;
		
		

	
		ublic
			eturn _Fields.findByThriftId(fieldId);
					
		
			
		u
		

	
		ublic
			chemes.get(oprot.getScheme()).getScheme().write(oprot, this);
			// 
			
					
		
			verride
		u
		

	
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IOExcep
				y
				/ it doesn't seem lik
			r
			 catch (org.apache.thr

			
			// 
			
		

		public getMyInt_argsStandardScheme getScheme() {
				
			return new getMyIn

			
			
			ivate static class getM
		

		

			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.th
			
		

					default:

				}
				iprot.readFieldEnd();
				
			}
			

			// check
			struct.validate();
				
			
		

		

	

			oprot.writeStructEnd();
		
		}
			

	}
			 

	private static class getMyInt_argsTupleSchemeFactory implements SchemeFactory {
		public 
			return new getMyInt_argsTupleScheme();
		}
	}

	private static clas

	
	 * 
	 * 
	 
		@Override
		public void wri te(org.apache	

		

		public v
			TTupleProtocol iprot = (TTupleProtocol) prot;
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static final 
				
			vate sta
				ic {
			c
		s

		
		 blic int success; The s
		 * t of fields t
		 bl
		SUCCESS((short)0, "success")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 0: // SUCCESS
					return SUCCESS;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		/**
		

		public static _Fields 	return byName
		}
		
		private final short _t
		

		_F
	 	_thriftId = thriftId;
	 	_
		}
		
		public short getThriftFieldId
		

	
		public String getFieldName() {
		

	}
	
		/ isset id assignments
		rivate static fin

	p

	
		ublic getMyInt_resul
		

		this.success = success;
		setSuccessIsSet(true);
		
		
	/

	 */
		ublic getMyInt_result(getMyInt_result other) {
		

	}
	 * 
	 * 
	 
	
		ublic getMyInt_result deepCopy() {
		

	
		Override
	p

		this.success = 0;
		
		
			
				lic int getSucc
			eturn th
				 
			
			blic g

		s
		

	
		ublic void unset
		__isset_bitfi
			

		*
		ublic boolean isSetSuccess() {
		

	
	 * 
	 * 
	 
	public void setSuccessIsSet(boolean v
		__isset_bitfield = E
			
		

		switch (field) {
		case SUCCESS:
			if (value == null) {
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields fi eld) {
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field correspondi
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that instanceof 
			return this.equals

		
	

		if (that
			return false;
		
			oolean this_present_success = true;
		b

			if (!(this_present_suc

			if (this.success != that.success)
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_success)
			list.add(success);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetSuccess()).compareT
		if (lastComparison !=

		}
		if (isSetSuccess()) {
			lastCompariso
			if (lastCompar
				return lastComparis
		

		return 0;
		
		
	p

	}
		
			blic void read(org.apache.thrift.protocol.TProtocol ip
					rot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().
			
		
	p

	}
		
			verride
			// 
			blic String toString(
			tringBuilder sb = new StringBuilder("getMyInt_result(
					");
		boolean first = true;
			
		s
		

		sb.append(")");
		return sb.toString();
			
		
	p

		// check for sub-struct validity

		
				
			ivate void writeObject(java.io.ObjectOutputStr
			ry {
			write(new org.
				catch (org.apache.thrift.TException t
				hrow new java.io.IOException(te);
					
				
				
				ate void readObjec
					{
						t doesn't seem like you should ha
						set_bitfield = 0;
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
				v
				blic getMyInt_resultS
			r
			

			
			// 
			ivate static class
		

			org.apache.thrift.protocol.TField schemeField;
				
			iprot.readStructBe

				schemeField = iprot.readFieldBegin(
				if (schemeField.type == org
					break;
				}
				switch (schemeField.id) 
					case 0: // SUCCESS
				
							struct.success = ip
							struct.setSuccessIs
			

		

					default:
						org.apache.thrift.protocol.TProtocolUtil.sk
				}
			
		

	

			struct.v
		}
				
			
			ublic void write(org.apache.thri
			struct.validate();
				
			o
			if (struct.isSetSuccess()) {
				oprot.writeFieldBegin(SUCCE
				int elem331 = struct.success;
				oprot.writeI32(elem331);
				
			

			oprot.wr
		}
				
			
			
			
				vate static class getMyInt_result
				blic getMyInt_resultTupleSche
			r
		}

	



		public void write(org.apache.thrift.prot
		col.TProtocol prot, getMyInt_result struct) throws org.apache.thrift.TException {
		
			TTupleProtocol oprot = (TTupleProtocol) prot;
			

			if (struct.isSetSuccess()) {
			 

			}
			oprot.
			if (struct.isSetSuccess()) {
				int elem332 = struct.success;
		

		}

	
	 * 
	 * 
	 
		@Override
		public vo id read	

			if (incoming.get(0)) {

				struct
			}
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static 
				
			vate sta
				ic {
			c
		s

		
		 blic A a; The s
		 * t of fields t
		 bl
		A((short)1, "a")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 1: // A
					return A;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields constant  */
		public 
			return byN
		

		pr
	 private final String _fieldName;
	 
		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId
			_fieldName = fieldName;
		}
	

			return _thriftId;
		}
	

			return 
		}
		

	/

	}
		
	p

		this();
		this.a = a;
		
	

	 * Performs a deep cop
		*/
	p

			t
	 * is.a = new A(other.a);
	 * 
	 
		}
		
	

		return new use_subdir_struct_args(thi
		
			
		O
	p

	
		
		
			blic A getA() {
				turn this
			
				 
			b
			his.a 

		
	

		this.a = null;
		
		
			* Returns true

		r
		
	

		if
	 * (!value) {
	 * 
	 
			this.a = null;
		}
			
		

		switch (field) {
		case A:
			if (value == nul
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields field) { 
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field corresponding to field
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that insta
			return this.

		
	

		if (that
			return false;
		
			oolean this_present_a = true && this.isSetA();
		b

			if (!(this_present_a &

			if (!this.a.equals(that.a))
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_a)
			list.add(a);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSet
		if (lastComparison !=

		}
		if (isSetA()) {
			lastComparison = o
			if (las
				return lastCompar
			
		}
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
		
		ublic void read(
			chemes.get(ip
		
	

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		
			
					
		Override
			blic String toString() {
		S
		

		sb.append("a:");
		if (t
			sb.append("null");
			// 
			 else {
					
			sb.append(this.a);
			
		f
		

	}
		
			blic void validate() throws org.apache.thrift.TExc
		/
		

			a.validate();

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like y
						(new org.apache.thrift.
					tch (org
						w new java.io.IOException(te);
					
					
				
					te static class use_subdir_struct_argsStandardSchemeFactory implements 
				b
				eturn new use_subdir_
			
			

			ivate static class use_subdir_struct_argsStandardScheme extends StandardSchem
			// <use_subdir_str
			
		p

			iprot.readStructBegin();
				
			while (true) {

				if (schemeField.type == org.apache.
					break;
				}
				switch (schemeField.id
					case 1: // A
				
							struct.a = new A();
							struct.a.read(iprot
			

		

						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.ski
			
		

			iprot.readStructEnd();

			// check
			struct.validate();
				
			
			
			ublic void write(org.a
				truct.validate();
			
			oprot.writeStructBegin(STRUCT_DE
			if (struct.a != null) 
				oprot.writeFieldBegin(
				
			

			oprot.wr
			oprot.writeStructEnd();
				
			
			
			
				
				vate static class use
				blic use_subdir_struct_
			r
		}

	



		public void write(org.apache.thrift.protoc
		l.TProtocol prot, use_subdir_struct_args struct) throws org.apache.thrift.TException {
		
			TTupleProtocol oprot = (TTupleProtocol) prot;
			

			if (struct.isSetA()) {
			 

			}
			oprot.
			if (struct.isSetA()) {
				struct.a.write(oprot);
		

	

		@O
	 * erride
	 * 
	 
		public void read(org.apache.thrift.protocol.TProtocol prot, us
			TTupleProtocol  iprot = (TTu	

				struct.a = new A();

				struct
			}
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static final 
				
			vate sta
				ic {
			c
		s

		
		 blic A success; The s
		 * t of fields t
		 bl
		SUCCESS((short)0, "success")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 0: // SUCCESS
					return SUCCESS;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields constant th */
		public 
			return byName.get(name
		

		pr
	 private final String _fieldName;
	 
		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}
	

			return _thriftId;
		}
	

			return 
		}
		

	/

	}
		
	p

		this();
		this.success = success;
		
	

	 * Performs a deep copy on <
		*/
	p

			t
	 * is.success = new A(other.success);
	 * 
	 
		}
		
	

		return new use_subdir_struct_result(this);
		
			
		O
	p

	
		
		
			blic A getSuccess() 
				turn this.succe
			
				 
			b
			his.su

		
	

		this.success = null;
		
		
			* Returns true if fi

		r
		
	

		if
	 * (!value) {
	 * 
	 
			this.success = null;
		}
			
		

		switch (field) {
		case SUCCESS:
			if (value == null) {
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields field) { 
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field corresponding to fieldID is set (h
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that instanceof 
			return this.equals

		
	

		if (that
			return false;
		
			oolean this_present_success = true && this.isSetSuccess();
		b

			if (!(this_present_suc

			if (!this.success.equals(that.success))
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_success)
			list.add(success);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.i
		if (lastComparison !=

		}
		if (isSetSuccess()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
		
		ublic void read(org.ap
			chemes.get(iprot.ge
		
	

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		
			
					
		Override
			blic String toString() {
		S
		

		sb.append("success:");
		if (t
			sb.append("null");
			// 
			 else {
					
			sb.append(this.success);
			
		f
		

	}
		
			blic void validate() throws org.apache.thrift.TExcep
		/
		

			success.validate();

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like you sho
						(new org.apache.thrift.protoc
					tch (org
						w new java.io.IOException(te);
					
					
				
					te static class use_subdir_struct_resultStandardSchemeFactory implement
				b
				eturn new use_subdir_
			
			

			ivate static class use_subdir_struct_resultStandardScheme extends StandardSch
			// me<use_subdir_s
			
		p

			iprot.readStructBegin();
				
			while (true) {

				if (schemeField.type == org.apache.
					break;
				}
				switch (schemeField.id) {
					case 0: // SUCCESS
				
							struct.success = ne
							struct.success.read
			

		

						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(
			
		

			iprot.readStructEnd();

			// check
			struct.validate();
				
			
			
			ublic void write(org.apache.
				truct.validate();
			
			oprot.writeStructBegin(STRUCT_DE
			if (struct.success != null) 
				oprot.writeFieldBegin(SUCCES
				
			

			oprot.wr
			oprot.writeStructEnd();
				
			
			
			
				
				vate static class use_subdi
				blic use_subdir_struct_result
			r
		}

	



		public void write(org.apache.thrift.protocol.TProtocol prot, use_subdir_struct_result struct) throws org.apache.thrif
		.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			

			if (struct.isSetSuccess()) {
			 

			}
			oprot.
			if (struct.isSetSuccess()) {
				struct.success.write(oprot);
		

	

		@O
	 * erride
	 * 
	 
		public void read(org.apache.thrift.protocol.TProtocol prot, us
			TTupleProtocol ipr ot = (TTupleProt	

				struct.success = new A();

				struct
			}
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static final org.
				
			vate sta
				ic {
			c
		s

		
		 blic String newMessage; The s
		 * t of fields t
		 bl
		NEW_MESSAGE((short)1, "newMessage")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 1: // NEW_MESSAGE
					return NEW_MESSAGE;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields cons */
		public 
			return byName.get(name);
		

		pr
	 private final String _fieldName;
	 
		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}
	

			return _thriftId;
		}
	

			return 
		}
		

	/

	}
		
	p

		this();
		this.newMessage = newMessage;
		
	

	 * Performs a deep copy on <i>o
		*/
	p

			t
	 * is.newMessage = other.newMessage;
	 * 
	 
		}
		
	

		return new sayHelloWith_args(this);
		
			
		O
	p

	
		
		
			blic String getNewMe
				turn this.newMessa
			
				 
			b
			his.ne

		
	

		this.newMessage = null;
		
		
			* Returns true if field

		r
		
	

		if
	 * (!value) {
	 * 
	 
			this.newMessage = null;
		}
			
		

		switch (field) {
		case NEW_MESSAGE:
			if (value == null) {
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields fiel d) {
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field corresponding to fieldID is set (has bee
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that instanceof say
			return this.equals((s

		
	

		if (that
			return false;
		
			oolean this_present_newMessage = true && this.isSetNewMessage();
		b

			if (!(this_present_new

			if (!this.newMessage.equals(that.newMessage))
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_newMessage)
			list.add(newMessage);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetNewMessage()).compare
		if (lastComparison !=

		}
		if (isSetNewMessage()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
		
	p

	}
		
			blic void write(org.apache.thrift.protocol.TProtocol o
					prot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().
			
		
	@

		StringBuilder sb = new StringBuilder("sayHelloWith_args(");
		boole
			
			// 
			b.append("newMessage:");
					
		if (this.newMessage == null) {
			sb.append("null");
		}
		

		first = false;
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like you should h
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
				v
				blic sayHelloWith_arg
			r
			

			
			// 
			ivate static class
		

			org.apache.thrift.protocol.TField schemeField;
				
			iprot.readStructBe

				schemeField = iprot.readFieldBegin(
				if (schemeField.type == org.apa
					break;
				}
				switch (schemeField.id) {
					case 1: // NEW_MESSAG
				
							struct.newMessage =
							struct.setNewMessag
			

		

					default:
						org.apache.thrift.protocol.TProtocolUtil.skip
				}
			
		

	

			struct.v
		}
				
			
			ublic void write(org.apache.thri
			struct.validate();
				
			o
			if (struct.newMessage != null) {
				oprot.writeFieldBegin(NEW_MESS
				String elem333 = struct.newMessage;
				oprot.writeString(elem333);
				
			

			oprot.wr
		}
				
			
			
			
				vate static class sayHelloWith_argsTupl
				blic sayHelloWith_argsTupleSchem
			r
		}

	



		public void write(org.apache.thrift.p
		otocol.TProtocol prot, sayHelloWith_args struct) throws org.apache.thrift.TException {
		
			TTupleProtocol oprot = (TTupleProtocol) prot;
			

			if (struct.isSetNewMessage()) {
			 

			}
			oprot.
			if (struct.isSetNewMessage()) {
				String elem334 = struct.newMessage;
		

		}

	
	 * 
	 * 
	 
		@Override
		public void rea d(org.apache.	

			if (incoming.get(0)) {

				struct
			}
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static final 
				
			vate sta
				ic {
			c
		s

		
		 blic String success; The s
		 * t of fields t
		 bl
		SUCCESS((short)0, "success")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 0: // SUCCESS
					return SUCCESS;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields consta */
		public 
			return byName.get(name
		

		pr
	 private final String _fieldName;
	 
		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}
	

			return _thriftId;
		}
	

			return 
		}
		

	/

	}
		
	p

		this();
		this.success = success;
		
	

	 * Performs a deep copy on <
		*/
	p

			t
	 * is.success = other.success;
	 * 
	 
		}
		
	

		return new sayHelloWith_result(this);
		
			
		O
	p

	
		
		
			blic String getSucce
				turn this.succe
			
				 
			b
			his.su

		
	

		this.success = null;
		
		
			* Returns true if fi

		r
		
	

		if
	 * (!value) {
	 * 
	 
			this.success = null;
		}
			
		

		switch (field) {
		case SUCCESS:
			if (value == null) {
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields field)  {
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field corresponding to fieldID is set (h
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that instanceof 
			return this.equals

		
	

		if (that
			return false;
		
			oolean this_present_success = true && this.isSetSuccess();
		b

			if (!(this_present_suc

			if (!this.success.equals(that.success))
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_success)
			list.add(success);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(ot
		if (lastComparison !=

		}
		if (isSetSuccess()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
		
	p

	}
		
			blic void write(org.apache.thrift.protocol.TProtocol o
					prot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().
			
		
	@

		StringBuilder sb = new StringBuilder("sayHelloWith_result(");
		boole
			
			// 
			b.append("success:");
					
		if (this.success == null) {
			sb.append("null");
		}
		

		first = false;
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like you shoul
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
				v
				blic sayHelloWith_res
			r
			

			
			// 
			ivate static class
		

			org.apache.thrift.protocol.TField schemeField;
				
			iprot.readStructBe

				schemeField = iprot.readFieldBegin(
				if (schemeField.type == org.
					break;
				}
				switch (schemeField.id) {
					case 0: // SUCCESS
				
							struct.success = ip
							struct.setSuccessIs
			

		

					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(i
				}
			
		

	

			struct.v
		}
				
			
			ublic void write(org.apache.thri
			struct.validate();
				
			o
			if (struct.success != null) {
				oprot.writeFieldBegin(SUCCE
				String elem335 = struct.success;
				oprot.writeString(elem335);
				
			

			oprot.wr
		}
				
			
			
			
				vate static class sayHelloWith_resul
				blic sayHelloWith_resultTuple
			r
		}

	



		public void write(org.apache.thrift.protocol.TProtocol prot, sayHelloWith_result struct) throws org.apache.thrift.TEx
		eption {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			

			if (struct.isSetSuccess()) {
			 

			}
			oprot.
			if (struct.isSetSuccess()) {
				String elem336 = struct.success;
		

		}

	
	 * 
	 * 
	 
		@Override
		public void read(org .apache.thrift.pr	

			if (incoming.get(0)) {

				struct
			}
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static final org.a
				
			vate sta
				ic {
			c
		s

		
		 blic String messageArgs; The s
		 * t of fields t
		 bl
		MESSAGE_ARGS((short)1, "messageArgs")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 1: // MESSAGE_ARGS
					return MESSAGE_ARGS
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields cons */
		public 
			return byName.get(name);
		

		pr
	 private final String _fieldName;
	 
		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}
	

			return _thriftId;
		}
	

			return 
		}
		

	/

	}
		
	p

		this();
		this.messageArgs = messageArgs;
		
	

	 * Performs a deep copy on <i>ot
		*/
	p

			t
	 * is.messageArgs = other.messageArgs;
	 * 
	 
		}
		
	

		return new whatDoYouSay_args(this);
		
			
		O
	p

	
		
		
			blic String getMessa
				turn this.messageAr
			
				 
			b
			his.me

		
	

		this.messageArgs = null;
		
		
			* Returns true if field 

		r
		
	

		if
	 * (!value) {
	 * 
	 
			this.messageArgs = null;
		}
			
		

		switch (field) {
		case MESSAGE_ARGS:
			if (value == null) {
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields fiel d) {
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field corresponding to fieldID is set (has been 
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that instanceof what
			return this.equals((wh

		
	

		if (that
			return false;
		
			oolean this_present_messageArgs = true && this.isSetMessageArgs();
		b

			if (!(this_present_mes

			if (!this.messageArgs.equals(that.messageArgs))
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_messageArgs)
			list.add(messageArgs);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetMessageArgs()).compar
		if (lastComparison !=

		}
		if (isSetMessageArgs()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
		
	p

	}
		
			blic void write(org.apache.thrift.protocol.TProtocol o
					prot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().
			
		
	@

		StringBuilder sb = new StringBuilder("whatDoYouSay_args(");
		boole
			
			// 
			b.append("messageArgs:");
					
		if (this.messageArgs == null) {
			sb.append("null");
		}
		

		first = false;
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like you should ha
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
				v
				blic whatDoYouSay_arg
			r
			

			
			// 
			ivate static class
		

			org.apache.thrift.protocol.TField schemeField;
				
			iprot.readStructBe

				schemeField = iprot.readFieldBegin(
				if (schemeField.type == org.apac
					break;
				}
				switch (schemeField.id) {
					case 1: // MESSAGE_AR
				
							struct.messageArgs 
							struct.setMessageAr
			

		

					default:
						org.apache.thrift.protocol.TProtocolUtil.skip
				}
			
		

	

			struct.v
		}
				
			
			ublic void write(org.apache.thri
			struct.validate();
				
			o
			if (struct.messageArgs != null) 
				oprot.writeFieldBegin(MESSAGE_A
				String elem337 = struct.messageArgs;
				oprot.writeString(elem337);
				
			

			oprot.wr
		}
				
			
			
			
				vate static class whatDoYouSay_argsTuple
				blic whatDoYouSay_argsTupleScheme
			r
		}

	



		public void write(org.apache.thrift.p
		otocol.TProtocol prot, whatDoYouSay_args struct) throws org.apache.thrift.TException {
		
			TTupleProtocol oprot = (TTupleProtocol) prot;
			

			if (struct.isSetMessageArgs()) {
			 

			}
			oprot.
			if (struct.isSetMessageArgs()) {
				String elem338 = struct.messageArgs;
		

		}

	
	 * 
	 * 
	 
		@Override
		public void rea d(org.apache.	

			if (incoming.get(0)) {

				struct
			}
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static final 
				
			vate sta
				ic {
			c
		s

		
		 blic String success; The s
		 * t of fields t
		 bl
		SUCCESS((short)0, "success")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 0: // SUCCESS
					return SUCCESS;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields consta */
		public 
			return byName.get(name
		

		pr
	 private final String _fieldName;
	 
		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}
	

			return _thriftId;
		}
	

			return 
		}
		

	/

	}
		
	p

		this();
		this.success = success;
		
	

	 * Performs a deep copy on <
		*/
	p

			t
	 * is.success = other.success;
	 * 
	 
		}
		
	

		return new whatDoYouSay_result(this);
		
			
		O
	p

	
		
		
			blic String getSucce
				turn this.succe
			
				 
			b
			his.su

		
	

		this.success = null;
		
		
			* Returns true if fi

		r
		
	

		if
	 * (!value) {
	 * 
	 
			this.success = null;
		}
			
		

		switch (field) {
		case SUCCESS:
			if (value == null) {
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields field)  {
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field corresponding to fieldID is set (h
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that instanceof 
			return this.equals

		
	

		if (that
			return false;
		
			oolean this_present_success = true && this.isSetSuccess();
		b

			if (!(this_present_suc

			if (!this.success.equals(that.success))
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_success)
			list.add(success);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(ot
		if (lastComparison !=

		}
		if (isSetSuccess()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
		
	p

	}
		
			blic void write(org.apache.thrift.protocol.TProtocol o
					prot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().
			
		
	@

		StringBuilder sb = new StringBuilder("whatDoYouSay_result(");
		boole
			
			// 
			b.append("success:");
					
		if (this.success == null) {
			sb.append("null");
		}
		

		first = false;
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like you shoul
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
				v
				blic whatDoYouSay_res
			r
			

			
			// 
			ivate static class
		

			org.apache.thrift.protocol.TField schemeField;
				
			iprot.readStructBe

				schemeField = iprot.readFieldBegin(
				if (schemeField.type == org.
					break;
				}
				switch (schemeField.id) {
					case 0: // SUCCESS
				
							struct.success = ip
							struct.setSuccessIs
			

		

					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(i
				}
			
		

	

			struct.v
		}
				
			
			ublic void write(org.apache.thri
			struct.validate();
				
			o
			if (struct.success != null) {
				oprot.writeFieldBegin(SUCCE
				String elem339 = struct.success;
				oprot.writeString(elem339);
				
			

			oprot.wr
		}
				
			
			
			
				vate static class whatDoYouSay_resul
				blic whatDoYouSay_resultTuple
			r
		}

	



		public void write(org.apache.thrift.protocol.TProtocol prot, whatDoYouSay_result struct) throws org.apach
		.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			

			if (struct.isSetSuccess()) {
			 

			}
			oprot.
			if (struct.isSetSuccess()) {
				String elem340 = struct.success;
		

		}

	
	 * 
	 * 
	 
		@Override
		public void read(org.a pache.thrift.protoc	

			if (incoming.get(0)) {

				struct
			}
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static final org.apa
				
			vate sta
				ic {
			c
		s

		
		 blic String messageResult; The s
		 * t of fields t
		 bl
		MESSAGE_RESULT((short)1, "messageResult")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 1: // MESSAGE_RESULT
					return MESSAGE_RESU
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields  */
		public 
			return byName.get(name);
		

		pr
	 private final String _fieldName;
	 
		_Fields(short thriftId, String fieldName) 
			_thriftId = thriftId;
			_fieldName = fieldName;
		}
	

			return _thriftId;
		}
	

			return 
		}
		

	/

	}
		
	p

		this();
		this.messageResult = messageResult;
		
	

	 * Performs a deep copy on <i>othe
		*/
	p

			t
	 * is.messageResult = other.messageResult;
	 * 
	 
		}
		
	

		return new sayAgain_args(this);
		
			
		O
	p

	
		
		
			blic String getMessa
				turn this.messageResu
			
				 
			b
			his.me

		
	

		this.messageResult = null;
		
		
			* Returns true if field me

		r
		
	

		if
	 * (!value) {
	 * 
	 
			this.messageResult = null;
		}
			
		

		switch (field) {
		case MESSAGE_RESULT:
			if (value == null) {
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields  field)
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field corresponding to fieldID is set (has been assi
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that instanceof sayAga
			return this.equals((sayA

		
	

		if (that
			return false;
		
			oolean this_present_messageResult = true && this.isSetMessageResul
		b

			if (!(this_present_mes

			if (!this.messageResult.equals(that.messageResult))
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_messageResult)
			list.add(messageResult);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetMessageResult()).
		if (lastComparison !=

		}
		if (isSetMessageResult()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
		
	p

	}
		
			blic void write(org.apache.thrift.protocol.TProtocol o
					prot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().
			
		
	@

		StringBuilder sb = new StringBuilder("sayAgain_args(");
		boole
			
			// 
			b.append("messageResult:");
					
		if (this.messageResult == null) {
			sb.append("null");
		}
		

		first = false;
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like you should have
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
				v
				blic sayAgain_argsSta
			r
			

			
			// 
			ivate static class
		

			org.apache.thrift.protocol.TField schemeField;
				
			iprot.readStructBe

				schemeField = iprot.readFieldBegin(
				if (schemeField.type == org.apache
					break;
				}
				switch (schemeField.id) {
					case 1: // MESSAGE_RE
				
							struct.messageResul
							struct.setMessageRe
			

		

					default:
						org.apache.thrift.protocol.TProtocolUtil.
				}
			
		

	

			struct.v
		}
				
			
			ublic void write(org.apache.thri
			struct.validate();
				
			o
			if (struct.messageResult != null
				oprot.writeFieldBegin(MESSAGE_RES
				String elem341 = struct.messageResult;
				oprot.writeString(elem341);
				
			

			oprot.wr
		}
				
			
			
			
				vate static class sayAgain_argsTupleScheme
				blic sayAgain_argsTupleScheme getSc
			r
		}

	



		public void write(org.apache.thrift.protocol.TProtocol prot, sayAgain_args struct) throws org.apache.thrift.TEx
		eption {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			

			if (struct.isSetMessageResult()) {
			 

			}
			oprot.
			if (struct.isSetMessageResult()) {
				String elem342 = struct.messageResult;
		

		}

	
	 * 
	 * 
	 
		@Override
		public void rea d(org.apache.	

			if (incoming.get(0)) {

				struct
			}
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.TStr
			 
			vate static final 
				
			vate sta
				ic {
			c
		s

		
		 blic String success; The s
		 * t of fields t
		 bl
		SUCCESS((short)0, "success")
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				case 0: // SUCCESS
					return SUCCESS;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 * Find the _Fields co */
		public 
			return byName.get(name
		

		pr
	 private final String _fieldName;
	 
		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}
	

			return _thriftId;
		}
	

			return 
		}
		

	/

	}
		
	p

		this();
		this.success = success;
		
	

	 * Performs a deep copy on <
		*/
	p

			t
	 * is.success = other.success;
	 * 
	 
		}
		
	

		return new sayAgain_result(this);
		
			
		O
	p

	
		
		
			blic String getSucce
				turn this.succe
			
				 
			b
			his.su

		
	

		this.success = null;
		
		
			* Returns true if fi

		r
		
	

		if
	 * (!value) {
	 * 
	 
			this.success = null;
		}
			
		

		switch (field) {
		case SUCCESS:
			if (value == null) {
			
			} else {
		

			break;
	
		}
			
		
			blic Object getFieldValue(_Fields fi eld) {
		switch (field
		

	
		}
			hrow new Ille

		
		** Returns true if field corresponding to fieldID is set (h
		ublic boolean isSet(_Fields field) {
			f (field == null) {
				hrow new Ille
			
				
		s

			return isSe
		

	}
	
		Override

		if (that == null)
			return false;
		if (that instanceof 
			return this.equals

		
	

		if (that
			return false;
		
			oolean this_present_success = true && this.isSetSuccess();
		b

			if (!(this_present_suc

			if (!this.success.equals(that.success))
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_success)
			list.add(success);
	

	}
		
	@

		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getNam
		

		int last
	
		lastComparison = Boolean.valueOf(isSetSuccess()).compareT
		if (lastComparison !=

		}
		if (isSetSuccess()) {
			lastComparison = o
			if (las
				return lastComparison;
			
		}
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
		
	p

	}
		
			blic void write(org.apache.thrift.protocol.TProtocol o
					prot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().
			
		
	@

		StringBuilder sb = new StringBuilder("sayAgain_result(");
		boole
			
			// 
			b.append("success:");
					
		if (this.success == null) {
			sb.append("null");
		}
		

		first = false;
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like you shoul
					d(new or
						ch (org.apache.thrift.TException te) {
					o
					
				
					
				v
				blic sayAgain_resultS
			r
			

			
			// 
			ivate static class
		

			org.apache.thrift.protocol.TField schemeField;
				
			iprot.readStructBe

				schemeField = iprot.readFieldBegin(
				if (schemeField.type == org.
					break;
				}
				switch (schemeField.id) {
					case 0: // SUCCESS
				
							struct.success = ip
							struct.setSuccessIs
			

		

					default:
						org.apache.thrift.protocol.TProtocolUtil.sk
				}
			
		

	

			struct.v
		}
				
			
			ublic void write(org.apache.thri
			struct.validate();
				
			o
			if (struct.success != null) {
				oprot.writeFieldBegin(SUCCE
				String elem343 = struct.success;
				oprot.writeString(elem343);
				
			

			oprot.wr
		}
				
			
			
			
				vate static class sayAgain_resultTup
				blic sayAgain_resultTupleSche
			r
		}

	


			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sayAgain_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					String elem344 = struct.success;
					oprot.writeString(elem344);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sayAgain_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

}