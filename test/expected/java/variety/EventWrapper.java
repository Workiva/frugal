/**
 * Autogenerated by Frugal Compiler (3.4.8)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package variety.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EventWrapper implements org.apache.thrift.TBase<EventWrapper, EventWrapper._Fields>, java.io.Serializable, Cloneable, Comparable<EventWrapper> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventWrapper");

	private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.I64, (short)1);
	private static final org.apache.thrift.protocol.TField EV_FIELD_DESC = new org.apache.thrift.protocol.TField("Ev", org.apache.thrift.protocol.TType.STRUCT, (short)2);
	private static final org.apache.thrift.protocol.TField EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Events", org.apache.thrift.protocol.TType.LIST, (short)3);
	private static final org.apache.thrift.protocol.TField EVENTS2_FIELD_DESC = new org.apache.thrift.protocol.TField("Events2", org.apache.thrift.protocol.TType.SET, (short)4);
	private static final org.apache.thrift.protocol.TField EVENT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("EventMap", org.apache.thrift.protocol.TType.MAP, (short)5);
	private static final org.apache.thrift.protocol.TField NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("Nums", org.apache.thrift.protocol.TType.LIST, (short)6);
	private static final org.apache.thrift.protocol.TField ENUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("Enums", org.apache.thrift.protocol.TType.LIST, (short)7);
	private static final org.apache.thrift.protocol.TField A_BOOL_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("aBoolField", org.apache.thrift.protocol.TType.BOOL, (short)8);
	private static final org.apache.thrift.protocol.TField A_UNION_FIELD_DESC = new org.apache.thrift.protocol.TField("a_union", org.apache.thrift.protocol.TType.STRUCT, (short)9);
	private static final org.apache.thrift.protocol.TField TYPEDEF_OF_TYPEDEF_FIELD_DESC = new org.apache.thrift.protocol.TField("typedefOfTypedef", org.apache.thrift.protocol.TType.STRING, (short)10);
	private static final org.apache.thrift.protocol.TField DEPR_FIELD_DESC = new org.apache.thrift.protocol.TField("depr", org.apache.thrift.protocol.TType.BOOL, (short)11);
	private static final org.apache.thrift.protocol.TField DEPR_BINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("deprBinary", org.apache.thrift.protocol.TType.STRING, (short)12);
	private static final org.apache.thrift.protocol.TField DEPR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("deprList", org.apache.thrift.protocol.TType.LIST, (short)13);
	private static final org.apache.thrift.protocol.TField EVENTS_DEFAULT_FIELD_DESC = new org.apache.thrift.protocol.TField("EventsDefault", org.apache.thrift.protocol.TType.LIST, (short)14);
	private static final org.apache.thrift.protocol.TField EVENT_MAP_DEFAULT_FIELD_DESC = new org.apache.thrift.protocol.TField("EventMapDefault", org.apache.thrift.protocol.TType.MAP, (short)15);
	private static final org.apache.thrift.protocol.TField EVENT_SET_DEFAULT_FIELD_DESC = new org.apache.thrift.protocol.TField("EventSetDefault", org.apache.thrift.protocol.TType.SET, (short)16);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new EventWrapperStandardSchemeFactory());
		schemes.put(TupleScheme.class, new EventWrapperTupleSchemeFactory());
	}

	public long ID; // optional
	public Event Ev; // required
	public java.util.List<Event> Events;
	public java.util.Set<Event> Events2;
	public java.util.Map<Long, Event> EventMap;
	public java.util.List<java.util.List<Integer>> Nums;
	public java.util.List<ItsAnEnum> Enums;
	public boolean aBoolField;
	public TestingUnions a_union;
	public String typedefOfTypedef;
	/**
	 * This is a docstring comment for a deprecated field that has been spread
	 * across two lines.
	 * @deprecated use something else
	 */
	@Deprecated
	public boolean depr;
	/**
	 * @deprecated use something else
	 */
	@Deprecated
	public java.nio.ByteBuffer deprBinary;
	/**
	 * @deprecated use something else
	 */
	@Deprecated
	public java.util.List<Boolean> deprList;
	public java.util.List<Event> EventsDefault; // optional
	public java.util.Map<Long, Event> EventMapDefault; // optional
	public java.util.Set<Event> EventSetDefault; // optional
	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ID((short)1, "ID"),
		EV((short)2, "Ev"),
		EVENTS((short)3, "Events"),
		EVENTS2((short)4, "Events2"),
		EVENT_MAP((short)5, "EventMap"),
		NUMS((short)6, "Nums"),
		ENUMS((short)7, "Enums"),
		A_BOOL_FIELD((short)8, "aBoolField"),
		A_UNION((short)9, "a_union"),
		TYPEDEF_OF_TYPEDEF((short)10, "typedefOfTypedef"),
		/**
		 * This is a docstring comment for a deprecated field that has been spread
		 * across two lines.
		 */
		DEPR((short)11, "depr"),
		DEPR_BINARY((short)12, "deprBinary"),
		DEPR_LIST((short)13, "deprList"),
		EVENTS_DEFAULT((short)14, "EventsDefault"),
		EVENT_MAP_DEFAULT((short)15, "EventMapDefault"),
		EVENT_SET_DEFAULT((short)16, "EventSetDefault")
		;

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
				case 1: // ID
					return ID;
				case 2: // EV
					return EV;
				case 3: // EVENTS
					return EVENTS;
				case 4: // EVENTS2
					return EVENTS2;
				case 5: // EVENT_MAP
					return EVENT_MAP;
				case 6: // NUMS
					return NUMS;
				case 7: // ENUMS
					return ENUMS;
				case 8: // A_BOOL_FIELD
					return A_BOOL_FIELD;
				case 9: // A_UNION
					return A_UNION;
				case 10: // TYPEDEF_OF_TYPEDEF
					return TYPEDEF_OF_TYPEDEF;
				case 11: // DEPR
					return DEPR;
				case 12: // DEPR_BINARY
					return DEPR_BINARY;
				case 13: // DEPR_LIST
					return DEPR_LIST;
				case 14: // EVENTS_DEFAULT
					return EVENTS_DEFAULT;
				case 15: // EVENT_MAP_DEFAULT
					return EVENT_MAP_DEFAULT;
				case 16: // EVENT_SET_DEFAULT
					return EVENT_SET_DEFAULT;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ID_ISSET_ID = 0;
	private static final int __ABOOLFIELD_ISSET_ID = 1;
	private static final int __DEPR_ISSET_ID = 2;
	private byte __isset_bitfield = 0;
	public EventWrapper() {
		this.EventsDefault = new ArrayList<Event>();

		this.EventMapDefault = new HashMap<Long,Event>();

		this.EventSetDefault = new HashSet<Event>();

	}

	public EventWrapper(
		Event Ev,
		java.util.List<Event> Events,
		java.util.Set<Event> Events2,
		java.util.Map<Long, Event> EventMap,
		java.util.List<java.util.List<Integer>> Nums,
		java.util.List<ItsAnEnum> Enums,
		boolean aBoolField,
		TestingUnions a_union,
		String typedefOfTypedef,
		boolean depr,
		java.nio.ByteBuffer deprBinary,
		java.util.List<Boolean> deprList) {
		this();
		this.Ev = Ev;
		this.Events = Events;
		this.Events2 = Events2;
		this.EventMap = EventMap;
		this.Nums = Nums;
		this.Enums = Enums;
		this.aBoolField = aBoolField;
		setABoolFieldIsSet(true);
		this.a_union = a_union;
		this.typedefOfTypedef = typedefOfTypedef;
		this.depr = depr;
		setDeprIsSet(true);
		this.deprBinary = org.apache.thrift.TBaseHelper.copyBinary(deprBinary);
		this.deprList = deprList;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public EventWrapper(EventWrapper other) {
		__isset_bitfield = other.__isset_bitfield;
		this.ID = other.ID;
		if (other.isSetEv()) {
			this.Ev = new Event(other.Ev);
		}
		if (other.isSetEvents()) {
			this.Events = new ArrayList<Event>(other.Events.size());
			for (Event elem93 : other.Events) {
				Event elem94 = new Event(elem93);
				this.Events.add(elem94);
			}
		}
		if (other.isSetEvents2()) {
			this.Events2 = new HashSet<Event>(other.Events2.size());
			for (Event elem95 : other.Events2) {
				Event elem96 = new Event(elem95);
				this.Events2.add(elem96);
			}
		}
		if (other.isSetEventMap()) {
			this.EventMap = new HashMap<Long,Event>(other.EventMap.size());
			for (Map.Entry<Long, Event> elem97 : other.EventMap.entrySet()) {
				long elem99 = elem97.getKey();
				Event elem98 = new Event(elem97.getValue());
				this.EventMap.put(elem99, elem98);
			}
		}
		if (other.isSetNums()) {
			this.Nums = new ArrayList<java.util.List<Integer>>(other.Nums.size());
			for (java.util.List<Integer> elem100 : other.Nums) {
				java.util.List<Integer> elem101 = new ArrayList<Integer>(elem100.size());
				for (int elem102 : elem100) {
					int elem103 = elem102;
					elem101.add(elem103);
				}
				this.Nums.add(elem101);
			}
		}
		if (other.isSetEnums()) {
			this.Enums = new ArrayList<ItsAnEnum>(other.Enums.size());
			for (ItsAnEnum elem104 : other.Enums) {
				ItsAnEnum elem105 = elem104;
				this.Enums.add(elem105);
			}
		}
		this.aBoolField = other.aBoolField;
		if (other.isSetA_union()) {
			this.a_union = new TestingUnions(other.a_union);
		}
		if (other.isSetTypedefOfTypedef()) {
			this.typedefOfTypedef = other.typedefOfTypedef;
		}
		this.depr = other.depr;
		if (other.isSetDeprBinary()) {
			this.deprBinary = org.apache.thrift.TBaseHelper.copyBinary(other.deprBinary);
		}
		if (other.isSetDeprList()) {
			this.deprList = new ArrayList<Boolean>(other.deprList.size());
			for (boolean elem106 : other.deprList) {
				boolean elem107 = elem106;
				this.deprList.add(elem107);
			}
		}
		if (other.isSetEventsDefault()) {
			this.EventsDefault = new ArrayList<Event>(other.EventsDefault.size());
			for (Event elem108 : other.EventsDefault) {
				Event elem109 = new Event(elem108);
				this.EventsDefault.add(elem109);
			}
		}
		if (other.isSetEventMapDefault()) {
			this.EventMapDefault = new HashMap<Long,Event>(other.EventMapDefault.size());
			for (Map.Entry<Long, Event> elem110 : other.EventMapDefault.entrySet()) {
				long elem112 = elem110.getKey();
				Event elem111 = new Event(elem110.getValue());
				this.EventMapDefault.put(elem112, elem111);
			}
		}
		if (other.isSetEventSetDefault()) {
			this.EventSetDefault = new HashSet<Event>(other.EventSetDefault.size());
			for (Event elem113 : other.EventSetDefault) {
				Event elem114 = new Event(elem113);
				this.EventSetDefault.add(elem114);
			}
		}
	}

	public EventWrapper deepCopy() {
		return new EventWrapper(this);
	}

	@Override
	public void clear() {
		setIDIsSet(false);
		this.ID = 0L;

		this.Ev = null;

		this.Events = null;

		this.Events2 = null;

		this.EventMap = null;

		this.Nums = null;

		this.Enums = null;

		setABoolFieldIsSet(false);
		this.aBoolField = false;

		this.a_union = null;

		this.typedefOfTypedef = null;

		setDeprIsSet(false);
		this.depr = false;

		this.deprBinary = null;

		this.deprList = null;

		this.EventsDefault = new ArrayList<Event>();

		this.EventMapDefault = new HashMap<Long,Event>();

		this.EventSetDefault = new HashSet<Event>();

	}

	public long getID() {
		return this.ID;
	}

	public EventWrapper setID(long ID) {
		this.ID = ID;
		setIDIsSet(true);
		return this;
	}

	public void unsetID() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
	}

	/** Returns true if field ID is set (has been assigned a value) and false otherwise */
	public boolean isSetID() {
		return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
	}

	public void setIDIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
	}

	public Event getEv() {
		return this.Ev;
	}

	public EventWrapper setEv(Event Ev) {
		this.Ev = Ev;
		return this;
	}

	public void unsetEv() {
		this.Ev = null;
	}

	/** Returns true if field Ev is set (has been assigned a value) and false otherwise */
	public boolean isSetEv() {
		return this.Ev != null;
	}

	public void setEvIsSet(boolean value) {
		if (!value) {
			this.Ev = null;
		}
	}

	public int getEventsSize() {
		return (this.Events == null) ? 0 : this.Events.size();
	}

	public java.util.Iterator<Event> getEventsIterator() {
		return (this.Events == null) ? null : this.Events.iterator();
	}

	public void addToEvents(Event elem) {
		if (this.Events == null) {
			this.Events = new ArrayList<Event>();
		}
		this.Events.add(elem);
	}

	public java.util.List<Event> getEvents() {
		return this.Events;
	}

	public EventWrapper setEvents(java.util.List<Event> Events) {
		this.Events = Events;
		return this;
	}

	public void unsetEvents() {
		this.Events = null;
	}

	/** Returns true if field Events is set (has been assigned a value) and false otherwise */
	public boolean isSetEvents() {
		return this.Events != null;
	}

	public void setEventsIsSet(boolean value) {
		if (!value) {
			this.Events = null;
		}
	}

	public int getEvents2Size() {
		return (this.Events2 == null) ? 0 : this.Events2.size();
	}

	public java.util.Iterator<Event> getEvents2Iterator() {
		return (this.Events2 == null) ? null : this.Events2.iterator();
	}

	public void addToEvents2(Event elem) {
		if (this.Events2 == null) {
			this.Events2 = new HashSet<Event>();
		}
		this.Events2.add(elem);
	}

	public java.util.Set<Event> getEvents2() {
		return this.Events2;
	}

	public EventWrapper setEvents2(java.util.Set<Event> Events2) {
		this.Events2 = Events2;
		return this;
	}

	public void unsetEvents2() {
		this.Events2 = null;
	}

	/** Returns true if field Events2 is set (has been assigned a value) and false otherwise */
	public boolean isSetEvents2() {
		return this.Events2 != null;
	}

	public void setEvents2IsSet(boolean value) {
		if (!value) {
			this.Events2 = null;
		}
	}

	public int getEventMapSize() {
		return (this.EventMap == null) ? 0 : this.EventMap.size();
	}

	public void putToEventMap(long key, Event val) {
		if (this.EventMap == null) {
			this.EventMap = new HashMap<Long,Event>();
		}
		this.EventMap.put(key, val);
	}

	public java.util.Map<Long, Event> getEventMap() {
		return this.EventMap;
	}

	public EventWrapper setEventMap(java.util.Map<Long, Event> EventMap) {
		this.EventMap = EventMap;
		return this;
	}

	public void unsetEventMap() {
		this.EventMap = null;
	}

	/** Returns true if field EventMap is set (has been assigned a value) and false otherwise */
	public boolean isSetEventMap() {
		return this.EventMap != null;
	}

	public void setEventMapIsSet(boolean value) {
		if (!value) {
			this.EventMap = null;
		}
	}

	public int getNumsSize() {
		return (this.Nums == null) ? 0 : this.Nums.size();
	}

	public java.util.Iterator<java.util.List<Integer>> getNumsIterator() {
		return (this.Nums == null) ? null : this.Nums.iterator();
	}

	public void addToNums(java.util.List<Integer> elem) {
		if (this.Nums == null) {
			this.Nums = new ArrayList<java.util.List<Integer>>();
		}
		this.Nums.add(elem);
	}

	public java.util.List<java.util.List<Integer>> getNums() {
		return this.Nums;
	}

	public EventWrapper setNums(java.util.List<java.util.List<Integer>> Nums) {
		this.Nums = Nums;
		return this;
	}

	public void unsetNums() {
		this.Nums = null;
	}

	/** Returns true if field Nums is set (has been assigned a value) and false otherwise */
	public boolean isSetNums() {
		return this.Nums != null;
	}

	public void setNumsIsSet(boolean value) {
		if (!value) {
			this.Nums = null;
		}
	}

	public int getEnumsSize() {
		return (this.Enums == null) ? 0 : this.Enums.size();
	}

	public java.util.Iterator<ItsAnEnum> getEnumsIterator() {
		return (this.Enums == null) ? null : this.Enums.iterator();
	}

	public void addToEnums(ItsAnEnum elem) {
		if (this.Enums == null) {
			this.Enums = new ArrayList<ItsAnEnum>();
		}
		this.Enums.add(elem);
	}

	public java.util.List<ItsAnEnum> getEnums() {
		return this.Enums;
	}

	public EventWrapper setEnums(java.util.List<ItsAnEnum> Enums) {
		this.Enums = Enums;
		return this;
	}

	public void unsetEnums() {
		this.Enums = null;
	}

	/** Returns true if field Enums is set (has been assigned a value) and false otherwise */
	public boolean isSetEnums() {
		return this.Enums != null;
	}

	public void setEnumsIsSet(boolean value) {
		if (!value) {
			this.Enums = null;
		}
	}

	public boolean isABoolField() {
		return this.aBoolField;
	}

	public EventWrapper setABoolField(boolean aBoolField) {
		this.aBoolField = aBoolField;
		setABoolFieldIsSet(true);
		return this;
	}

	public void unsetABoolField() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ABOOLFIELD_ISSET_ID);
	}

	/** Returns true if field aBoolField is set (has been assigned a value) and false otherwise */
	public boolean isSetABoolField() {
		return EncodingUtils.testBit(__isset_bitfield, __ABOOLFIELD_ISSET_ID);
	}

	public void setABoolFieldIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ABOOLFIELD_ISSET_ID, value);
	}

	public TestingUnions getA_union() {
		return this.a_union;
	}

	public EventWrapper setA_union(TestingUnions a_union) {
		this.a_union = a_union;
		return this;
	}

	public void unsetA_union() {
		this.a_union = null;
	}

	/** Returns true if field a_union is set (has been assigned a value) and false otherwise */
	public boolean isSetA_union() {
		return this.a_union != null;
	}

	public void setA_unionIsSet(boolean value) {
		if (!value) {
			this.a_union = null;
		}
	}

	public String getTypedefOfTypedef() {
		return this.typedefOfTypedef;
	}

	public EventWrapper setTypedefOfTypedef(String typedefOfTypedef) {
		this.typedefOfTypedef = typedefOfTypedef;
		return this;
	}

	public void unsetTypedefOfTypedef() {
		this.typedefOfTypedef = null;
	}

	/** Returns true if field typedefOfTypedef is set (has been assigned a value) and false otherwise */
	public boolean isSetTypedefOfTypedef() {
		return this.typedefOfTypedef != null;
	}

	public void setTypedefOfTypedefIsSet(boolean value) {
		if (!value) {
			this.typedefOfTypedef = null;
		}
	}

	/**
	 * This is a docstring comment for a deprecated field that has been spread
	 * across two lines.
	 */
	@Deprecated
	public boolean isDepr() {
		return this.depr;
	}

	/**
	 * This is a docstring comment for a deprecated field that has been spread
	 * across two lines.
	 */
	@Deprecated
	public EventWrapper setDepr(boolean depr) {
		this.depr = depr;
		setDeprIsSet(true);
		return this;
	}

	@Deprecated
	public void unsetDepr() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPR_ISSET_ID);
	}

	/** Returns true if field depr is set (has been assigned a value) and false otherwise */
	@Deprecated
	public boolean isSetDepr() {
		return EncodingUtils.testBit(__isset_bitfield, __DEPR_ISSET_ID);
	}

	@Deprecated
	public void setDeprIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPR_ISSET_ID, value);
	}

	@Deprecated
	public byte[] getDeprBinary() {
		setDeprBinary(org.apache.thrift.TBaseHelper.rightSize(deprBinary));
		return deprBinary == null ? null : deprBinary.array();
	}

	public java.nio.ByteBuffer bufferForDeprBinary() {
		return org.apache.thrift.TBaseHelper.copyBinary(deprBinary);
	}

	@Deprecated
	public EventWrapper setDeprBinary(byte[] deprBinary) {
		this.deprBinary = deprBinary == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(Arrays.copyOf(deprBinary, deprBinary.length));
		return this;
	}

	@Deprecated
	public EventWrapper setDeprBinary(java.nio.ByteBuffer deprBinary) {
		this.deprBinary = org.apache.thrift.TBaseHelper.copyBinary(deprBinary);
		return this;
	}

	@Deprecated
	public void unsetDeprBinary() {
		this.deprBinary = null;
	}

	/** Returns true if field deprBinary is set (has been assigned a value) and false otherwise */
	@Deprecated
	public boolean isSetDeprBinary() {
		return this.deprBinary != null;
	}

	@Deprecated
	public void setDeprBinaryIsSet(boolean value) {
		if (!value) {
			this.deprBinary = null;
		}
	}

	@Deprecated
	public int getDeprListSize() {
		return (this.deprList == null) ? 0 : this.deprList.size();
	}

	@Deprecated
	public java.util.Iterator<Boolean> getDeprListIterator() {
		return (this.deprList == null) ? null : this.deprList.iterator();
	}

	@Deprecated
	public void addToDeprList(boolean elem) {
		if (this.deprList == null) {
			this.deprList = new ArrayList<Boolean>();
		}
		this.deprList.add(elem);
	}

	@Deprecated
	public java.util.List<Boolean> getDeprList() {
		return this.deprList;
	}

	@Deprecated
	public EventWrapper setDeprList(java.util.List<Boolean> deprList) {
		this.deprList = deprList;
		return this;
	}

	@Deprecated
	public void unsetDeprList() {
		this.deprList = null;
	}

	/** Returns true if field deprList is set (has been assigned a value) and false otherwise */
	@Deprecated
	public boolean isSetDeprList() {
		return this.deprList != null;
	}

	@Deprecated
	public void setDeprListIsSet(boolean value) {
		if (!value) {
			this.deprList = null;
		}
	}

	public int getEventsDefaultSize() {
		return (this.EventsDefault == null) ? 0 : this.EventsDefault.size();
	}

	public java.util.Iterator<Event> getEventsDefaultIterator() {
		return (this.EventsDefault == null) ? null : this.EventsDefault.iterator();
	}

	public void addToEventsDefault(Event elem) {
		if (this.EventsDefault == null) {
			this.EventsDefault = new ArrayList<Event>();
		}
		this.EventsDefault.add(elem);
	}

	public java.util.List<Event> getEventsDefault() {
		return this.EventsDefault;
	}

	public EventWrapper setEventsDefault(java.util.List<Event> EventsDefault) {
		this.EventsDefault = EventsDefault;
		return this;
	}

	public void unsetEventsDefault() {
		this.EventsDefault = null;
	}

	/** Returns true if field EventsDefault is set (has been assigned a value) and false otherwise */
	public boolean isSetEventsDefault() {
		return this.EventsDefault != null;
	}

	public void setEventsDefaultIsSet(boolean value) {
		if (!value) {
			this.EventsDefault = null;
		}
	}

	public int getEventMapDefaultSize() {
		return (this.EventMapDefault == null) ? 0 : this.EventMapDefault.size();
	}

	public void putToEventMapDefault(long key, Event val) {
		if (this.EventMapDefault == null) {
			this.EventMapDefault = new HashMap<Long,Event>();
		}
		this.EventMapDefault.put(key, val);
	}

	public java.util.Map<Long, Event> getEventMapDefault() {
		return this.EventMapDefault;
	}

	public EventWrapper setEventMapDefault(java.util.Map<Long, Event> EventMapDefault) {
		this.EventMapDefault = EventMapDefault;
		return this;
	}

	public void unsetEventMapDefault() {
		this.EventMapDefault = null;
	}

	/** Returns true if field EventMapDefault is set (has been assigned a value) and false otherwise */
	public boolean isSetEventMapDefault() {
		return this.EventMapDefault != null;
	}

	public void setEventMapDefaultIsSet(boolean value) {
		if (!value) {
			this.EventMapDefault = null;
		}
	}

	public int getEventSetDefaultSize() {
		return (this.EventSetDefault == null) ? 0 : this.EventSetDefault.size();
	}

	public java.util.Iterator<Event> getEventSetDefaultIterator() {
		return (this.EventSetDefault == null) ? null : this.EventSetDefault.iterator();
	}

	public void addToEventSetDefault(Event elem) {
		if (this.EventSetDefault == null) {
			this.EventSetDefault = new HashSet<Event>();
		}
		this.EventSetDefault.add(elem);
	}

	public java.util.Set<Event> getEventSetDefault() {
		return this.EventSetDefault;
	}

	public EventWrapper setEventSetDefault(java.util.Set<Event> EventSetDefault) {
		this.EventSetDefault = EventSetDefault;
		return this;
	}

	public void unsetEventSetDefault() {
		this.EventSetDefault = null;
	}

	/** Returns true if field EventSetDefault is set (has been assigned a value) and false otherwise */
	public boolean isSetEventSetDefault() {
		return this.EventSetDefault != null;
	}

	public void setEventSetDefaultIsSet(boolean value) {
		if (!value) {
			this.EventSetDefault = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ID:
			if (value == null) {
				unsetID();
			} else {
				setID((Long)value);
			}
			break;

		case EV:
			if (value == null) {
				unsetEv();
			} else {
				setEv((Event)value);
			}
			break;

		case EVENTS:
			if (value == null) {
				unsetEvents();
			} else {
				setEvents((java.util.List<Event>)value);
			}
			break;

		case EVENTS2:
			if (value == null) {
				unsetEvents2();
			} else {
				setEvents2((java.util.Set<Event>)value);
			}
			break;

		case EVENT_MAP:
			if (value == null) {
				unsetEventMap();
			} else {
				setEventMap((java.util.Map<Long, Event>)value);
			}
			break;

		case NUMS:
			if (value == null) {
				unsetNums();
			} else {
				setNums((java.util.List<java.util.List<Integer>>)value);
			}
			break;

		case ENUMS:
			if (value == null) {
				unsetEnums();
			} else {
				setEnums((java.util.List<ItsAnEnum>)value);
			}
			break;

		case A_BOOL_FIELD:
			if (value == null) {
				unsetABoolField();
			} else {
				setABoolField((Boolean)value);
			}
			break;

		case A_UNION:
			if (value == null) {
				unsetA_union();
			} else {
				setA_union((TestingUnions)value);
			}
			break;

		case TYPEDEF_OF_TYPEDEF:
			if (value == null) {
				unsetTypedefOfTypedef();
			} else {
				setTypedefOfTypedef((String)value);
			}
			break;

		case DEPR:
			if (value == null) {
				unsetDepr();
			} else {
				setDepr((Boolean)value);
			}
			break;

		case DEPR_BINARY:
			if (value == null) {
				unsetDeprBinary();
			} else {
				setDeprBinary((java.nio.ByteBuffer)value);
			}
			break;

		case DEPR_LIST:
			if (value == null) {
				unsetDeprList();
			} else {
				setDeprList((java.util.List<Boolean>)value);
			}
			break;

		case EVENTS_DEFAULT:
			if (value == null) {
				unsetEventsDefault();
			} else {
				setEventsDefault((java.util.List<Event>)value);
			}
			break;

		case EVENT_MAP_DEFAULT:
			if (value == null) {
				unsetEventMapDefault();
			} else {
				setEventMapDefault((java.util.Map<Long, Event>)value);
			}
			break;

		case EVENT_SET_DEFAULT:
			if (value == null) {
				unsetEventSetDefault();
			} else {
				setEventSetDefault((java.util.Set<Event>)value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ID:
			return getID();

		case EV:
			return getEv();

		case EVENTS:
			return getEvents();

		case EVENTS2:
			return getEvents2();

		case EVENT_MAP:
			return getEventMap();

		case NUMS:
			return getNums();

		case ENUMS:
			return getEnums();

		case A_BOOL_FIELD:
			return isABoolField();

		case A_UNION:
			return getA_union();

		case TYPEDEF_OF_TYPEDEF:
			return getTypedefOfTypedef();

		case DEPR:
			return isDepr();

		case DEPR_BINARY:
			return getDeprBinary();

		case DEPR_LIST:
			return getDeprList();

		case EVENTS_DEFAULT:
			return getEventsDefault();

		case EVENT_MAP_DEFAULT:
			return getEventMapDefault();

		case EVENT_SET_DEFAULT:
			return getEventSetDefault();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ID:
			return isSetID();
		case EV:
			return isSetEv();
		case EVENTS:
			return isSetEvents();
		case EVENTS2:
			return isSetEvents2();
		case EVENT_MAP:
			return isSetEventMap();
		case NUMS:
			return isSetNums();
		case ENUMS:
			return isSetEnums();
		case A_BOOL_FIELD:
			return isSetABoolField();
		case A_UNION:
			return isSetA_union();
		case TYPEDEF_OF_TYPEDEF:
			return isSetTypedefOfTypedef();
		case DEPR:
			return isSetDepr();
		case DEPR_BINARY:
			return isSetDeprBinary();
		case DEPR_LIST:
			return isSetDeprList();
		case EVENTS_DEFAULT:
			return isSetEventsDefault();
		case EVENT_MAP_DEFAULT:
			return isSetEventMapDefault();
		case EVENT_SET_DEFAULT:
			return isSetEventSetDefault();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof EventWrapper)
			return this.equals((EventWrapper)that);
		return false;
	}

	public boolean equals(EventWrapper that) {
		if (that == null)
			return false;

		boolean this_present_ID = true && this.isSetID();
		boolean that_present_ID = true && that.isSetID();
		if (this_present_ID || that_present_ID) {
			if (!(this_present_ID && that_present_ID))
				return false;
			if (this.ID != that.ID)
				return false;
		}

		boolean this_present_Ev = true && this.isSetEv();
		boolean that_present_Ev = true && that.isSetEv();
		if (this_present_Ev || that_present_Ev) {
			if (!(this_present_Ev && that_present_Ev))
				return false;
			if (!this.Ev.equals(that.Ev))
				return false;
		}

		boolean this_present_Events = true && this.isSetEvents();
		boolean that_present_Events = true && that.isSetEvents();
		if (this_present_Events || that_present_Events) {
			if (!(this_present_Events && that_present_Events))
				return false;
			if (!this.Events.equals(that.Events))
				return false;
		}

		boolean this_present_Events2 = true && this.isSetEvents2();
		boolean that_present_Events2 = true && that.isSetEvents2();
		if (this_present_Events2 || that_present_Events2) {
			if (!(this_present_Events2 && that_present_Events2))
				return false;
			if (!this.Events2.equals(that.Events2))
				return false;
		}

		boolean this_present_EventMap = true && this.isSetEventMap();
		boolean that_present_EventMap = true && that.isSetEventMap();
		if (this_present_EventMap || that_present_EventMap) {
			if (!(this_present_EventMap && that_present_EventMap))
				return false;
			if (!this.EventMap.equals(that.EventMap))
				return false;
		}

		boolean this_present_Nums = true && this.isSetNums();
		boolean that_present_Nums = true && that.isSetNums();
		if (this_present_Nums || that_present_Nums) {
			if (!(this_present_Nums && that_present_Nums))
				return false;
			if (!this.Nums.equals(that.Nums))
				return false;
		}

		boolean this_present_Enums = true && this.isSetEnums();
		boolean that_present_Enums = true && that.isSetEnums();
		if (this_present_Enums || that_present_Enums) {
			if (!(this_present_Enums && that_present_Enums))
				return false;
			if (!this.Enums.equals(that.Enums))
				return false;
		}

		boolean this_present_aBoolField = true;
		boolean that_present_aBoolField = true;
		if (this_present_aBoolField || that_present_aBoolField) {
			if (!(this_present_aBoolField && that_present_aBoolField))
				return false;
			if (this.aBoolField != that.aBoolField)
				return false;
		}

		boolean this_present_a_union = true && this.isSetA_union();
		boolean that_present_a_union = true && that.isSetA_union();
		if (this_present_a_union || that_present_a_union) {
			if (!(this_present_a_union && that_present_a_union))
				return false;
			if (!this.a_union.equals(that.a_union))
				return false;
		}

		boolean this_present_typedefOfTypedef = true && this.isSetTypedefOfTypedef();
		boolean that_present_typedefOfTypedef = true && that.isSetTypedefOfTypedef();
		if (this_present_typedefOfTypedef || that_present_typedefOfTypedef) {
			if (!(this_present_typedefOfTypedef && that_present_typedefOfTypedef))
				return false;
			if (!this.typedefOfTypedef.equals(that.typedefOfTypedef))
				return false;
		}

		boolean this_present_depr = true;
		boolean that_present_depr = true;
		if (this_present_depr || that_present_depr) {
			if (!(this_present_depr && that_present_depr))
				return false;
			if (this.depr != that.depr)
				return false;
		}

		boolean this_present_deprBinary = true && this.isSetDeprBinary();
		boolean that_present_deprBinary = true && that.isSetDeprBinary();
		if (this_present_deprBinary || that_present_deprBinary) {
			if (!(this_present_deprBinary && that_present_deprBinary))
				return false;
			if (!this.deprBinary.equals(that.deprBinary))
				return false;
		}

		boolean this_present_deprList = true && this.isSetDeprList();
		boolean that_present_deprList = true && that.isSetDeprList();
		if (this_present_deprList || that_present_deprList) {
			if (!(this_present_deprList && that_present_deprList))
				return false;
			if (!this.deprList.equals(that.deprList))
				return false;
		}

		boolean this_present_EventsDefault = true && this.isSetEventsDefault();
		boolean that_present_EventsDefault = true && that.isSetEventsDefault();
		if (this_present_EventsDefault || that_present_EventsDefault) {
			if (!(this_present_EventsDefault && that_present_EventsDefault))
				return false;
			if (!this.EventsDefault.equals(that.EventsDefault))
				return false;
		}

		boolean this_present_EventMapDefault = true && this.isSetEventMapDefault();
		boolean that_present_EventMapDefault = true && that.isSetEventMapDefault();
		if (this_present_EventMapDefault || that_present_EventMapDefault) {
			if (!(this_present_EventMapDefault && that_present_EventMapDefault))
				return false;
			if (!this.EventMapDefault.equals(that.EventMapDefault))
				return false;
		}

		boolean this_present_EventSetDefault = true && this.isSetEventSetDefault();
		boolean that_present_EventSetDefault = true && that.isSetEventSetDefault();
		if (this_present_EventSetDefault || that_present_EventSetDefault) {
			if (!(this_present_EventSetDefault && that_present_EventSetDefault))
				return false;
			if (!this.EventSetDefault.equals(that.EventSetDefault))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_ID = true && (isSetID());
		list.add(present_ID);
		if (present_ID)
			list.add(ID);

		boolean present_Ev = true && (isSetEv());
		list.add(present_Ev);
		if (present_Ev)
			list.add(Ev);

		boolean present_Events = true && (isSetEvents());
		list.add(present_Events);
		if (present_Events)
			list.add(Events);

		boolean present_Events2 = true && (isSetEvents2());
		list.add(present_Events2);
		if (present_Events2)
			list.add(Events2);

		boolean present_EventMap = true && (isSetEventMap());
		list.add(present_EventMap);
		if (present_EventMap)
			list.add(EventMap);

		boolean present_Nums = true && (isSetNums());
		list.add(present_Nums);
		if (present_Nums)
			list.add(Nums);

		boolean present_Enums = true && (isSetEnums());
		list.add(present_Enums);
		if (present_Enums)
			list.add(Enums);

		boolean present_aBoolField = true;
		list.add(present_aBoolField);
		if (present_aBoolField)
			list.add(aBoolField);

		boolean present_a_union = true && (isSetA_union());
		list.add(present_a_union);
		if (present_a_union)
			list.add(a_union);

		boolean present_typedefOfTypedef = true && (isSetTypedefOfTypedef());
		list.add(present_typedefOfTypedef);
		if (present_typedefOfTypedef)
			list.add(typedefOfTypedef);

		boolean present_depr = true;
		list.add(present_depr);
		if (present_depr)
			list.add(depr);

		boolean present_deprBinary = true && (isSetDeprBinary());
		list.add(present_deprBinary);
		if (present_deprBinary)
			list.add(deprBinary);

		boolean present_deprList = true && (isSetDeprList());
		list.add(present_deprList);
		if (present_deprList)
			list.add(deprList);

		boolean present_EventsDefault = true && (isSetEventsDefault());
		list.add(present_EventsDefault);
		if (present_EventsDefault)
			list.add(EventsDefault);

		boolean present_EventMapDefault = true && (isSetEventMapDefault());
		list.add(present_EventMapDefault);
		if (present_EventMapDefault)
			list.add(EventMapDefault);

		boolean present_EventSetDefault = true && (isSetEventSetDefault());
		list.add(present_EventSetDefault);
		if (present_EventSetDefault)
			list.add(EventSetDefault);

		return list.hashCode();
	}

	@Override
	public int compareTo(EventWrapper other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetID()).compareTo(other.isSetID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEv()).compareTo(other.isSetEv());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEv()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Ev, other.Ev);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEvents()).compareTo(other.isSetEvents());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEvents()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Events, other.Events);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEvents2()).compareTo(other.isSetEvents2());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEvents2()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Events2, other.Events2);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEventMap()).compareTo(other.isSetEventMap());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEventMap()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EventMap, other.EventMap);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNums()).compareTo(other.isSetNums());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNums()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Nums, other.Nums);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEnums()).compareTo(other.isSetEnums());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEnums()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Enums, other.Enums);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetABoolField()).compareTo(other.isSetABoolField());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetABoolField()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aBoolField, other.aBoolField);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetA_union()).compareTo(other.isSetA_union());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetA_union()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_union, other.a_union);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTypedefOfTypedef()).compareTo(other.isSetTypedefOfTypedef());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTypedefOfTypedef()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typedefOfTypedef, other.typedefOfTypedef);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDepr()).compareTo(other.isSetDepr());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDepr()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depr, other.depr);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDeprBinary()).compareTo(other.isSetDeprBinary());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDeprBinary()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deprBinary, other.deprBinary);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDeprList()).compareTo(other.isSetDeprList());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDeprList()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deprList, other.deprList);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEventsDefault()).compareTo(other.isSetEventsDefault());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEventsDefault()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EventsDefault, other.EventsDefault);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEventMapDefault()).compareTo(other.isSetEventMapDefault());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEventMapDefault()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EventMapDefault, other.EventMapDefault);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEventSetDefault()).compareTo(other.isSetEventSetDefault());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEventSetDefault()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EventSetDefault, other.EventSetDefault);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("EventWrapper(");
		boolean first = true;

		if (isSetID()) {
			sb.append("ID:");
			sb.append(this.ID);
			first = false;
		}
		if (!first) sb.append(", ");
		sb.append("Ev:");
		if (this.Ev == null) {
			sb.append("null");
		} else {
			sb.append(this.Ev);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("Events:");
		if (this.Events == null) {
			sb.append("null");
		} else {
			sb.append(this.Events);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("Events2:");
		if (this.Events2 == null) {
			sb.append("null");
		} else {
			sb.append(this.Events2);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("EventMap:");
		if (this.EventMap == null) {
			sb.append("null");
		} else {
			sb.append(this.EventMap);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("Nums:");
		if (this.Nums == null) {
			sb.append("null");
		} else {
			sb.append(this.Nums);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("Enums:");
		if (this.Enums == null) {
			sb.append("null");
		} else {
			sb.append(this.Enums);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("aBoolField:");
		sb.append(this.aBoolField);
		first = false;
		if (!first) sb.append(", ");
		sb.append("a_union:");
		if (this.a_union == null) {
			sb.append("null");
		} else {
			sb.append(this.a_union);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("typedefOfTypedef:");
		if (this.typedefOfTypedef == null) {
			sb.append("null");
		} else {
			sb.append(this.typedefOfTypedef);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("depr:");
		sb.append(this.depr);
		first = false;
		if (!first) sb.append(", ");
		sb.append("deprBinary:");
		if (this.deprBinary == null) {
			sb.append("null");
		} else {
			org.apache.thrift.TBaseHelper.toString(this.deprBinary, sb);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("deprList:");
		if (this.deprList == null) {
			sb.append("null");
		} else {
			sb.append(this.deprList);
		}
		first = false;
		if (isSetEventsDefault()) {
			if (!first) sb.append(", ");
			sb.append("EventsDefault:");
			if (this.EventsDefault == null) {
				sb.append("null");
			} else {
				sb.append(this.EventsDefault);
			}
			first = false;
		}
		if (isSetEventMapDefault()) {
			if (!first) sb.append(", ");
			sb.append("EventMapDefault:");
			if (this.EventMapDefault == null) {
				sb.append("null");
			} else {
				sb.append(this.EventMapDefault);
			}
			first = false;
		}
		if (isSetEventSetDefault()) {
			if (!first) sb.append(", ");
			sb.append("EventSetDefault:");
			if (this.EventSetDefault == null) {
				sb.append("null");
			} else {
				sb.append(this.EventSetDefault);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (Ev == null) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'Ev' is not present in struct 'EventWrapper'");
		}
		// check for sub-struct validity
		if (Ev != null) {
			Ev.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class EventWrapperStandardSchemeFactory implements SchemeFactory {
		public EventWrapperStandardScheme getScheme() {
			return new EventWrapperStandardScheme();
		}
	}

	private static class EventWrapperStandardScheme extends StandardScheme<EventWrapper> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, EventWrapper struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.ID = iprot.readI64();
							struct.setIDIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // EV
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.Ev = new Event();
							struct.Ev.read(iprot);
							struct.setEvIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // EVENTS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							org.apache.thrift.protocol.TList elem115 = iprot.readListBegin();
							struct.Events = new ArrayList<Event>(elem115.size);
							for (int elem116 = 0; elem116 < elem115.size; ++elem116) {
								Event elem117 = new Event();
								elem117.read(iprot);
								struct.Events.add(elem117);
							}
							iprot.readListEnd();
							struct.setEventsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // EVENTS2
						if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
							org.apache.thrift.protocol.TSet elem118 = iprot.readSetBegin();
							struct.Events2 = new HashSet<Event>(2*elem118.size);
							for (int elem119 = 0; elem119 < elem118.size; ++elem119) {
								Event elem120 = new Event();
								elem120.read(iprot);
								struct.Events2.add(elem120);
							}
							iprot.readSetEnd();
							struct.setEvents2IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 5: // EVENT_MAP
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							org.apache.thrift.protocol.TMap elem121 = iprot.readMapBegin();
							struct.EventMap = new HashMap<Long,Event>(2*elem121.size);
							for (int elem122 = 0; elem122 < elem121.size; ++elem122) {
								long elem124 = iprot.readI64();
								Event elem123 = new Event();
								elem123.read(iprot);
								struct.EventMap.put(elem124, elem123);
							}
							iprot.readMapEnd();
							struct.setEventMapIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 6: // NUMS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							org.apache.thrift.protocol.TList elem125 = iprot.readListBegin();
							struct.Nums = new ArrayList<java.util.List<Integer>>(elem125.size);
							for (int elem126 = 0; elem126 < elem125.size; ++elem126) {
								org.apache.thrift.protocol.TList elem128 = iprot.readListBegin();
								java.util.List<Integer> elem127 = new ArrayList<Integer>(elem128.size);
								for (int elem129 = 0; elem129 < elem128.size; ++elem129) {
									int elem130 = iprot.readI32();
									elem127.add(elem130);
								}
								iprot.readListEnd();
								struct.Nums.add(elem127);
							}
							iprot.readListEnd();
							struct.setNumsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 7: // ENUMS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							org.apache.thrift.protocol.TList elem131 = iprot.readListBegin();
							struct.Enums = new ArrayList<ItsAnEnum>(elem131.size);
							for (int elem132 = 0; elem132 < elem131.size; ++elem132) {
								ItsAnEnum elem133 = ItsAnEnum.findByValue(iprot.readI32());
								struct.Enums.add(elem133);
							}
							iprot.readListEnd();
							struct.setEnumsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 8: // A_BOOL_FIELD
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.aBoolField = iprot.readBool();
							struct.setABoolFieldIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 9: // A_UNION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.a_union = new TestingUnions();
							struct.a_union.read(iprot);
							struct.setA_unionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 10: // TYPEDEF_OF_TYPEDEF
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.typedefOfTypedef = iprot.readString();
							struct.setTypedefOfTypedefIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 11: // DEPR
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.depr = iprot.readBool();
							struct.setDeprIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 12: // DEPR_BINARY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.deprBinary = iprot.readBinary();
							struct.setDeprBinaryIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 13: // DEPR_LIST
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							org.apache.thrift.protocol.TList elem134 = iprot.readListBegin();
							struct.deprList = new ArrayList<Boolean>(elem134.size);
							for (int elem135 = 0; elem135 < elem134.size; ++elem135) {
								boolean elem136 = iprot.readBool();
								struct.deprList.add(elem136);
							}
							iprot.readListEnd();
							struct.setDeprListIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 14: // EVENTS_DEFAULT
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							org.apache.thrift.protocol.TList elem137 = iprot.readListBegin();
							struct.EventsDefault = new ArrayList<Event>(elem137.size);
							for (int elem138 = 0; elem138 < elem137.size; ++elem138) {
								Event elem139 = new Event();
								elem139.read(iprot);
								struct.EventsDefault.add(elem139);
							}
							iprot.readListEnd();
							struct.setEventsDefaultIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 15: // EVENT_MAP_DEFAULT
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							org.apache.thrift.protocol.TMap elem140 = iprot.readMapBegin();
							struct.EventMapDefault = new HashMap<Long,Event>(2*elem140.size);
							for (int elem141 = 0; elem141 < elem140.size; ++elem141) {
								long elem143 = iprot.readI64();
								Event elem142 = new Event();
								elem142.read(iprot);
								struct.EventMapDefault.put(elem143, elem142);
							}
							iprot.readMapEnd();
							struct.setEventMapDefaultIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 16: // EVENT_SET_DEFAULT
						if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
							org.apache.thrift.protocol.TSet elem144 = iprot.readSetBegin();
							struct.EventSetDefault = new HashSet<Event>(2*elem144.size);
							for (int elem145 = 0; elem145 < elem144.size; ++elem145) {
								Event elem146 = new Event();
								elem146.read(iprot);
								struct.EventSetDefault.add(elem146);
							}
							iprot.readSetEnd();
							struct.setEventSetDefaultIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, EventWrapper struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.isSetID()) {
				oprot.writeFieldBegin(ID_FIELD_DESC);
				long elem147 = struct.ID;
				oprot.writeI64(elem147);
				oprot.writeFieldEnd();
			}
			if (struct.Ev != null) {
				oprot.writeFieldBegin(EV_FIELD_DESC);
				struct.Ev.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.Events != null) {
				oprot.writeFieldBegin(EVENTS_FIELD_DESC);
				oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Events.size()));
				for (Event elem148 : struct.Events) {
					elem148.write(oprot);
				}
				oprot.writeListEnd();
				oprot.writeFieldEnd();
			}
			if (struct.Events2 != null) {
				oprot.writeFieldBegin(EVENTS2_FIELD_DESC);
				oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.Events2.size()));
				for (Event elem149 : struct.Events2) {
					elem149.write(oprot);
				}
				oprot.writeSetEnd();
				oprot.writeFieldEnd();
			}
			if (struct.EventMap != null) {
				oprot.writeFieldBegin(EVENT_MAP_FIELD_DESC);
				oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.EventMap.size()));
				for (Map.Entry<Long, Event> elem150 : struct.EventMap.entrySet()) {
					long elem151 = elem150.getKey();
					oprot.writeI64(elem151);
					elem150.getValue().write(oprot);
				}
				oprot.writeMapEnd();
				oprot.writeFieldEnd();
			}
			if (struct.Nums != null) {
				oprot.writeFieldBegin(NUMS_FIELD_DESC);
				oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.Nums.size()));
				for (java.util.List<Integer> elem152 : struct.Nums) {
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, elem152.size()));
					for (int elem153 : elem152) {
						int elem154 = elem153;
						oprot.writeI32(elem154);
					}
					oprot.writeListEnd();
				}
				oprot.writeListEnd();
				oprot.writeFieldEnd();
			}
			if (struct.Enums != null) {
				oprot.writeFieldBegin(ENUMS_FIELD_DESC);
				oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.Enums.size()));
				for (ItsAnEnum elem155 : struct.Enums) {
					ItsAnEnum elem156 = elem155;
					oprot.writeI32(elem156.getValue());
				}
				oprot.writeListEnd();
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(A_BOOL_FIELD_FIELD_DESC);
			boolean elem157 = struct.aBoolField;
			oprot.writeBool(elem157);
			oprot.writeFieldEnd();
			if (struct.a_union != null) {
				oprot.writeFieldBegin(A_UNION_FIELD_DESC);
				struct.a_union.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.typedefOfTypedef != null) {
				oprot.writeFieldBegin(TYPEDEF_OF_TYPEDEF_FIELD_DESC);
				String elem158 = struct.typedefOfTypedef;
				oprot.writeString(elem158);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(DEPR_FIELD_DESC);
			boolean elem159 = struct.depr;
			oprot.writeBool(elem159);
			oprot.writeFieldEnd();
			if (struct.deprBinary != null) {
				oprot.writeFieldBegin(DEPR_BINARY_FIELD_DESC);
				java.nio.ByteBuffer elem160 = struct.deprBinary;
				oprot.writeBinary(elem160);
				oprot.writeFieldEnd();
			}
			if (struct.deprList != null) {
				oprot.writeFieldBegin(DEPR_LIST_FIELD_DESC);
				oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.deprList.size()));
				for (boolean elem161 : struct.deprList) {
					boolean elem162 = elem161;
					oprot.writeBool(elem162);
				}
				oprot.writeListEnd();
				oprot.writeFieldEnd();
			}
			if (struct.EventsDefault != null) {
				if (struct.isSetEventsDefault()) {
					oprot.writeFieldBegin(EVENTS_DEFAULT_FIELD_DESC);
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.EventsDefault.size()));
					for (Event elem163 : struct.EventsDefault) {
						elem163.write(oprot);
					}
					oprot.writeListEnd();
					oprot.writeFieldEnd();
				}
			}
			if (struct.EventMapDefault != null) {
				if (struct.isSetEventMapDefault()) {
					oprot.writeFieldBegin(EVENT_MAP_DEFAULT_FIELD_DESC);
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.EventMapDefault.size()));
					for (Map.Entry<Long, Event> elem164 : struct.EventMapDefault.entrySet()) {
						long elem165 = elem164.getKey();
						oprot.writeI64(elem165);
						elem164.getValue().write(oprot);
					}
					oprot.writeMapEnd();
					oprot.writeFieldEnd();
				}
			}
			if (struct.EventSetDefault != null) {
				if (struct.isSetEventSetDefault()) {
					oprot.writeFieldBegin(EVENT_SET_DEFAULT_FIELD_DESC);
					oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.EventSetDefault.size()));
					for (Event elem166 : struct.EventSetDefault) {
						elem166.write(oprot);
					}
					oprot.writeSetEnd();
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class EventWrapperTupleSchemeFactory implements SchemeFactory {
		public EventWrapperTupleScheme getScheme() {
			return new EventWrapperTupleScheme();
		}
	}

	private static class EventWrapperTupleScheme extends TupleScheme<EventWrapper> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, EventWrapper struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			struct.Ev.write(oprot);
			BitSet optionals = new BitSet();
			if (struct.isSetID()) {
				optionals.set(0);
			}
			if (struct.isSetEvents()) {
				optionals.set(1);
			}
			if (struct.isSetEvents2()) {
				optionals.set(2);
			}
			if (struct.isSetEventMap()) {
				optionals.set(3);
			}
			if (struct.isSetNums()) {
				optionals.set(4);
			}
			if (struct.isSetEnums()) {
				optionals.set(5);
			}
			if (struct.isSetABoolField()) {
				optionals.set(6);
			}
			if (struct.isSetA_union()) {
				optionals.set(7);
			}
			if (struct.isSetTypedefOfTypedef()) {
				optionals.set(8);
			}
			if (struct.isSetDepr()) {
				optionals.set(9);
			}
			if (struct.isSetDeprBinary()) {
				optionals.set(10);
			}
			if (struct.isSetDeprList()) {
				optionals.set(11);
			}
			if (struct.isSetEventsDefault()) {
				optionals.set(12);
			}
			if (struct.isSetEventMapDefault()) {
				optionals.set(13);
			}
			if (struct.isSetEventSetDefault()) {
				optionals.set(14);
			}
			oprot.writeBitSet(optionals, 15);
			if (struct.isSetID()) {
				long elem167 = struct.ID;
				oprot.writeI64(elem167);
			}
			if (struct.isSetEvents()) {
				oprot.writeI32(struct.Events.size());
				for (Event elem168 : struct.Events) {
					elem168.write(oprot);
				}
			}
			if (struct.isSetEvents2()) {
				oprot.writeI32(struct.Events2.size());
				for (Event elem169 : struct.Events2) {
					elem169.write(oprot);
				}
			}
			if (struct.isSetEventMap()) {
				oprot.writeI32(struct.EventMap.size());
				for (Map.Entry<Long, Event> elem170 : struct.EventMap.entrySet()) {
					long elem171 = elem170.getKey();
					oprot.writeI64(elem171);
					elem170.getValue().write(oprot);
				}
			}
			if (struct.isSetNums()) {
				oprot.writeI32(struct.Nums.size());
				for (java.util.List<Integer> elem172 : struct.Nums) {
					oprot.writeI32(elem172.size());
					for (int elem173 : elem172) {
						int elem174 = elem173;
						oprot.writeI32(elem174);
					}
				}
			}
			if (struct.isSetEnums()) {
				oprot.writeI32(struct.Enums.size());
				for (ItsAnEnum elem175 : struct.Enums) {
					ItsAnEnum elem176 = elem175;
					oprot.writeI32(elem176.getValue());
				}
			}
			if (struct.isSetABoolField()) {
				boolean elem177 = struct.aBoolField;
				oprot.writeBool(elem177);
			}
			if (struct.isSetA_union()) {
				struct.a_union.write(oprot);
			}
			if (struct.isSetTypedefOfTypedef()) {
				String elem178 = struct.typedefOfTypedef;
				oprot.writeString(elem178);
			}
			if (struct.isSetDepr()) {
				boolean elem179 = struct.depr;
				oprot.writeBool(elem179);
			}
			if (struct.isSetDeprBinary()) {
				java.nio.ByteBuffer elem180 = struct.deprBinary;
				oprot.writeBinary(elem180);
			}
			if (struct.isSetDeprList()) {
				oprot.writeI32(struct.deprList.size());
				for (boolean elem181 : struct.deprList) {
					boolean elem182 = elem181;
					oprot.writeBool(elem182);
				}
			}
			if (struct.isSetEventsDefault()) {
				oprot.writeI32(struct.EventsDefault.size());
				for (Event elem183 : struct.EventsDefault) {
					elem183.write(oprot);
				}
			}
			if (struct.isSetEventMapDefault()) {
				oprot.writeI32(struct.EventMapDefault.size());
				for (Map.Entry<Long, Event> elem184 : struct.EventMapDefault.entrySet()) {
					long elem185 = elem184.getKey();
					oprot.writeI64(elem185);
					elem184.getValue().write(oprot);
				}
			}
			if (struct.isSetEventSetDefault()) {
				oprot.writeI32(struct.EventSetDefault.size());
				for (Event elem186 : struct.EventSetDefault) {
					elem186.write(oprot);
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, EventWrapper struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.Ev = new Event();
			struct.Ev.read(iprot);
			struct.setEvIsSet(true);
			BitSet incoming = iprot.readBitSet(15);
			if (incoming.get(0)) {
				struct.ID = iprot.readI64();
				struct.setIDIsSet(true);
			}
			if (incoming.get(1)) {
				org.apache.thrift.protocol.TList elem187 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
				struct.Events = new ArrayList<Event>(elem187.size);
				for (int elem188 = 0; elem188 < elem187.size; ++elem188) {
					Event elem189 = new Event();
					elem189.read(iprot);
					struct.Events.add(elem189);
				}
				struct.setEventsIsSet(true);
			}
			if (incoming.get(2)) {
				org.apache.thrift.protocol.TSet elem190 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
				struct.Events2 = new HashSet<Event>(2*elem190.size);
				for (int elem191 = 0; elem191 < elem190.size; ++elem191) {
					Event elem192 = new Event();
					elem192.read(iprot);
					struct.Events2.add(elem192);
				}
				struct.setEvents2IsSet(true);
			}
			if (incoming.get(3)) {
				org.apache.thrift.protocol.TMap elem193 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
				struct.EventMap = new HashMap<Long,Event>(2*elem193.size);
				for (int elem194 = 0; elem194 < elem193.size; ++elem194) {
					long elem196 = iprot.readI64();
					Event elem195 = new Event();
					elem195.read(iprot);
					struct.EventMap.put(elem196, elem195);
				}
				struct.setEventMapIsSet(true);
			}
			if (incoming.get(4)) {
				org.apache.thrift.protocol.TList elem197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
				struct.Nums = new ArrayList<java.util.List<Integer>>(elem197.size);
				for (int elem198 = 0; elem198 < elem197.size; ++elem198) {
					org.apache.thrift.protocol.TList elem200 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
					java.util.List<Integer> elem199 = new ArrayList<Integer>(elem200.size);
					for (int elem201 = 0; elem201 < elem200.size; ++elem201) {
						int elem202 = iprot.readI32();
						elem199.add(elem202);
					}
					struct.Nums.add(elem199);
				}
				struct.setNumsIsSet(true);
			}
			if (incoming.get(5)) {
				org.apache.thrift.protocol.TList elem203 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
				struct.Enums = new ArrayList<ItsAnEnum>(elem203.size);
				for (int elem204 = 0; elem204 < elem203.size; ++elem204) {
					ItsAnEnum elem205 = ItsAnEnum.findByValue(iprot.readI32());
					struct.Enums.add(elem205);
				}
				struct.setEnumsIsSet(true);
			}
			if (incoming.get(6)) {
				struct.aBoolField = iprot.readBool();
				struct.setABoolFieldIsSet(true);
			}
			if (incoming.get(7)) {
				struct.a_union = new TestingUnions();
				struct.a_union.read(iprot);
				struct.setA_unionIsSet(true);
			}
			if (incoming.get(8)) {
				struct.typedefOfTypedef = iprot.readString();
				struct.setTypedefOfTypedefIsSet(true);
			}
			if (incoming.get(9)) {
				struct.depr = iprot.readBool();
				struct.setDeprIsSet(true);
			}
			if (incoming.get(10)) {
				struct.deprBinary = iprot.readBinary();
				struct.setDeprBinaryIsSet(true);
			}
			if (incoming.get(11)) {
				org.apache.thrift.protocol.TList elem206 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
				struct.deprList = new ArrayList<Boolean>(elem206.size);
				for (int elem207 = 0; elem207 < elem206.size; ++elem207) {
					boolean elem208 = iprot.readBool();
					struct.deprList.add(elem208);
				}
				struct.setDeprListIsSet(true);
			}
			if (incoming.get(12)) {
				org.apache.thrift.protocol.TList elem209 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
				struct.EventsDefault = new ArrayList<Event>(elem209.size);
				for (int elem210 = 0; elem210 < elem209.size; ++elem210) {
					Event elem211 = new Event();
					elem211.read(iprot);
					struct.EventsDefault.add(elem211);
				}
				struct.setEventsDefaultIsSet(true);
			}
			if (incoming.get(13)) {
				org.apache.thrift.protocol.TMap elem212 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
				struct.EventMapDefault = new HashMap<Long,Event>(2*elem212.size);
				for (int elem213 = 0; elem213 < elem212.size; ++elem213) {
					long elem215 = iprot.readI64();
					Event elem214 = new Event();
					elem214.read(iprot);
					struct.EventMapDefault.put(elem215, elem214);
				}
				struct.setEventMapDefaultIsSet(true);
			}
			if (incoming.get(14)) {
				org.apache.thrift.protocol.TSet elem216 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
				struct.EventSetDefault = new HashSet<Event>(2*elem216.size);
				for (int elem217 = 0; elem217 < elem216.size; ++elem217) {
					Event elem218 = new Event();
					elem218.read(iprot);
					struct.EventSetDefault.add(elem218);
				}
				struct.setEventSetDefaultIsSet(true);
			}
		}

	}

}
