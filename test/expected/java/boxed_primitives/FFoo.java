/**
 * Autogenerated by Frugal Compiler (3.4.6)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package variety.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.workiva.frugal.FContext;
import com.workiva.frugal.exception.TApplicationExceptionType;
import com.workiva.frugal.exception.TTransportExceptionType;
import com.workiva.frugal.middleware.InvocationHandler;
import com.workiva.frugal.middleware.ServiceMiddleware;
import com.workiva.frugal.processor.FBaseProcessor;
import com.workiva.frugal.processor.FProcessor;
import com.workiva.frugal.processor.FProcessorFunction;
import com.workiva.frugal.protocol.*;
import com.workiva.frugal.provider.FServiceProvider;
import com.workiva.frugal.transport.FTransport;
import com.workiva.frugal.transport.TMemoryOutputBuffer;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TMessage;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;
import java.util.Arrays;
import java.util.concurrent.*;

public class FFoo {

	private static final Logger logger = LoggerFactory.getLogger(FFoo.class);

	/**
	 * This is a thrift service. Frugal will generate bindings that include a frugal
	 * Context for each service call.
	 */
	public interface Iface extends actual_base.java.FBaseFoo.Iface {

		/**
		 * Ping the server.
		 * 
		 * @deprecated don't use this; use "something else"
		 */
		@Deprecated
		public void Ping(FContext ctx) throws TException;

		/**
		 * Blah the server.
		 */
		public Long blah(FContext ctx, Integer num, String Str, Event ev
				nt) throws TException, AwesomeException, actual_base.java.api_exception;

		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, Long id, java.util.Map<Integer, String> req) throws TException;

		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str)
				throws TException, actual_base.java.api_exception;

		public Long param_modifiers(FContext ctx, Integer opt_num, Integer default_num, Integer req_num) throws TException;

		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type,
				java.util.Set<Long> set_type) throws TException;

		public Thing getThing(FContext ctx) throws TException;

		public Integer getMyInt(FContext ctx) throws TException;

		public A use_subdir_struct(FContext ctx, A a) throws TException;

		public String sayHelloWith(FContext ctx, String newMessage) throws TException;

		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException;

		public String sayAgain(FContext ctx, String messageResult) throws TException;

	}

	public static class Client extends actual_base.java.FBaseFoo.Client implements Iface {

		private Iface proxy;

		public Client(FServiceProvider provider, ServiceMiddleware... middleware) {
			super(provider, middleware);
			Iface client = new InternalClient(provider);
			List<ServiceMiddleware> combined = new ArrayList<ServiceMiddleware>(Arrays.asList(middleware));
			combined.addAll(provider.getMiddleware());
			middleware = combined.toArray(new ServiceMiddleware[0]);
			proxy = InvocationHandler.composeMiddleware(client, Iface.class, middleware);
		}

		/**
		 * Ping the server.
		 */
		@Deprecated
		public void Ping(FContext ctx) throws TException {
			logger.warn("Call to deprecated function 'Foo.Ping'");
			proxy.Ping(ctx);
		}

		/**
		 * Blah the server.
		 */
		public Long blah(FContext ctx, Integer num, String Str, Event ev
				nt) throws TException, AwesomeException, actual_base.java.api_exception {
			return proxy.blah(ctx, num, Str, event);
		}

		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, Long id, java.util.Map<Integer, String> req) throws TException {
			proxy.oneWay(ctx, id, req);
		}

		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str)
				throws TException, actual_base.java.api_exception {
			return proxy.bin_method(ctx, bin, Str);
		}

		public Long param_modifiers(FContext ctx, Integer opt_num, Integer default_num, Integer req_num) throws TException {
			return proxy.param_modifiers(ctx, opt_num, default_num, req_num);
		}

		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type,
				java.util.Set<Long> set_type) throws TException {
			return proxy.underlying_types_test(ctx, list_type, set_type);
		}

		public Thing getThing(FContext ctx) throws TException {
			return proxy.getThing(ctx);
		}

		public Integer getMyInt(FContext ctx) throws TException {
			return proxy.getMyInt(ctx);
		}

		public A use_subdir_struct(FContext ctx, A a) throws TException {
			return proxy.use_subdir_struct(ctx, a);
		}

		public String sayHelloWith(FContext ctx, String newMessage) throws TException {
			return proxy.sayHelloWith(ctx, newMessage);
		}

		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException {
			return proxy.whatDoYouSay(ctx, messageArgs);
		}

		public String sayAgain(FContext ctx, String messageResult) throws TException {
			return proxy.sayAgain(ctx, messageResult);
		}

	}

	private static class InternalClient extends actual_base.java.FBaseFoo.Client implements Iface {

		private FTransport transport;
		private FProtocolFactory protocolFactory;

		public InternalClient(FServiceProvider provider) {
			super(provider);
			this.transport = provider.getTransport();
			this.protocolFactory = provider.getProtocolFactory();
		}

		/**
		 * Ping the server.
		 */
		public void Ping(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("ping", TMessageType.CALL, 0));
			Ping_args args = new Ping_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("ping")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "Ping failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				}

		
			f (message.type != TMessageType.REPLY) {
					
			
		}Ping_result res res.read(iprot);
		

	}
		/**
		 * Blah the server.
		 */
		public Long blah(FContext ctx, Integer num, String Str, Event event) throws TException, AwesomeException, actual_base.java.api_exception {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("blah", TMessageType.CALL, 0));
			blah_args args = new blah_args();
			args.setNum(num);
			args.setStr(Str);
			args.setEvent(event);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("blah")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "blah failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					}

	
		throw returnedException;
				
	}
	if (message.type != TMessageType.REP	throw new TAppl}blh_result res = new b
	a
		es.read(iprot);
	iif(res.isStSccess
	)
		return res.suc
	}if(res.awe!=null)
	{
		throw res.awe;
	}if (res.api != null) {
		

		}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "blah failed: unknown result");
		}
		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, Long id, java.util.Map<Integer, String> req) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("oneWay", TMessageType.ONEWAY, 0));
			oneWay_args args = new oneWay_args();
			args.setId(id);
			args.setReq(req);
			

		oprot.writeMessageEnd();
			this.transport.oneway(ctx, memoryBuffer.getWriteBytes());
		}
		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str) throws TException, actual_base.java.api_exception {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("bin_method", TMessageType.CALL, 0));
			bin_method_args args = new bin_method_args();
			args.setBin(bin);
			args.setStr(Str);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("bin_method")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "bin_method failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
						eturnedExcepton= new TTransportExc

	p
		}
				
		
	}if (message.type	throw new TApplication}
	bre.read(ipot;prot.readMessai	return res.success;	

		if (res.api != null) {
				throw res.api;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "bin_method failed: unknown result");
		}
		public Long param_modifiers(FContext ctx, Integer opt_num, Integer default_num, Integer req_num) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("param_modifiers", TMessageType.CALL, 0));
			param_modifiers_args args = new param_modifiers_args();
			args.setOpt_num(opt_num);
			args.setDefault_num(default_num);
			args.setReq_num(req_num);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("param_modifiers")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "param_modifiers failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "param_modifiers failed: invalid message type");
			

		param_modifiers_result res = new param_modifiers_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "param_modifiers failed: unknown result");
		}
		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type, java.util.Set<Long> set_type) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("underlying_types_test", TMessageType.CALL, 0));
			underlying_types_test_args args = new underlying_types_test_args();
			args.setList_type(list_type);
			args.setSet_type(set_type);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("underlying_types_test")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "underlying_types_test failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			

			throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "underlying_types_test failed: invalid message type");
			}
			underlying_types_test_result res = new underlying_types_test_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "underlying_types_test failed: unknown result");
		}
		public Thing getThing(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			ogeThing_args ars  new getThing_args();rgs.write(oprot);
	prot.writeMessageEnd();Trnsport respose= this.transport.request(ctx, memoryBuffer.ge
	W
		
	Pprot.readResponseHeader(
	Tif(!message.nam.euals("getThing")) {
				

	}if (message.type	TApplicationException 	iprot.readMessageEnd();
			if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {	

			}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "getThing failed: invalid message type");
			}
			getThing_result res = new getThing_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getThing failed: unknown result");
		}
		public Integer getMyInt(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("getMyInt", TMessageType.CALL, 0));
			getMyInt_args args = new getMyInt_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());
FPotocol iprot  tis.protocolFactory.eprot.readResponseHeader(ctx);T

	if (!message.name.equals("getMyInt")) {	throw new TAppl}if(message.type == TMes			TApplicationException e = TA	iprot.readMessageEnd();
		

			if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "getMyInt failed: invalid message type");
			}
			getMyInt_result res = new getMyInt_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getMyInt failed: unknown result");
		}
		public A use_subdir_struct(FContext ctx, A a) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("use_subdir_struct", TMessageType.CALL, 0));
			use_subdir_struct_args args = new use_subdir_struct_args();
			args.setA(a);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("use_subdir_struct")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "use_subdir_struct failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
			

			iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "use_subdir_struct failed: invalid message type");
			}
			use_subdir_struct_result res = new use_subdir_struct_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "use_subdir_struct failed: unknown result");
		}
		public String sayHelloWith(FContext ctx, String newMessage) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("sayHelloWith", TMessageType.CALL, 0));
			sayHelloWith_args args = new sayHelloWith_args();
			args.setNewMessage(newMessage);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			Tif (!message.name.equals("sayHelloWith")) {

		

		}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "sayHelloWith failed: invalid message type");
			}
			sayHelloWith_result res = new sayHelloWith_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sayHelloWith failed: unknown result");
		}
		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("whatDoYouSay", TMessageType.CALL, 0));
			whatDoYouSay_args args = new whatDoYouSay_args();
			args.setMessageArgs(messageArgs);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			

		if (!message.name.equals("whatDoYouSay")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "whatDoYouSay failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "whatDoYouSay failed: invalid message type");
			}
			whatDoYouSay_result res = new whatDoYouSay_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "whatDoYouSay failed: unknown result");
		}
		public String sayAgain(FContext ctx, String messageResult) throws TException {
			TFPotocol oprot  tis.protocolFactory.getProtocol(memoryBuffer);o

	oprot.writeMessageBegin(new TMessage("sayAgasayAgain_args arargs.setMessageResult(mars.write(oprot);prot.writeMessageEn
T		

		if (!message.name.equals("sayAgain")) {

		}

			TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
			

			}
			throw returnedException;
		}
		if (message.type != TMessageType.RE
			throw new TApplicationException(TAppli
		}
		sayAgain_result res = new sayAgain_result();
		res.read(iprot);
		iprot.readMessageEnd();
		if (res.isSetSuccess()) {
			return res.success;
		}
		throw new TApplicationException(TApplicationExcepti
		
		
	

	

	
		private Iface handler;

		public Processor(Iface iface, ServiceMiddleware... middleware) {
			super(iface, middleware);
			handler = InvocationHandler.composeMiddleware(iface, Iface.class, middleware);
		}

	protected
		java.util.Map<String, FProcessorFunction> processMap = s
		processMap.put("ping", new Ping(
		processMap.put("blah", new Blah());   
		

		processMap.put("param_modifiers", new Param_modif

		processMap.put("getThing", new GetThing());
			processMap.put("getMyInt", new GetMyInt());
			processMap.put("use_subdir_struct", new Use_subdir_struct());
			processMap.put("sayHelloWith", new SayHelloWith());
			processMap.put("whatDoYouSay", new WhatDoYouSay());
			processMap.put("sayAgain", new SayAgain());
			return processMap;
		}

		protected java.util.Map<String, java.util.Map<String, String>> getAnnotationsMap() {
			java.util.Map<String, java.util.Map<String, String>> annotationsMap = super.getAnnotationsMap();
			java.util.Map<String, String> PingMap = new java.util.HashMap<>();
			PingMap.put("deprecated", "don't use this; use \"something else\"");
			annotationsMap.put("ping", PingMap);
			return annotationsMap;
		}

		@Override
		public void addMiddleware(ServiceMiddleware middleware) {
			super.addMiddleware(middleware);
			handler = InvocationHandler.composeMiddleware(handler, Iface.class, new ServiceMiddleware[]{middleware});
		}

		private class Ping implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				logger.warn("Deprecated function 'Foo.Ping' was called by a client");
				Ping_args args = new Ping_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "Ping", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				Ping_result result = new Ping_result();
				try {
					handler.Ping(ctx);
				} catch (TApplicationException e) {
				
		

				oprot.writeMessageEnd();

				return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "ping", "Internal error processing Ping: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
					

				result.write(oprot);

				oprot.writeMessageEnd();		o
		r
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
				thro 
		(TApplicationExceptio
		)
				}
			throwe
		;
		
			}
		}
		
		
			
			
			
			vate class Blah implemen
			
			blic vo
		bah_ars
		 args = new b
		a
			ry {
				rgs.read(iprot);
						
						
			 
			iprot.re
					e = writeAplicationExc
		p
			}
				hrow e;
				
				
				rot.readMessageEnd();
				ah_result result = new blah_r
			ry {
				esult.success = handler.blah(ctx, args.num, args.Str, args.even
					sult.setSuccessIsSet(true);
							
							
				c
				esult.aw
			 
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
		}

			try {
				oprot.writeResponseHeader(ctx);
		
	

				oprot.getTransport().flush();

				if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
					throw (TApplicationException) writeApplica
				}
				throw e;
			}
			
			
				
						
			
			vate cla
		

		oneWay_args args = new 
		try {
			args
			 catch (TException e) {
			iprot.readMessageEnd();
			throw e;
			
		
			prot.readMessageEnd();
			andler.oneWay(ctx, args.id, args.req);
			
			
			
			vate cl
		
			blic void process(FContext 
				n_method_args args = new bin_method_args();
						
						
			r
			args.rea
		}
			iprot.readMessageEnd();
			synch
				e = writeApplicationException(c
				
				hrow e;
				
				
			prot.readMessageEnd();
				n_method_result result = new bin_method_result();
					 {
							
							
				e
				esult.se
			 
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class Param_modifiers 
				
						
						
			b
			aram_mod
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				r
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class Underlying_types
				
						
						
			b
			nderlyin
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				d
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class GetThing impleme
				
						
						
			b
			etThing_
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				t
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class GetMyInt impleme
				
						
						
			b
			etMyInt_
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				t
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class Use_subdir_struc
				
						
						
			b
			se_subdi
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				e
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class SayHelloWith imp
				
						
						
			b
			ayHelloW
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				y
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class WhatDoYouSay imp
				
						
						
			b
			hatDoYou
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				a
				y {
			r
			
		
	

			e.write(oprot);

			oprot.getTransport().flush();
			return;
		} cat
			synchronized (WRI
				e = (TApplicationExcep
			}
			throw e;
				
						
			y
			try {
			

				result.write(oprot);
				oprot.writeMessageEnd();
				opr
			} catch (TTransportException e) {
				if (e.getType() == TTranspor
					throw (TApplicationException) wr
				}
				throw e;
			}
			
			
			
		
			vate class SayAgain impleme
				
						
						
			b
			ayAgain_
		t
			args.read(iprot);
			 catc
				prot.readMessageEnd();
				ynchronized (WRITE_LOCK) {
				e = writeApplication
				
				hrow e;
			
				
					ot.readMessageEnd();
							
							
				y
				y {
			r
			
		
	

	

				oprot.getTransport().flush();
		
				return;
			

					e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "sayAgain", "Intern
				}
				throw e;
			}
		

				
	 * oprot.writeResponseHeader(ctx);
	 * 
	 
					oprot.writeMessageBegin(new TMessage("sayAgain", TMessageTy
			

					oprot.getTransport().flush();

					if (e
						throw (TApplicationException) writeApplicationExc
					}
				
			

		}
		 
		 
		
			 
			ic stati
				ate static f
			
		

		tat
		 chemes.put(StandardScheme.class, new Ping_argsStandardSchemeFactory()); emes.
		 * ut(TupleSchem
		 
		
			* The set of fields this struct contains,
			blic enum _Fields i
				plements org.apache.thrift.TFieldIdEnum {
			
		

		
		 tatic {
		 fo
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant tha

		public static _Fields findByThriftId(int fi
			switch(fieldId) {
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 *
	  */
	 pu
			return byName.get(name);
		

		private final short _thriftI
		private final String _field
	

			_thrift
			_fieldName = fieldN
		

		public short getThriftFieldId() {
			return _thriftI
		}
	

			return _fieldName;
		}
		
		
	/

	}
	 * 
	 * 
	 
	
		**
			 Performs a deep copy on <i>other</i>
		*

		
		
		ublic Ping_args deepCopy() {
		

	
	@Override
		ublic void clear(
			
		
			blic void setFieldValue(_Field s fiel
		switch (field
		

	
		ublic Object getF
			witch (field)

		throw new Il
	}

	/** Retur
	public boolean isSet(_F
		if (field == null) {

		}
	

		}
		throw new IllegalStateException();
		
			
		O

		if (that == null)

		if (that 
		

	}
		
	p

			return false;
		
		

	
		Override
	p

	
		return list.hashCode();
		
		

		ublic int compa
		if (!getClass().equal
		

	
		int lastComparison = 0;
		
		

	
		ublic
			eturn _Fields.findByThriftId(fieldId);
					
		
			
		u
		

	
		ublic
			chemes.get(oprot.getScheme()).getScheme().write(oprot, this);
			// 
			
					
		
			verride
		u
		

	
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IOExcep
				y
				/ it doesn't seem lik
			r
			 catch (org.apache.thr

			
			// 
			
		

		public Ping_argsStandardScheme getScheme() {
				
			return new Ping_ar

			
			
			ivate static class Ping
		

		

			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apach
			
		

					default:

				}
				iprot.readFieldEnd();
				
			}
			

			// check
			struct.validate();
				
			
		

		

	

			oprot.writeStructEnd();
		
		}
			

	
	private 
		public Ping_argsTupleScheme getScheme() {
			return new Ping_argsTupleScheme();
		

	
	 * 
	 * 
	 
	private static class Ping_argsTupleScheme extends TupleScheme<P
		

		public void write(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) thr

		}
			
				verride
			u
			

		
		 
		 
		
			 
			ic stati
				ate static f
			
		

		tat
		 chemes.put(StandardScheme.class, new Ping_resultStandardSchemeFactory() emes.
		 * ut(TupleSchem
		 
		
			* The set of fields this struct contains,
			blic enum _Fields i
				plements org.apache.thrift.TFieldIdEnum {
			
		

		
		 tatic {
		 fo
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant tha

		public static _Fields findByThriftId(int fi
			switch(fieldId) {
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		 *
	  */
	 pu
			return byName.get(name);
		

		private final short _thriftId;
		private final String _fieldNa
	

			_thrift
			_fieldName = fieldN
		

		public short getThriftFieldId() {
			return _thriftI
		}
	

			return _fieldName;
		}
		
		
	/

	}
	 * 
	 * 
	 
	
		**
			 Performs a deep copy on <i>other</i>
		*

		
		
		ublic Ping_result deepCopy() {
		

	
	@Override
		ublic void clear(
			
		
			blic void setFieldValue(_Fields  field,
		switch (field
		

	
		ublic Object getF
			witch (field)

		throw new Il
	}

	/** Retur
	public boolean isSet(_F
		if (field == null) {

		}
	

		}
		throw new IllegalStateException();
		
			
		O

		if (that == null)

		if (that 
		

	}
		
	p

			return false;
		
		

	
		Override
	p

	
		return list.hashCode();
		
		

		ublic int compa
		if (!getClass().equal
		

	
		int lastComparison = 0;
		
		

	
		ublic
			eturn _Fields.findByThriftId(fieldId);
					
		
			
		u
		

	
		ublic
			chemes.get(oprot.getScheme()).getScheme().write(oprot, this);
			// 
			
					
		
			verride
		u
		

	
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields

		
				
			
			ivate void writeObject(j
			ry {
				rite(new org.apache.thrift.protocol.T
				catch (org.apache.thrift.TException te) {
					row ne
				
				
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IOExcep
				y
				/ it doesn't seem lik
			r
			 catch (org.apache.thr

			
			// 
			
		

		public Ping_resultStandardScheme getScheme() {
				
			return new Ping_re

			
			
			ivate static class Ping
		

		

			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.
			
		

					default:

				}
				iprot.readFieldEnd();
				
			}
			

			// check
			struct.validate();
				
			
		

		

	

			oprot.writeStructEnd();
		
		}
			

	}
			 
	
			 
	private static class Ping_resultTupleSchemeFactory implements SchemeFactory {
			 

			return new Ping_resultTupleScheme();
		}
		
		
	p

		@Override
		public void write
			TTupleProtocol op

		}
	 * 
	 * 
	 
	
		@Override  public void  read(org. 	TTupleProtoc ol iprot = }

		

		
			
				ic static class blah_args implements org
			i
		

		riv
		 ivate static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new
		 
		rivate static final Map<Class<? extends IScheme>, S
			atic { 
			hemes.put(Stan
				emes.put(Tu
			
				
			lic Integer num;
				ic String Str
			lic Even
				The set of f
			b
		N

		EVE
		  
		 * 
		 ri
		
			tatic {
			for (_Fields field 
				 EnumSet.allOf(_Fields.class)) {
				byName.put(fi
			

		
		 **
		 * 
		 */
			ublic static _Fields fin
			

					return NUM;
				case 2: // STR

				case 3: // EVENT
					return EVENT;
				default:
			

		}
			
		/

		 * if it is not found.
			*/
		p
		

			return fields;
		}
	

		/**
		

		public static _F	return  } 
		private
		private final S
		
		_Fields(short t
			_thriftId = thrift
		

	
	 public short getThriftFieldId() {
	 	r
		}
		
		public String getFiel
			return _fieldName;
			
		
		
			 isset id assignments
		u
	}

	public blah_args(
		Integer num,
		

		this();
		this.num = num;
		this.Str = Str;
		this.event = 

		

		* Performs a deep 

	p

			this.num = other.nu
		}
		

		}
		if (other.isSet
			this.event = new 
		}
	}

	public blah_args deepCop
		return new blah_args(this);
	}

	@Ov
	 * rride
	 * 
	 
	public void clear() {
		this.num = null;
	

	
		this.event = null;
	

	
		ublic Integer ge
		

	
		ublic blah_args
		this.num = n
		

	
		ublic void unset
		

	
	 * 
	 * 
	 
	/** Returns true if field n
		ublic boolean isSetNum()
		

	
		ublic void se
			f (!value) {
			
		

	
		ublic String getSt
		

	
		ublic blah_args set
		this.Str = S
		

	
		ublic void unsetSt
		

	
	 * 
	 * 
	 
	/** Returns true if field Str
		ublic boolean isSetStr() {
		

	
		ublic void se
			f (!value) {
			
		

	
		ublic Event getE
		return th
			
				
			blic bla
				is.event = event ;
			e
			

		ublic voi
			his.event = null;
				
			
				 Returns true i f field
			b
			eturn 

		
			blic void setEventIs
				 (!value) {
			this.eve
				 
			
			

		s
		

				unsetNum();
			} else {
				setNum(
			}

		
			ase STR:

				unsetStr(
			} else {

			
			break;
	

			i
	 *  (value == null) {
	 * 
	 
				unsetEvent();
			} else {
				setEvent((Event)value);
			

		
		}
			
		
			blic Object getFie
		switch (fie
			ase NUM:
			
		
		

	
		case EVENT:
			return getEvent(
			
		}
			hrow new IllegalStateException ();
		
	

	public boolean isSet(_Fields field) {
		if (field == null
			throw new Ill

		
		switch (field) {
		case NUM:
			return isSetNum();
				se STR:
			return isSetStr();
				se EVENT:
			

		throw new IllegalStateException();
		
		
			verride
				lic boolean e
			f (that == null)
				eturn false;
		i

		return false;
		
		
			blic boolean equals(blah_args that) {
				 (that == nul
			return false;
				
		b

		if (this_pre
		

			if (!th
				return false;
		}

		boolean this_present_Str = 
		boolean that_present_S
		if (this_present
			if (!(this_pre

			if (!this.Str.equals(that.Str))
				return false;
		}
			

		boolean that_present_event = true && that.isSet
		if (this_present_event |
			if (!(this_presen
				return false;

				return false;
		

		return t
	}
		
			verride
		u

		

		list.add(present_num);
		if (present_num)
			list.add(num);
		
		boolean present_S
			ist.add(present_Str);
			f (present_Str)
				ist.add(Str);
			
		b
		list.add(present_event);
		if (present_event)
			list.add(event);
		
		return list.hashC
			
			
				erride
			b
		i
			return getClass().getName().compareTo(other.getClass().getName());
		}
			
		i
		
			astComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
			f (lastComparison != 0) {
				eturn lastComparison;
			
		i
			lastComp
		

			}
		}
		

			return lastComparison;
		}
		

			if (lastComparison != 0) {
				return lastComparison;
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = 
			if (lastComparison 
				return lastC
			}
			
		}
		return 0;
			
		
			blic _Fields fieldFo
		r
		
		
			
		ublic void read(org.
		schemes.get(iprot.getSche
			
		
			blic void write(org.ap
		s
		
		
		Override
	p

		boolean first = true;
		
		sb.append("num:");
		if (this.num == null
			sb.append("null")
		}
		

		first = false;
		if (!
			b.append("Str:");
					
		if (this.Str == null) {
			sb.append("null");
		}
		

		first = false;
		if (!
			b.append("event:");
			// 
			f (this.event == null
			sb.append("null");
					
		} else {
			sb.append(this.event);
		}
		

		return sb.toString();
		
			
		u
		

		if (event != null) {

		}
				
			
			
			ivate void wri
				y {
				rite(new org.apache.thrift.protocol.TCompactProtocol(new org.apa
					atch (
				h
				
				
					
						e void readObject(java.io.Obj
						
					it doesn
						(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.
					t
					ow new
				
					
						
						e static class blah_argsS
					ic blah_
						rn new blah_argsStandardScheme();
					
					
				
					te static class blah_argsStandardScheme extends StandardScheme<bla
						
						c void read(org.apache.th
						apache.thrift.protocol.TFie
					ot.readS
						e (true) {
					h
					 (sche
				break;
					
				s
					case 1: // NUM
				
							struct.num = iprot

						} else {
			// 
							org.apache.thr
			

					case 2: // STR
				
						if (schemeField

							struct.setStrIsSet(true);
						} else {
							org.apache.thrift.pro
						}
						break;
					case 3: // EVENT
						if (schemeField.type == org.apache.t
							struct.event = new Event(
							struct.event.read(iprot)
							struct.setEventIsSe
				
							org.apache.thrift.proto
						}
						break;
					default:
				
				}
				iprot.readFieldEnd();
			

	

			struct.validate();
		}
			
		p
		

			oprot.writeStructBegin(STRUCT_DESC);

			Integer 
			if (elem257 == null) {
				
				elem257 = 0;
			}
			oprot.writeI32(elem257);
				prot.writeFieldEn
			i
				oprot.writeFieldBegin(S
				String elem258 = 
				
				oprot.writeFieldEnd();
				
			i
				oprot.writeFieldBegin(EVENT_FIE
				struct.event.write(opro
				oprot.writeFieldEnd();
				
			o
			oprot.writeStructEnd();
				
				
			
			
				vate static class blah_arg
			u
			

		
		
				
			ivate static class blah_argsTupleScheme exten
			
			Override
				blic void write(org.apache.th
				TupleProtocol oprot = (TT
			B
			if (struct.isSetNum())
				optionals.set(0);
				
			i
				optionals.set(1);
				
				f (struct.isSetEvent()) {
				optionals.set(2);
			}
			

		

	

				oprot.writeI32(elem259);
		
			}
			

				String elem260 = struct.Str;
			 
				oprot.writeString(elem260);
			 
			}
			 

				struct.event.write(oprot);
			}
		}
		
		

			TTupleProtocol ipr
			BitSet incoming = iprot.re
			if (incoming.get(0)) {

				
	 * truct.num = iprot.readI32();
	 * 
	 
				struct.setNumIsSet(true);
			}  	if (incomi ng.get(1)) 		struct.St r = iprot	

			if (incoming.get(2)) {

				struct
				struct.setEventIsSet(true);
				
			
		

		
		 
		 
		blic static class blah_result implements org.apache
			ivate  static fina
			
				ate static fina
			vate static fi
				ate static 
			
				ate static 
			tic {
				emes.put(Sta
			c
		

		ubl
		 blic AwesomeException awe; ic ac
		 * ual_base.java
		 * 
		ublic enum _Fields implements org.apache.thrift.TFieldIdEn
			UCCESS((short)0, "success"),
			WE((short)1, "awe")
				
			PI((short)2, "
		;

		pri
		 
		 ta
			for (_Fields field : EnumSet.allOf(_Fields.cla
				byName.put(field.getFie
			

		
		/**

		 */
			ublic static _Fields 
			switch(fieldId) {
			

				case 1: // AWE
					return AWE;
			

				default:
					return null;
			
		

		/**
		 * Find the _Fields constant that matches field
		 * if it is not found.

		 */
		

			if (fields == nul	return field } 
		/**
		 * Find the _Fields con
		 */
		public static _
			return byName.
		

		pr
	 private final String _fieldName;
	 
		_Fields(short thriftId, String fieldNa
			_thriftId = thriftId;
			_fieldName = fieldName;
		}
			
		p
			return _thriftId;
			
		
		

		}
		
	

	public bl
	}
		
		ublic blah_result(

		AwesomeException

		this();

		

	}
		
	/

	 */
		ublic blah_result(blah_
		if (other.isSetSuccess
			this.succes
		

			this.awe = new AwesomeExce
		}
		

		}
	 * 
	 * 
	 
	}
		
	p

	}
		
	@

		this.success = null;
		
		

		this.api = null;
		
		
	

		return this.success;
		
	

		th
	 * s.success = success;
	 * 
	 
		return this;
		
	

		this.success = null;
		
			
		*
	p

	}
		
	p

			this.success = null;
		}
		
	

		return this.awe;
		
	

		th
	 * s.awe = awe;
	 * 
	 
		return this;
		
	

		this.awe = null;
		
			
		*
	p

	}
		
		ublic void se
			f (!value) {
				his.awe = null;
			
				 
			
			blic a

		
			
				lic blah_re
			his.api 
				turn this; 
			
			

		this.api 
			
				
			* Return
				lic boolean isSetApi() { 
			e
			

		u
		

		}
		
		
			blic void setFieldVa

		case SUCC
			if (value == nul

			} else {
				setSuccess((Lon

			
		
		

				
	 * nsetAwe();
	 * 
	 
			} else {
				setAwe((AwesomeExc
			}
			

		case API:
			if (value ==
				unsetApi();
			} else {
				setApi((actual_ba
			}
			break;
		
		}
	}

	public Ob
		switch (field) {
		case SUCCESS:
			return getSuc
		
			ase AWE: 
			return getAw
	

			return getApi();
		
			

		
		
		** Returns true if field corresponding to fieldID i
			blic boolean isSet(_Fields field) {
				 (field == nu
			throw new IllegalArgumentExceptio
				
		

		case SUCCESS:
			return isSetSuccess();
		case AWE:
			return isSetAwe();
				se API:
			return isSetApi();
				
		t

		
		Override
		ublic boolean equals(Object that) {
			f (that == null)
				eturn false;
			f (that instanceof blah_result)
				eturn this.eq
		r

		
	p

			return 
	
		boolean this_present_success = true && this.

		if (this_present_success || tha
			if (!(this_present_succes
				return false;
			if (!this.success.

		}
		
		boolean this_pre
			oolean that_pr

			if (!(this_present_awe && that_present_awe
				return false;
			if (!this.awe.e
				return false;

		
		

		if (this
			if (!(this_present_api && that_present_
				return false;
			if (!this.api.equals(that.api))
			

		

		
		
			verride
		u
		List<Object> list = n
			
			oolean present_success = t
				st.add(present_success
			f
			
		
		boolean present_awe = true
			ist.add(present_awe);
		i
			list.add(awe);
			
			oolean present_api = true 
				st.add(present_api);
			f
			
		
		return list.hashCode();
			
		
		Override
			blic int compareTo(blah_result other) {
			f (!getClass().equals(othe
				eturn getClass().getNa
			
		
		int lastC
	

		if (lastComparison != 0) {
			return lastComparison;
		

			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
			if (lastComparison != 0) {
		

		}
		lastComparison = Boolean.valueOf(isSetAwe()).compareTo(other.i
		

		}
		if (isSetAwe()) {
			lastComparison = org.apache.thrift.TBaseHelper.compa
			if (lastComparison !

			}
		}
		lastComparison
		if (lastCom
			arison != 0) {
			return lastCompar
		}
			f (isSetApi()) {
			lastCom
			if (lastComparison !
			
			}
		}
			
		return 0;
		
			
		ublic _F
			eturn _Fields.findBy
		
		
		ublic void read
		schemes.get(iprot.get
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot
		schemes.get(oprot.getScheme(
		
		
			verride
		u
		StringBuilder sb =
			oolean first = 
		
		

			sb.append("null");
		} els
			sb.append(this.success);
					
		}
			irst = false;
		i
		

			sb.append("null");
		} els
			sb.append(this.awe);
			// 
			
			irst = false;
					
		if (!first) sb.append(", ");
			b.append("api:");
		i
		

			sb.append(this.api);
		}
			irst = false;
		s
		

	

		// check for required fields
				
			/ check for sub-struct validity
			f (awe != null) {
			awe.validate()
				
				 (api != null) {
					i.vali
				
				
				
					te void writeObject(java.io.ObjectOutputStream out) throws java
						
						e(new org.apache.thrift.proto
					tch (org
						w new java.io.IOException(te);
					
					
				
					te void readObject(java.io.ObjectInputStream in) throws java.io.IO
						
						t doesn't seem like you
						(new org.apache.thrift.pr
					tch (org
						w new java.io.IOException(te);
					
					
				
					te static class blah_resultStandardSchemeFactory implements Scheme
						c blah_resultStandardScheme getScheme() {
						rn new blah_resultStand
						
					
						
					t
					
				lic void
					.apache.thrift.protocol.TField schemeField;
				p
				hile (true) {
				
				if (schemeField.type 

				}
			// 
				switch (schemeFie
			

							struct.success = iprot.readI64();
				
							struct.setSucc

							org.apache.thrift.protocol.TProt
						}
						break;
					case 1: // AWE
						if (schemeField.type =
							struct.awe = new Aw
				
							struct.setAweIsSet(tr
						} else {
							org.apache.thrift.pro
						}
				
					case 2: // API
						if (schemeField.type == org.apache.t
							struct.api = new actu
							struct.api.read(ipr
				
						} else {
							org.apache.thrift.p
			

		

				}
				iprot.readFieldEnd();
			}
			
	

			struct.validate();

		
		public void write(org.apache.thrift.protocol.TProtocol oprot, blah_result struct
				 throws org.apache.thrift.TException 
			struct.validate();
			
			oprot.writeStructBegin(STRUC
				f (struct.isSetSu
				
				Long elem261 = struct.s
				if (elem261 == nu
				
				}
				oprot.writeI64(el
				
			}
			if (struct.awe != null) {
				oprot.writeFieldBegin(AWE_FIEL
				struct.awe.write(oprot);
				
			}
				f (struct.api != null) {
				
				struct.api.write(oprot)
				oprot.writeFieldEnd();
			}
			

		}
		
				
			
			
			ivate static class bla
				blic blah_resultTupleScheme getSc
				eturn new blah_resultTupleSch
			
			
				
				vate static class blah_
				
			O
			ublic void write(org.a
				TupleProtocol oprot = (TTupleProtocol) prot;
				itSet optionals = new B
				f (struct.isSetSuccess())
				
			

		

	

			}
		
			oprot.writeBitSet(optionals, 3);
			

				Long elem262 = struct.success;
			 
				if (elem262 == null) {
			 

				}
				oprot
			}
			if (struct.isSetAwe()) {
		

			if (struct.is
				struct.api.write(oprot);

			}
	 * 
	 * 
	 
		}
		  @Override p

			BitSet incoming = iprot.readBitSet(3);

				struct
				struct.setSuccessIsSet(true);
				
			i
			

				s
		 }
		 if
				struct.api = new actual_base.java.api_exception()
				struc t.api.read(
			struct.setApi
				
			
				
			
				
			
		

		riv
		  ate s
		 * atic final or
		 iv
		
			ivate static final Map<Class<? extends IS
			atic {
				
			chemes.put(Sta
		s

		
		 blic Long id;
		 bl
		** The set of fields this struct contains, alon
			blic enum _Fields implem
		I

		;
		

		
			tatic {
			for (_Fields field : En
			

		}
			
		/

		 */
			ublic static _Fiel
			
		

				case 2: // REQ
					return REQ;
				default:

					return null;
		

	/**  * Find the _Fields constant that mat
		 * if i
		 */
		public static _Fi
			_Fields fields
		

		}
	 
	 /*
		 * Find the _Fields constant that matc
		 */
		public static _Fiel
			return byName.get(name
			 
		
		

	
		_Fields(short thriftId, Strin
		

		}
	
		public short getTh
			return _thri

		

		

	}
		
	/

	}
		
		ublic oneWay_args
		Long id,
		

		this.id = id;
		this.req = req;
	}

	/**
	 * 
	 * 
	 
	 * Performs a deep copy on
		*/
	p

			this.id = other.id;
		}
		

			for (Map.Entry<Integer,
				Integer elem265 = elem263.getKey();
		

			}
		}
			 
		
		ublic oneWay_args deepC
		

	
		Override
	p

	
		this.req = null
		
	}

	public Long getId() {
		return this.id;
	}

	pub
	 * ic oneWay_args setId(Long id) {
	 * 
	 
		this.id = id;
		return this;
	}

	public void unsetId() {
		this.id = nul
			
		
	/

		return this.id != null;
		
		
			blic void setIdIsSet
				 (!value) 
			this.id 
				 
			
			

		return (t
			
				
			blic voi
				 (this.req == null) { 
			t
			

		
	

		return this.req;
		
		
			blic oneWay_arg

		return th
			

		u
		this.req = null;
	}

	/**
	 * Returns true if field req is set (has been assigned a value) and false oth
	 * rwise */
	 
	public boolean isSetReq() {
		return this.req != n
			
		

		if (!value) {
			this.re
			
		
			
		u
		switch (field) {
		

				unsetI
			} else {
				setId((Long)val
			}
			break;
			 
		case REQ:
		

			} else {
				setReq((java.ut
			}

		
		}
		
			
				lic Object ge
			witch (field) {
				se ID:
			

		case REQ:
			return getReq();
		
			
				row new Illeg
			
				
		*

		if (field ==
		

	
		switch (field) {
		case ID:

		case REQ:
			return isSetReq();
		}
			hrow new Ille

		
		Override
		ublic boolean eq
			f (that == nul

		if (that instanceof one
		

	}
	
		ublic boolean equals(oneWay_args that) {
			f (that == null)
			

		boolean this_present_id

		if (this_present_id || that_present_id) {
			if (!(this_present_id && 
				return false;
			
				return false;
			
			
				olean this_present_req
			o
		i
			if (!(this_present_req && that_present_req))
				return false;
			if (!this.req.equals(t
			
		}
			
			eturn true;
				
			
		O
		ublic int
		

		boolean present_id = true && (isSetId()
		list.add(present_id);
		

	
		boolean present_req = true && (isSetReq());
		

			list.add(req);
		
		

	
	@Override
		ublic int compareTo(oneWay_args other) {
		if (!getClass().equal

		}
		
		int lastCompar
		
			
		lastComparison = B
		if (lastComparison != 0
			return lastCompari
		}
			f (isSetId()) {
			
			if (lastCompa
				return lastCo
			}
		

		if (lastComparison != 0) {
			return lastComparison;
		}
		

			if (lastComparison != 0) {
				ret
			}
					
		}
			eturn 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
			
			// 
			blic void read(org.ap
			chemes.get(iprot.getScheme()).getScheme().read(iprot,
					 this);
		
			
		u
		

	
		Override
			blic String toString() {
		S
		

		sb.append("id:");

			sb.append("null");
				
			 else {
			sb.append(this.id);
			
				rst = false;
				 (!first) sb.append(", ");
					append
				 
				b.append("null");
				lse {
					append(this.req);
						
						 = false;
					ppend(")
						n sb.toString();
					
					
				ic void valida
					heck for required fields
						eck for sub-struct validity
						   
						
							 void writeObject(java.io.Obje
							
							(new org.apache.thrift.protocol.T
						c
						w new java.io.IOExc
						
					
						
					t
					{
				 it does
					d(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift
				c
				hrow new java.io.IOEx
			
			

			ivate static class oneWay_argsStandardSchemeFactory implements SchemeFactory 
			// 
			ublic oneWay_argsS
			

		
				
			

			
			ublic void read(org.apache.thrift.pro
			org.apache.thrift.protoco
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.read
				if (schemeField.type == org.apache.thr
					break;
						
				}
					witch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.
							struct.id = iprot.readI64
					
						} else {
							org.apache.thrift.p
				
						break;
					case 2: // REQ
			

		

								Integer elem269 = iprot.readI32();
								String elem268 = iprot.readString();
								struct.req.put(elem269, elem268
			
		

						} else {

						}
						break;
				
					default:
						org.apache.thrift.protocol.TP
				}
				iprot.readFieldEn
			}
			iprot.readStructEnd();
				
			/
			struct.validate();
			
				
				blic void write(org.apac
			s
			
				prot.writeStructBegin(STRUCT_DESC)
				prot.writeFieldBegin(ID_FIELD_DESC);
					ng elem270 = struct.id;
					 (elem270 == null) {
					lem270 = 0L;
					
				p
			o
			

				oprot.w
				for (Map.Entry<Integer, String> elem271 : struct.req.entrySet()) {
				
					Integer elem272 = elem271.getKey();
					if (elem272 == null) {
						elem272 = 0;
					}
					oprot.writeI32(elem272)
				
					oprot.writeString(el
				}
						
				oprot.writeMapEnd();   
				oprot.writeFieldEnd();
					
					rot.writeFieldStop();
					rot.writeStructEnd();
				
				
			
		

		

	


		
	private static class oneWay_argsTupleScheme extends TupleScheme<oneWay_args> {
			

		@Override
			 
		public void write(org.apache.thrift.protocol.TProtocol prot, oneWay_args struct) throws org.apache.thrift.TExceptio
			 { 

			BitSet optionals = new BitSet();
			if (st
				optionals.set(0);
			}
		

			}
			oprot.writeBitSe

			i
	 *  (struct.isSetId()) {
	 * 
	 
				Long elem274 = struct.id;
				if (elem2 74 == null 			elem274  = 0L;	

			}

				oprot.
				for (Map.Entry<Integer, String> elem275 : struct.re
					Integer elem276 = elem275.getKey();
				
			

					
		 		String elem277 = elem275.getValue();
		 		
				}
			} 
			
				
			verride
				lic void re
			TuplePro
				tSet incomin
			i
			

			}
		 if (incoming.get(1)) { rg.ap
		 * che.thrift.pr
		 	s
				for (int elem279 = 0; elem279 < elem278.size; ++elem279)
					Integer elem281 = iprot.readI32();
					String elem280 = 
				prot.readString();
					struct.req.p
			

			}
		 
		 
		
			
		

		blic static class bin_method_a
		rivate static final org.apache.t

		rivate static final org.apache.thrift.proto
			ivate static final or
			
		r

		schemes.put(StandardScheme.class,
			chemes.put(TupleS
		

		ublic java.nio.ByteBuffer bin;
			blic String Str;
		*
	p

		STR((short)2, "Str")
		;
	

	static { 	for (_Fields
				byNam
			}
		}
	

		 *
	  */
	 pu
			switch(fieldId) {
				case 1: // BIN
					return BIN;
			
					return STR;
				default:
			
		

	
		/**
		

		 */
		public static _Field
			_Fields fields 

			return fields;

	

		 * Find the _Fields con
		 */
		public static _Fields findByName(String 
		

	
		private final short _thriftId;
		

		_Fields(short thriftId, String fieldName) 
			_thriftId = thriftId; 
			_fieldName 
		

		public short getThriftFieldId() {
			return _thriftId;
		}
	

			return _fieldName;
		}
	}

	// 
	 * sset id assignments
	 * 
	 
	public bin_method_args() {
		
	

		java.nio.ByteBuffer bin,
		String Str) {
			his();
		t
		

	
		**
	 

	public bin_method_args(bin_method_args othe
		if (other.isSet
			this.bin = 
		

			this.Str = other.Str;
		}
	}

	pub
	 * ic bin_method_args deepCopy() {
	 * 
	 
		return new bin_method_args
		
	

	public void clear() {
		this.bin = nu
			
		t
	

	
		ublic byte[] get
		setBin(or
			eturn bin == null ? 
				
			
				lic java.nio.ByteBuffer buff erForBi
			e
			

		ublic bin
			his.bin = bin == nul
				turn this;
			
				 
			b
			his.bi

		
	

		this.bin = null;
		
		
			* Returns true i

		return th
			

		u
		if (!value) {
		

	}
	 * 
	 * 
	 
	
		ublic String getStr(
			eturn this.Str;
		

		ublic bin_method
		this.Str 
			eturn this;
		
			
		u
		this.Str = null;
	}

	/** Retur
	public boolean isSetStr() {
		return this.Str !
			
		
			blic void setStrIsSet(boolean value)  {
		if (!value) {
		

	}
		
			blic void set

		case BIN:
			if (value == null) {
				unsetBin();
			} else {
				setBin((java.
			}
				reak;
		

			if (value == null) {
				unsetStr();
			} else {
				setStr((String)value);
				
			break;
				
		}

		
	p

		case BIN
			return getBin();
		

			return getStr();
		
		}
			hrow new Illeg

		
		** Returns true if fie
		ublic boolean is
			f (field == nu

		}
	

		case BIN
			return isSetBin();
		case STR:
			return isSetStr();
		}

		

		Override
		ublic boolean equals(Objec
			f (that == null)
			
		if (that instance
			return this.equals((bin_method_args)that);
			eturn false;
				
			
		u
		if (that == null)
			return false;
			
		b
		boolean that_pres
			f (this_present_bin || that_present_bin) {
			if (!(this_present_bin && 
				return false;
			i
			
		}
	

		boolean that_present_Str = true && that
		if (this_present_Str || that_present_St
		

			if (!this.Str.equals(that.Str))
				return false;
		

		return true;
		
	

	public in
		List<Object> list = new A
		
		boolean present_bin =

		if (present_bin)
			list.add(bin);
			
		boolean 
			ist.add(present_Str);
		i
			list.add(Str)
		
			
		return list.hashCo
		
			
		Override
			blic int compareTo(b
		i
			return getCla
		}
		
		

		lastComparison = Boolean.valueOf(isSetBin()).compareTo(othe
		if (lastComparison != 0) {
			return lastComparison;
		

			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bin, other.bin);
			if (
				return lastComparison;
					
			}
			
		l
		

		}
		if (i
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Str, other.Str)
			// 
			if (lastComparison != 0) {
					
				return lastComparison;
			}
		}
		

	
		ublic _Fields fieldForId(int fieldId) {
			eturn _Fields.findByThriftId(fieldId);
		
	

		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);

		
				
			blic void write(org.apache.thrift.protocol.TPr
			chemes.get(oprot.getSche
			
				
				erride
					ic Str
				r
				olean first = true;
				
					ppend("bin:");
						his.bin == null) {
						ppend("null");
					se {
						apache.thrift.TBaseHelper.toString(this.bin, sb);
					
					t = fa
				(!first) sb.ap
					ppend("Str:");
						his.Str == null) {
						ppend("null");
					se {
						ppend(this.Str);
					
					t = fa
				append("
					rn sb.toString();
				
				
			b
			/ check for required f

			
			// 
			
		r

			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transpor
				.TIOStreamTransport(out)));
			 catch (org.apache

			
			
				
				vate void readObject(java.io.ObjectInputS
				y {
				/ it doesn't seem like
			r
			 catch (org.apache.thrift
				hrow new java.io.IOException(te);
				
				
				
			i
			ublic bin_method_argsSt
			return new bin_method_a
		}

	

	
		public void read(org.apache.thrift.protocol.TPr
			org.apache.thrift.protocol.TField scheme
			
		

				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {

				}
				switch (schemeField.id) {
				
					case 1: // BIN
						if (schemeField.type == org.a
							struct.bin = iprot.r
							struct.setBinI
				
							org.apache.thrift.pr
						}
				
					case 2: // STR
						if (schemeField.type 
							struct.Str = iprot.readString();
							struct.setStrIsSet(true)
				
							org.apache.thrift.pr
						}
						break;
				
			

				iprot.r
			}
				
			iprot.readStructEnd();
			
			// check for required 
				truct.validate();
				
			
			ublic void write(org.a
				truct.validate();
				
			o
			

		

	

			if (struct.Str != null) {
		
				oprot.writeFieldBegin(STR_FIELD_DESC);
			

				oprot.writeString(elem283);
			 
				oprot.writeFieldEnd();
			 

			oprot.writeFieldStop();
			oprot.
		}
		
	}

	private static class bin_method_arg
		public bin_method_argsTupleScheme getSche

			r
	 * turn new bin_method_argsTupleScheme();
	 * 
	 
		}
		   r

		@Override

			TTupleP
			BitSet optionals = new BitSet();
				f (struct.isSetBin()) {
				
			

				o
		 }
		 op
			if (struct.isSetBin()) {
				java. nio.ByteBuf
			oprot.writeBinary(
				
			f (struct.isSe
				tring elem2
			oprot.wr
				
			
		

		pub
		 TTupleProtocol iprot = (TTupleProtocol) prot; tSet 
		 * ncoming = ipr
		 if
				struct.bin = iprot.readBinary();
				struct.setBinIsSet(true);
			}
				
			if (incoming.g
			

			}
		 
		 
		
			
		

		blic static class bin_method_r
		rivate static final org.apache.t

		rivate static final org.apache.thrift.proto
			ivate static final or
			
		r

		schemes.put(StandardScheme.class,
			chemes.put(TupleS
		

		ublic java.nio.ByteBuffer succ
			blic actual_base.j
		*
	p

		API((short)1, "api")
		;
	

	static { 	for (_Fields field : EnumSet.allOf(_
				byNam
			}
		}
	

		 *
	  */
	 pu
			switch(fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
			
					return API;
				default:
			
		

	
		/**
		

		 */
		public static _Field
			_Fields fields = fi

			return fields;

	

		 * Find the _Fields constan
		 */
		public static _Fields findByName(String name) {
		

	
		private final short _thriftId;
		

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId; 
				
			_fieldName 
		

		public short getThriftFieldId() {
			return _thriftId;
		}
	

			return _fieldName;
		}
	}

	// 
	 * sset id assignments
	 * 
	 
	public bin_method_result() {
		
	

		java.nio.ByteBuffer success,
		actual_base.j
			his();
		t
		

	
		**
	 

	public bin_method_result(bin_method_result other) {
		if (other.isSet
			this.succes
		

			this.api = new actual_
		}
	}

	pub
	 * ic bin_method_result deepCopy() {
	 * 
	 
		return new bin_method_resu
		
	

	public void clear() {
		this.success 
			
		t
	

	
		ublic byte[] get
		setSuccess(or
			eturn success == nul
				
			
				lic java.nio.ByteBuffer bufferFo rSucces
			e
			

		ublic bin
			his.success = succes
				turn this;
			
				 
			b
			his.su

		
	

		this.success = null;
		
		
			* Returns true if fi

		return th
			

		u
		if (!value) {
		

	}
	 * 
	 * 
	 
	
		ublic actual_base.ja
			eturn this.api;
		

		ublic bin_method
		this.api = ap
			eturn this;
		
			
		u
		this.api = null;
	}

	/** Retur
	public boolean isSetApi() {
		return this.api !
			
		
			blic void setApiIsSet(boolean value) { 
		if (!value) {
		

	}
		
			blic void set

		case SUCCESS:
			if (value == null) {
				unsetSuccess();
			} else {
				setSuccess((j
			}
				reak;
		

			if (value == null) {
				unsetApi();
			} else {
				setApi((actual_base.java.api_exception)valu
				
			break;
				
		}

		
	p

		case SUC
			return getSuccess();
		

			return getApi();
		
		}
			hrow new IllegalSt

		
		** Returns true if fie
		ublic boolean is
			f (field == nu

		}
	

		case SUC
			return isSetSuccess();
		case API:
			return isSetApi();
		}

		

		Override
		ublic boolean equals(Objec
			f (that == null)
			
		if (that instanceof b
			return this.equals((bin_method_result)that);
			eturn false;
				
			
		u
		if (that == null)
			return false;
			
		b
		boolean that_pres
			f (this_present_success || that_present_success) {
			if (!(this_present_success
				return false;
			i
			
		}
	

		boolean that_present_api = true && that
		if (this_present_api || that_present_ap
		

			if (!this.api.equals(that.api))
				return false;
		

		return true;
		
	

	public in
		List<Object> list = new A
		
		boolean present_succe

		if (present_success)
			list.add(success);
			
		boolean 
			ist.add(present_api);
		i
			list.add(api)
		
			
		return list.hashCo
		
			
		Override
			blic int compareTo(b
		i
			return getCla
		}
		
		

		lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
		if (lastComparison != 0) {
			return lastComparison;
		}
			f (isSetSuccess
			
		

			}
		}
			astComparison = Boolean.valueOf(isSetApi()).compareTo(
					other.isSetApi());
		if (lastComparison != 0) {
			return lastComparison;
		}
		

			if (lastComparison != 0) {
				ret
			}
			// 
			
					
		return 0;
			
		
	p

	}
		
			blic void read(org.apache.thrift.protocol.TPr
		s
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TExceptio

		
				
			
			verride
			blic String to
				ringBuilder sb = new StringBuilder("b
				olean first = true;
					
				.
				 (this.success == null) {
				.append("null");
					se {
						apache.thrift.TBaseHelper.toString(t
						
					t = fals
						first) sb.append(", ");
					p
					this.a
				.append("null"
					se {
						ppend(this.api);
						
						 = false;
					ppend(")
						n sb.toString();
					
					
				ic void 
					heck for required fields
				 
				 (api != null) {
			a
			

			
			// 
			ivate void writeOb
		t

		} catch (org.apache.thrift.TException te) {
				
			throw new java.io.

			
			
				vate void readObject(java.io.ObjectInputSt
				y {
				/ it doesn't seem like you 
				ead(new org.apache.thr
			 
			throw new java.io.IOExcep
				
				
				
			i
			ublic bin_method_result
			return new bin_method_r
		}

	

	
		public void read(org.apache.thrift.protocol.TProt
			org.apache.thrift.protocol.TField schemeFi
			
		

				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {

				}
				switch (schemeField.id) {
				
					case 0: // SUCCESS
						if (schemeField.type == org.a
							struct.success = iprot.r
							struct.setSucc
				
							org.apache.thrift.pr
						}
				
					case 1: // API
						if (schemeField.type == o
							struct.api = new actual_base.java.api_exce
							struct.api.read(iprot);
				
						} else {
							org.apache.thrift.pro
				
			

						org.a
				}
				
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
				
				/ check for required fields o
			s
			
				
				blic void write(org.apa
				truct.validate();
			
			

		

	

			}
		
		
			if (struct.api != null) {
			

				struct.api.write(oprot);
			 
				oprot.writeFieldEnd();
			 
			}
			 

			oprot.writeStructEnd();
		}
		
		
	

		public bin_method_
			return new bin_method
		}

	}
	 * 
	 * 
	 
	
		rivate static c lass bin_metho   @Override p

			BitSet optionals = new BitSet();

				option
			}
				f (struct.isSetApi()) {
				
			

			if
		 	java.nio.ByteBuffer elem287 = struct.success;
		 	o
			}
			if (st ruct.isSetA
			struct.api.write(o
				
			
				
			verride
				lic void read(o
			TuplePro
				tSet incomin
			i
			

			}
		 if (incoming.get(1)) { truct
		 * api = new act
		 	s
				struct.setApiIsSet(true);
			}
			
				
			
		

		
		 
		 li
		rivate static final org.apache.thrift.protocol.
			
		r

		rivate static final org.apache
		

		tatic {
			chemes.put(StandardSc
			chemes.put(TupleScheme.
		

		ublic Integer opt_num;
			blic Integer defa
		u

		ublic enum _Fields implements 
			PT_NUM((short)1, "
		D
		

	
		private static final Map<String, _Fields> byNam
	
		static {
			for (_Fields field : EnumSet.all

				byName.put(field.getFieldNam
		

	/**  * Find the _Fie  */
		public 
			switch(fieldId) {
				case 1: // OPT_NUM
					return OPT_NUM;
				case 2: // DEFAULT_NUM
					return DEFAULT_NUM;
				case 3: // REQ_NUM
		

				
	 	}
	 }
	
		/**
		 * Find the _Fields constant 
		 * if it is not found.
		 */
		

			if (fields == null) throw new IllegalA
			return fields;
		

		/**
		 * Find the _Fields 
		 */
		public static _Fi

		}
		

		private final String _f
		

		

		}
		
		

		}
		
		public String getField
			return _fie
		

	
		/ isset id assignments
	p

	
	 * 
	 * 
	 
	public param_modifiers_args(
		Integer opt_num,
		

		this();
		this.opt_num = opt_num;
		

	}
		
	/

	 */
		ublic param_modifiers_args(para
		if (other.isSetOpt_num()) 
			this.opt_nu
		

			this.default_num = other.defau
		}
		

		}
	 * 
	 * 
	 
	}
		
	p

	}
		
	@

		this.opt_num = null;
		
		

		this.req_num = null;
		
		
		
	p

	}
		
	p

		re
	 * urn this;
	 * 
	 
	}
		
	p

	}
		
	/

		return this.opt_num != null;
		
		
			blic void setOpt_num
				 (!value) {
			this.opt
				 
			
			

		return this.defau
			
				
			blic par
				is.default_num = default _num;
			e
			

		ublic void un
			his.default_num = nu
				
			
				 Returns true if fie ld defa
			b
			eturn 

		
	p

			this.default_num = null;
		}
		
			

		return this.req_n
			

		ublic param_m
			his.req_num = req_nu

		
		
	p

	}
	 * 
	 * 
	 
	
		** Returns true if f
			blic boolean isSetReq_num() {
		r

		
		ublic void se
			f (!value) {
			this.req_num = n
			
		
			
		u
		switch (field) {
		

				unsetO
			} else {
				setOpt_num((Int
			}
			break;
			 
		case DEFAULT_
		

			} else {
				setDefault_num(
			}

		
		case REQ_NUM:
			if (value == null) {
				unsetReq_num();
				 else {
				setReq_num((Integer)value);
				
			

		}
		
		
			blic Object getFieldValue(_Fields field) {
				itch (field) 
			ase OPT_NUM:
				eturn getOpt_
		

			return getDefault_num();
		
		case REQ_NUM:
			return getReq_num();
				
			
				row new Illeg
		

		** Returns t
	p

			throw n
		}
		

		case OPT_NUM:
			return isSetOpt_num();
		case DEFAULT_NUM:
			return isSetDefaul

			return isSetReq_num();
		}
		throw new IllegalStateEx
			

		Override
		ublic boolean equals(Objec
		if (that == null)
			return false;

			return this.equals((pa
		

	
	public boolean equals(param_modifiers_args that) {
		if (that == null)
			return false;
		

		boolean that_present_op

			if (!(this_present_opt_num && that_present_opt_num))
				return false;
			if (!this.opt_num.equa
			
		}
			
			oolean this_present_defaul
				olean that_present_def
			f
			
				return false;
			if (!this.default_num.equ
				return false;
		}
		
			oolean this_present_req_num = true && this.isSetReq_num();
			oolean that_present_req_nu
				 (this_present_req_num
			i
			
			if (!this.req_num.equals(that.req_num))
				return false;
			
		
		return true;
			
			
				erride
			b
		L
		
		

		if (present_opt_num)
			list.add(opt_num);
	

		list.add(present_default_num);
		if (present_default_num)
		

		boolean present_req_num = true && (isSetReq_num());
		list.add(present_req_num);
		

	
		return list.hashCode();
		
		

		ublic int compareTo(pa
		if (!getClass().equals(o
			return getCla
		}
			
		
		int lastComparison = 0;
		
		lastCompari
			on = Boolean.val
		if (lastComparison != 
			return lastComparison;
		}
		if (isSetOpt_nu
			lastComparison = org
		

			}
		}
		lastComparison = Boolean.valueOf
		

		}
		if (i
			lastComparison = org.apache.thrift.TBaseHelper.compare
					To(this.default_num, other.default_num);
			if (lastComparison != 0) {
				return lastComparison;
			
		

		if (lastComparison != 0) {
			retu
			
			// 
			f (isSetReq_num()) {
			lastComparison = org.apache.thrift.TBaseHelper.compar
					eTo(this.req_num, other.req_num);
			if (lastComparison != 0) {
				return lastComparison;
			
		

	}
		
			blic _Fields fieldForId(int fieldId) {
		r
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {

		
				
			
			blic void write(org.apac
			chemes.get(opr
				
				
					rride
				l
				ringBuilder sb = new Stri
				lean first = true;
					
						pend("opt_num:");
						his.opt_num == null) {
					append("
						e {
					a
					
				st = false;
					!first) sb.append(", ");
						pend("default_num:");
						his.default_num == null) {
					append("
						e {
					a
					
				st = false;
					!first) sb.append(", ");
						pend("req_num:");
						his.req_num == null) {
					append("
						e {
					a
					
				st = fal
					ppend(")");
				t
				
			
			blic void validate() t

			f (req_num == null) {
			// 
			throw new org.apache.thrift.p
				
						
			/
			
		

		try {
				
			write(new org.apac

			throw new java.io.IOException(te);
			
			
			
			ivate void readObject(
			ry {
			// it doesn't seem like you shoul
			read(new org.apache.thri
			 catch (org.apache.thr
			throw new java.io.IOException(te);
			
			
			
			ivate static class para
			ublic param_modifiers_a
			

	}

	private static class param_modifiers_argsStandardScheme extends StandardScheme<param_m
		
			ublic void read(org.apache.thrift.protocol.TP
			
		

				schemeField = iprot.readFieldBegin();

					break;
				}
				
				switch (schemeField.id) {
					case 1: // OPT_NUM
						if (schemeField.type 
							struct.opt_num = iprot.readI
							struct.setOpt_numIsSet(t
						} else {
				
						}
						break;
				
						if (schemeField.type == org.a
							struct.default_num = ipr
							struct.setDefault_numIsSet
						} else {
				
						}
						break;
					case 3: // REQ_NUM
				
			

						} els
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				
						}
						break;
					default:
						org.apache.thrift.protocol.TProtoco
				}
				iprot.readFieldEnd();
				
			i
			
				/ check for required fields of primit
				truct.validate();
			
		

		

	

			Integer elem288 = struct.opt_num;
		
		
			if (elem288 == null) {
			

			}
			 

			oprot.writeFieldEnd();
			oprot.
			Integer elem289 = struct.default_num;
			if (elem289 == null) {
		

			oprot.writeI32(ele

			o
	 * rot.writeFieldEnd();
	 * 
	 
			oprot.writeFieldBegin(REQ_NUM_FIELD_DESC);
			Integer elem29 0 = struct.re	

			}

			oprot.w
			oprot.writeFieldStop();
				prot.writeStructEnd();
			
		

		
		 ivate static class param_modifiers_argsTupleSchemeFactory implements Scheme
		 ub
			return new param_modifiers_argsTupleScheme();
			 
			
				
			vate sta
				
			O
		p

			In
		 if (elem291 == null) { lem29
		 *  = 0;
		 }
			oprot.writeI32(elem291);
			BitSet optionals = new BitSet();
			if (struct.isSetOpt
				num()) {
				optionals.set
			

				o
		 }
		 op
			if (struct.isSetOpt_num()) {
				Integer elem292 = struc
			

				}
				oprot.writeI32(elem292);

			if (struct.isSetDefault_num()) {
				Integer elem293 = st
				if (elem293 == null) {
			

				oprot.writeI32(elem293);
			}
		}

		@Override
			ublic void read(or
			
		

			BitSet incoming = ipr
			if (incoming.get(0)) {
				struct.opt_num = iprot.readI32(

				struct.setOpt_numIsSet(true);
		

				struct.default_num = iprot.		struct.setDef
			}
		}
		
	}

	
	 
	 bl
	private static final org.apache.thrift.protocol.TStruct STRUC
		
		rivate static final org.apach
	

	static {
		schemes.put(StandardScheme.class, new pa
		

	
	public Long success;
		** The set of fields th
		ublic enum _Fields

		

		private static final Map<
		
		

				byName.put(field.getFieldName(), field);
			}
		}
		
		

		 */
		public static _Fields findByThriftId(int fieldId) {
		

				
	 * return SUCCESS;
	 * 
	 
				default:
					return null;
		

	
		/**
		

		 */
		public static _F
			_Fields fiel
			if (fields == null) 
				eturn fields;
			
				 
			*
			* Find

		p
		

	
		private final sh
		private final
			

			
			_fieldName = fieldName;
		

		pu
	 * lic short getThriftFieldId() {
	 * 
	 
			return _thriftId;
		}
			
		p

		}
		
			
		/
		ublic param_modifiers_result() {
	}

	public pa
		Long success) {
		this();
			his.success =
		
			 
		**
	 

	public param_modifiers_result(param_modifiers_result
		if (other.isSetSu
			this.success 

		
		
		ublic param_modifiers_result deepCopy() {
			eturn new param_modifiers_result(this);
				
			
				erride
		u

		
	}

	public Lo
		return this.success;
		

		ublic param_modifiers_result se
		this.success = success;
		return this;
			

		ublic void unsetSuccess
		

	
	/** Returns true if field success is set (has been a
		ublic boolean isSetSuccess() {
			eturn this.success != null;
		

		ublic void setSuccessIs

			this.success = null;
		}
			
		
		ublic void setFieldVa
			witch (field) {
			ase SUCCESS:
				f (value == null) {
				
			
				setSucc
		

	
		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		

	
		}
		

	
	/** Returns true if field 
		ublic boolean isSet(_Fields field) {
		if (field == null) {

		}
		
		switch (field)
		case SUCCESS:
			return isSetSuccess(
		

	}
		
		Override
	p

			return false;
		if (t
			return this.equals((param_modifiers_result)that);
					
		return false;
			
		
	p

			return false;
		
			oolean this_present_success = true && this.isSetSuccess();
			// 
			oolean that_present_s
			f (this_present_success || that_present_success) {
					
			if (!(this_present_success && that_present
				return false;
			
		

	
		return true;
			
		
	@

		List<Object> list = new ArrayList<Object>();

		boolean present_success = true && (isSetSuccess());
				
			ist.add(present_success);
			f (present_success)
			list.add(succe
				
				turn list.hashCode();
					
				
				erride
				ic int compareTo(p
					!getClass().equals(other.getClass())) {
						rn getClass().getName().compareTo
						
					
						astComparison = 0;
					
					Compar
				(lastCom
					urn lastComparison;
				
				 (isSetSuccess()) {
			l
			if (lastComparison != 

			}
			// 
			
		r

		
				
			blic _Fields field

			
			
				lic void read(org.apache.thrift.protocol.T
				hemes.get(iprot.getScheme()).g
				
				
			b
			chemes.get(oprot.getSch
			
		

	p

		boolean first = true;
		
			b.append("success:");
		i
		

			sb.append(this.success);

		first = f
		sb.append(")");
				
			eturn sb.toString();
			
			
				lic void validate
			/
			/ check for sub-struct validity
			
				
				vate void writeObject(ja
			r
			

			throw ne
		}
				
			
			
			ivate void readObject(
				y {
				/ it doesn't seem like you sh
			r
		}

		



		public param_modifiers_resultStandardScheme 
		etScheme() {
		
			return new param_modifiers_resultStandardScheme();
			

	}
			 
	
			 

	
		public 
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
		

				if (schemeField.type == org.apache.
					break;

				
	 * 
	 * 
	 
				switch (schemeField.id) {
					case 0: // SUC CESS 				if (schemeFi eld.type == or	

						} else {

						}
						break;
					default:
				
			

			}
		 iprot.readStructEnd();
		 
			// check for required fields of primitive type, wh
			struct .validate()
			
				
			blic void write(org
				ruct.validate();
			
				rot.writeStr
			i
			

				i
		 		elem294 = 0L; 
		 * 
		 	o
				oprot.writeFieldEnd();
			}
			oprot.writeFieldSto
				();
			oprot.writeStr
		}

		
		 
		 iv
		public param_modifiers_resultTupleScheme getSch
			return new param_modifie
		}

		
		rivate static class param_modifi

		@Override
			ublic void write(org.
			TTupleProtocol oprot = 
			

				optionals.set(0);
			}
			

				Long elem295 = struct.succes
				if (elem295 == nu
			
		

			}
		}
	

		public void read(org.apache.thrif	TTupleProtocol iprot = (TTuple 	BitSet incoming = iprot.readBi
			if (in
				struct.success = iprot.re
				struct.setSuccessIsSet(
		

	
	 
	 
	
		
			lic static class underlying_types_test_args implements org.ap
			ivate static final org.apache.thrift.p
				
				vate static final org.apache
			i
		
		rivate static final Map<Clas
			atic {
			chemes.put(StandardScheme.class, new 
				hemes.put(TupleScheme.c
				
			
		u
	p

	public enum _Fields implements org.apache.thri
		LIST_TYPE((short)1, "list_type"),
		

	
		private static final
		

			for (_Fields field :

		

	
		/**
		

		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
		

				case 2: // SET_TYPE
					return SET_TYPE;
				default:
			
			}
		

		/**
		 * Find the _Fields co
		

		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThr
			if (fields 
		

	
		/**
		

		pu
	 * lic static _Fields findByName(String name) {
	 * 
	 
			return byName.get(name);
		}
	

		private final String _fieldName;
		
			Fields(short thriftId,
			
		

	
		public short getThriftFieldId() {
		

	
		public String getFieldName() {
		

	}
		
			 isset id assignments
		u
		
	

		java.util.List<Long> list_type,
		java.util.Set<Long> s
		

		this.set_type = set_type;
		
		
	/

	 */
		ublic underlying_type
		

			f
	 * r (Long elem296 : other.list_type) {
	 * 
	 
				Long elem297 = elem296;
				this.list_type.add(elem297)
		

		if (other.isSetSet_type()) {
			this.set_typ
			for (Long elem298 : o
			
		

		}
		
		
			blic underlying_type
				turn new underlyi
			
				 
			v
			blic v

		
			his.set_type = null;
				
			
				 
			b
			eturn 

		
	p

	}
		
		ublic void addT
			f (this.list_type == n

		}
			his.list_type.add(ele

		
		ublic java.util.List<Long> getList
		

	
	 * 
	 * 
	 
	public underlying_types_test_args set
		this.list_type = lis
			eturn this;
		

		ublic void unset
		this.list_type 
			
		
			* Returns true if field
		u
		return this.list_type != null;
	}

	public vo
		if (!value) {
			this.list_type =
			
		
			 
		ublic int get
		

	
		ublic java.util.I
			eturn (this.s

		
		ublic void addToSet_type(Long elem) {
		if (this.set_type == null) {
			this.set_type = new HashSet<Long>();
				
			his.set_type.add(elem);
				
		

		return this.set_type;
		
		
			blic underlying_types_test_args setSet_type(java.util.
				is.set_type =
			eturn this;
				
		

		this.set_typ
	}

	/** Retur
	public boolean isSetSet
		return this.set_type != null;

		
		ublic void setSet_typeIsSet(
		if (!value) {
			this.set_type = null

		
		
		ublic void setFieldVa
			witch (field) {

			if (value == null) {
		

				setLis
			}
			break;
			
		c

				unsetSet_type();

				setSet_type((java.util.Set<Long>)value);
			}
			break;
		
		}
			
			
				lic Object getFieldVal
			w
		c
			return getList_type();
		
			ase SET_TYPE:
			
		
			
			hrow new IllegalStateExcep
				
			
		*
		ublic boo
		

		}
		
		

			return isSetList_type();
		case SET_TYPE:
		

		throw new IllegalStateException();
		
	

	public bo
		if (that == null)
			return false;
		if (that instanceof u

		return false;
		
			
		ublic bo
			f (that == null)
			
		
		boolean thi
			_present_list_ty
		boolean that_present_li
		if (this_present_list_type |
			if (!(this_present
				return
			if (!this.list_type.equal
			
		}
		
		boolean this_present_
		

			if (!(this_present_set_type && that_present_set_type))
				return false;
			if (!this.set_type.equals(that.
		

	
		retur
			
					
		
			verride
		u
		

		boolean present_list_type = true && (isSetList_type());
		list.
			f (present_list_type)
			// 
			list.add(list_type);
					
		
			oolean present_set_type = true && 
		l
		

	
		return list.hashCode();
			
		
	@

		if (!getClass().equals(other.getClass())) {

		}
				
			
			nt lastComparison = 0;
			
				stComparison = Boolean.valueOf(isSetL
				 (lastComparison != 0) {
					turn l
				
				 (isSetList_type()) {
				stComparison = org.a
					(lastComparison != 0) {
						urn lastComparison;
						
						
							mparison = Boolean.valueOf(isSe
							stComparison != 0) {
						r
						
						sSetSet_type()) {
					tCompari
						lastComparison != 0) {
					t
					
				
					rn 0;
						
						  
						 _Fields fieldForId(int fieldId) {
							 _Fields.findByThriftId(fieldId
							
						
						 void read(org.apac
						es.get(iprot.getScheme()).getS
					
						
					c
					mes.ge
				
					
				e
				lic String toString()
			t
			oolean first = true;

			b.append("list_type:");
			// 
			f (this.list_type 
			

			sb.append(this.list_type);
				
			

			f (!first) sb.append(", ");
			b.append("set_type:");
				 (this.set_type == null) {
				b.append("null");
						
				else {
					.append(this.set_type);
					
				r
				.append(")");
				turn sb.toString();
			
			
				lic void validate() throws org.apache.thrif
				 check for required fields
						
				 check for sub-struct validity
					
					
				v
				y {
				rite(new org.apache.th
			 
			throw new java.io.IOExc
			
		

	p

			// it doesn't seem like you should have to do this, but java serialization is wacky, and d
			read(new org.apache.thrift.protocol.TCompactProtocol(new 
			 catch (org.apache.thrift.TException te) {
			
		

	

		public un
			return new underlying_types_test_argsStandardScheme();
				
			
			
			
				vate static class
			
			ublic void read(org.apache.th
				rg.apache.thrift.
			i
			while (true) {
				schemeField = iprot.readField
				if (schemeField.type == org.apache.thrif
					break;
					
					witch (schemeField.id) {
					
				
							org.apache.thrift.protoco
							struct.list_type = new ArrayList<Lon
							for (int elem301 = 0; elem301 < ele
								Long elem302 = iprot
								struct.list_type.add(
					
				
			

							org.
						}
				
						break;
					case 2: // SET_TYPE
						if (schemeField.typ
							org.apache.thrift.protocol.TSet elem303 = iprot.readSetBegin();
						
							struct.set_type = new HashSet<Long>(2*elem303.size
							for (int elem304 = 0; elem304 < elem303.size; ++elem304
								Long elem305 = iprot.readI64
								struct.set_type.add(elem305
					
							iprot.readSetEnd();
				
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						
						}  
						break;
					default:
						org.apache.thrift.protocol.T
				}
				iprot.readFieldEnd();
			}
			

		

	

		public void write(org.apache.thrift.protocol.T
		rotocol oprot, underlying_types_test_args struct) throws org.apache.thrift.TException {
		
			struct.validate();
			

			oprot.writeStructBegin(STRUCT_DESC);
			 

				oprot.writeFieldBegin(LIST_TYPE_FIELD_DESC);
				oprot
				for (Long elem306 : struct.list_type) {
					Long elem307 = elem306;
		

					}

				
	 * oprot.writeI64(elem307);
	 * 
	 
				}
				oprot.writeLi stEnd();	

			if (struct.set_type != null) {

				oprot.
				for (Long elem308 : struct.set_type) {
					Long elem309 = elem308;
				
			

					
		 	}
		 	o
				oprot.writeFieldEnd();
			} 
			prot.writeFieldSto
				rot.writeStruct
			
				
			
		

		pub
		 return new underlying_types_test_argsTupleScheme(); 
		 * 
		 
		
			ivate static class underlying_types_test_
			
				
			Override
		p

			Bi
		 if (struct.isSetList_type()) {
		 	o
			}
			if (struct.isSetSet_type
			

			oprot.writeBitSet(optionals, 
			if (struct.isSetList_type()) {

				for (Long elem310 : struct.list_type) {
					Long elem311 = elem
					if (elem311 == null) 
			

					oprot.writeI64(elem311);
				}
			

				oprot.writeI32(struct.set_ty
				for (Long elem312
			
		

					}
					oprot.writeI64(elem313);
		

		}
		@Overri
		public void read(org.ap
		

			i
	 		org.apache.thrift.protocol.TList elem
	 		
				for (int elem315 = 0; elem315 < elem314.size; ++elem315) {
					Long elem316 = iprot.rea
					struct.list_type.add(elem316);
				}
				struct.setList_typeIsSe
				
			i
			
		

					Long elem319 = iprot.readI64();
					struct.set_type.add(elem319);
		

			}
		}
		

	

	
		blic static class underlying_types_test_result implement
	p

	private static final org.apache.thrift.protocol.TField
		
	p

		schemes.put(StandardScheme.class, ne
		schemes.put(TupleScheme.cla
			
		
		ublic java.util.List<Lo
	/

		SUCCESS((short)0, "success")
		;
	

	
		static {
			for (_Field
		

		}
		
		

		 *
	 * 
	 * 
	 
		public static _Fields findByTh
			switch(fieldId) {
		

				default:
					return nul
			}
		}
	

		 * Find the _Fields constant that matches fieldId, thro
		 * if it is not 
		 */
			ublic static _Fields
				Fields fields =
			if (fiel
				eturn fields; 
			
			

		 
		

			return byName.get(name);
		}
		
			rivate final short _

		
		_Fields(short thriftId, String fie
		

		}
	 * 
	 * 
	 
	
		public short getThri
			return _thriftId;
		}

		public String ge
			return _fiel
			
		
		
	/

	}
	
		ublic underlying_
			ava.util.List
		this();
			his.success = success; 
		
	

	 * Performs a deep copy on <i>other</i>.
		*/
			blic underlyi

			this.success = new ArrayList<Long>(other.success.size());
			for (Long elem320 : other.success) {
				Long elem321 = elem320;
				this.success.add(elem321);
				
			
				
		

		return new u
	}

	@Override
	public void clear() {
		this.success = null;

		
		
		ublic int getSuccess
			eturn (this.succes

		
	p

	}
	
		ublic void addToSuccess(Long elem) {
			f (this.success == null) {
			

		this.success.add(elem);

		
		ublic java.util.List<Long>
			eturn this.success;
		
		
			blic underlying_types_test_result setSuccess(java.util.List<Long> success) {
			his.success = success;
				turn this;
			
		
		ublic voi
		

	
		** Returns true if field success is set
	p

	}
		
	p

			this.success = null;
		}
	}

	public vo
		switch (field) {
		case SUCCESS:
			if (value == null) {

			} else {
				setSuccess((java.util.Lis
			}
			break;
			
		}
		
		
		ublic Object getField
		

			return getSuccess();
		
		}
		

	
		** Re
			blic boolean isSet(_Fields field) {
					
		if (field == null) {
			throw new IllegalArgumentException
		}
	

		case SUCCESS:
			retu
			
			// 
			hrow new IllegalStateException();
					
		
			
		O
	p

			return false;
		if (that instanceof underlying_types_test_result)
			return this.equals((underlying_types_test_result)that);
		r
	}

	public boolean equals(underlying_types_test_result that) {
			

			return false;
				
			
			oolean this_present_succ
			oolean that_pr
				 (this_present_success || that_presen
				f (!(this_present_success && that_present_success))
					eturn 
				f
				return false;
				
					
						n true;
						
						
							de
							int hashCode() {
						O
						
						an present_success = true && 
					.add(pre
						resent_success)
					t
					
				urn list
					
				
				erride
			b
			f (!getClass().equals(

			
			// 
			
		i

		lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
				
			f (lastComparison 

			
			f (isSetSuccess()) {
				astComparison = org.apache.thrift.TBaseHel
				f (lastComparison != 0) {
						
				return lastComparison;
					
					
				t
				
				
			b
			eturn _Fields.findByThr
			
		

		

	
		ublic void write(org.apache.thrift.protocol.TProtocol oprot)
			chemes.get(oprot.getScheme()).getScheme().write(oprot
		
	

	public String toString() {

		boolean f
		
				
			b.append("success:");
			f (this.success == null) {
			sb.append("null");
				else {
			s
			
			irst = false;
				.append(")");
				turn sb.toString();
					
					
				l
			/
		/

		
		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thrift.protocol.T
			 catch (org.apache.thr
				hrow new java.io.IOException(te);
						
				
				
					
					ate void readObject(java.io.
				y
				/ it doesn't seem like you sh
			r
		}

		



		public underlying_types_test_resultStandardScheme getScheme() {
		
			return new underlying_types_test_resultStandardScheme();
			

	
	private 
		
		public void read(org.apache.thrift.protocol.TProtocol iprot, underlyin
		

			w
	 * ile (true) {
	 * 
	 
				schemeField = iprot.readFieldBegin();
			

				}

					case 
						if (schemeField.type == org.apache.thrift.protoco
							org.apache.thrift.protocol.TList elem
				
			

					
		 				}
		 		
							struct.setSuccessIsSet(true);
						} e lse {
						org.a
					}
				
			

				}
		 	iprot.readFieldEnd(); 
		 * 
		 ip
		
			// check for required fields of primitive
			struct.validate();
				
			
		

			st
		 
		 op
			if (struct.success != null) {
				oprot.writeFieldBegin(S
			

					Long elem326 = elem325;
					if (elem326 == null) {

					}
					oprot.writeI64(elem
				}
			

			}
			oprot.writeFieldS
			

		
			
		
	p

			return new underlying
		}
	}

	pri
	 
	 @O
		public void write(org.apache.thrift.protoc
		

			if (struct.isSetSuccess()) {
				optionals.set(0);
		

			if (str
				oprot.writeI32(str
		

					if (elem328 == null) {
						elem328 = 0L
			
		

			}
		}
		
		@Override
		

			B
	 * tSet incoming = iprot.readBitSet(1);
	 * 
	 
			if (incoming.get(0)) {
				org.apache.thrift.
				struct.success = new ArrayList<Long>
			

					struct.succes
			
				struct.setSuccessIsSet(true);
		

	
	}
		
			
		
			lic static class getThing_args imp lement
		rivate static
	

	private static final Map<Class<? extends IS
		tatic {
			chemes.put(St

		
	

	public en
		;
		

		
		

				byName
			}
		}
			
		/

		 */

			switch(f
		

			}
		}
	

		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		

			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field
		

	
		/**
		 * Find the _Fields constant that matches name, or null
		 */

			return byName.
		}
	

		private final String _fieldName;
		
		_Fields(short thriftId, String f
		

		}
		
			ublic short getThriftFieldId() {
					
			return _thriftId;
			
		
		

		}
		
			
			// 
			 isset id assignments
					
		ublic getThing_args() {
			
		
	/

	 */
		ublic getThing_args(getThing_args other) {
			
		
	p

	}

		Override
				
			blic void clear() {
			
			
				lic void setFieldValue(_Fields field,
				itch (field) {
					
				
				
				ic Objec
					ch (field) {
				
				row new IllegalStateE
			
			

			blic boolean isSet(_Fields field) {
			// 
			f (field == null) 
			

		
				
			witch (field) {

			hrow new IllegalStateException();
			
			
		O

		

		if (that instanceof getThing_args)
			return this.equals((getThing_args)that);
			eturn false;
		
	

		if (that == null)

		
		return true;
				
			
		

		ublic int
		List<Object> list = new ArrayList<Object>();
				
			
		r

	

	

			return getClass().getName().compareTo(other.getClass().getName());
		
		}
			

		int lastComparison = 0;
			 

		return 0;
	}
		
		ublic _Fields fieldForId(int fieldId) {
		

	

	pub
	 * ic void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache
	 * thrift.TException {
	 
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		 

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);

		
			verride
				lic String toString() {
			t
		b

		sb.
		 eturn sb.toString();
		 
		
			blic v oid validat
			 check for require
				check for sub-s
			
				
			i
		t

		} c
		 throw new java.io.IOException(te); 
		 * 
		 
		
			ivate void readObject(java.io.ObjectInput
			ry {
				
			// it doesn't 
			

			th
		 
		 
		
			ivate static class getTh
		p

		}
		

		rivate static class getThing_argsStandardSc
			
			ublic void read(org.apa
			

			while (true) {
				schemeField = ip
			

				}
				switch (schemeFie
			
		

				iprot.readFieldEnd()
			}
		

			// check for required	struct.validate
		}
		
		

	
	 	oprot.writeStructBegin(STRUCT_DESC);
	 	o
			oprot.writeStructEnd();
		}
			
		
	

		public getThing_argsTupleScheme ge
			return new getThing_argsTupleSch
		

	
	private static class 
		

		

		}
		
		

			TTupleProtocol iprot = (TTupleProtocol) prot;
		}
		
	}

	
		
	u

	
	 * 
	 * 
	 
	private static final org.apache
		
	p

		schemes.put(StandardScheme.class, new getTh
		schemes.put(T
			
		
	p

	public enum _Fields implements org.apache.thrift.TFieldI
		SUCCESS((short)0
		;
			
				ivate static fi
			
				atic { 
			f
				byNam

		}
	

		 * Find the _Fields constant that matches f
		 */
		public static
			switch(fieldId) {

			
				default:
		

		}
	 * 
	 * 
	 
	
		/**
			* Find the _Fields constant that matc
		 

		public static _F
			_Fields fiel
			if (fields == null) th
			
		}
	

		 * Find 
		 */
		public static _Fi
			return byName
		}
			 
		private final
		

		_Fields(short thriftId, String fieldName) {
			_thriftId = thri
			_fieldName = 

		
		public short getThriftFieldId() {
			return _thriftId;
			
				
			ublic String getFieldName() {
				eturn _fieldN
		}

		
	/

	}
	
		ublic getThing_result(

		this();
		this.success = success;
		
			

		* Performs a deep copy 
	 

		if (othe
			this.success = new Thing(other.success);
		}
			
		

		return new getThing_res

		
		Override
			blic void clear() {
		t
		
			
			
				lic Thing getSuccess()
			e
		
		
	p

		return this;
		
	

		this.success = null;
		
	

	public boolean isSetSuccess() {
		return this.success != null;
	}

	public vo
		if (!value) {
			this.success = null;
		}

		
		ublic void setFieldValue(_F
			witch (field) {
		case SUC
			if (value == null) {
			
			} else {
				setSuccess((T
			}
		

		}
		
		
		ublic Object getFieldV
			witch (field) {
		c
		

		}
		throw
			
					
		
			* Returns true if field correspond
		u
		

		}
		
			witch (field) {
			// 
			ase SUCCESS:
					
			return isSetSuccess();
			
		t
	}

	@Override
		ublic boolean equals(Object that) {
			f (that == null)
			
		

		return false;

		
				
			blic boolean equals(getThing_result that) {
			f (that == null)
			return false;
				
				olean this_present_success = true && this.isSetSuccess();
					lean t
				 
				f (!(this_present_success
				eturn false;
					(!this.success.equals(that.success))
						urn false;
						
						
					rn true;
						
					
					ride
				ic int h
					<Object> list = new ArrayList<Object>();
				
				olean present_success
			i
			f (present_success)

			
			// 
			eturn list.hashCod
		

		Override
				
			blic int compareTo

			return getClass().getName().compareT
			
				
				t lastComparison = 0;
				
			a
			f (lastComparison != 0)
			return lastComparison;
		}

		

				return lastComparison;
			}
			
		r
	}

	public _Fields fieldForId(int fieldId) {

		
		
				
			blic void read(org.apache.thrift.protocol.TPr
			chemes.get(iprot.getScheme()).ge
			
				
			b
			chemes.get(oprot.getScheme()).ge
			
				
			v
		u

		boolean f
		
				
			b.append("success:");
			f (this.success == null) {
			sb.append("null");
				else {
				b.append(this.success);
				
			i
		s

	}

	

		// check for sub-struct validity
		
		if (success != null) {
			

	}
	
		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOExc
		try {
		

			t
	 * row new java.io.IOException(te);
	 * 
	 
		}
		

		rivate void readObject(java.io.ObjectInputStream in) throws java.io.IOException, C

			// it d
			read(new org.apache.thrift.protocol.TCompactProtocol
				catch (org.apache.thrift.TException te) 
			t
		}

		
		 ivate static class getThing_resultStandardSchemeFactory implements SchemeFa
		 ub
			return new getThing_resultStandardScheme();
			 
			
				
			i
		

			or
		 iprot.readStructBegin(); ile (
		 * rue) {
		 	s
				if (schemeField.type == org.apache.thrift.protocol.TType
					break;
				}
				
				switch (schem
			

					
		 				struct.success.read(iprot);
		 		
						} else {
							org.apache.thrift.pr
			

					default:
						org.apache.thrift.protocol.T

				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
		

			struct.validate();
			
		

			struct.validate();
			
			
		

				struct.success.write
				oprot.writeFieldEnd()
		

			o
	 }
	 
	}
	

		public getThing_resultTupleSchem
			return new getThing_resultTupl
		

	
	private static class 
	

		public void write(org.apache.thrift.protocol.TProtocol 
			TTupleProtocol 
			
		

			}
			oprot.writeBitS
			
				struct.success.write(oprot);
		

	
	 * 
	 * 
	 
		@Override
		public void read(org
			TTupleProtocol iprot = (TTupleProtoco
			

				struct.success
			
				struct.setSuccessIsSet(true);
		

	
	}
		
			
		
			lic static class getMyInt_args imp lement
		rivate static
	

	private static final Map<Class<? extends IS
		tatic {
			chemes.put(St

		
	

	public en
		;
		

		
		

				byName
			}
		}
			
		/

		 */

			switch(f
		

			}
		}
	

		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		

			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field
		

	
		/**
		 * Find the _Fields constant that matches name, or null
		 */

			return byName.
		}
	

		private final String _fieldName;
		
		_Fields(short thriftId, String f
		

		}
		
			ublic short getThriftFieldId() {
					
			return _thriftId;
			
		
		

		}
		
			
			// 
			 isset id assignments
					
		ublic getMyInt_args() {
			
		
	/

	 */
		ublic getMyInt_args(getMyInt_args other) {
			
		
	p

	}

		Override
				
			blic void clear() {
			
			
				lic void setFieldValue(_Fields field,
				itch (field) {
					
				
				
				ic Objec
					ch (field) {
				
				row new IllegalStateE
			
			

			blic boolean isSet(_Fields field) {
			// 
			f (field == null) 
			

		
				
			witch (field) {

			hrow new IllegalStateException();
			
			
		O

		

		if (that instanceof getMyInt_args)
			return this.equals((getMyInt_args)that);
			eturn false;
		
	

		if (that == null)

		
		return true;
				
			
		

		ublic int
		List<Object> list = new ArrayList<Object>();
				
			
		r

	

	

			return getClass().getName().compareTo(other.getClass().getName());
		
		}
			

		int lastComparison = 0;
			 

		return 0;
	}
		
		ublic _Fields fieldForId(int fieldId) {
		

	

	pub
	 * ic void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache
	 * thrift.TException {
	 
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		 

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);

		
			verride
				lic String toString() {
			t
		b

		sb.
		 eturn sb.toString();
		 
		
			blic v oid validat
			 check for require
				check for sub-s
			
				
			i
		t

		} c
		 throw new java.io.IOException(te); 
		 * 
		 
		
			ivate void readObject(java.io.ObjectInput
			ry {
				
			// it doesn't 
			

			th
		 
		 
		
			ivate static class getMy
		p

		}
		

		rivate static class getMyInt_argsStandardSc
			
			ublic void read(org.apa
			

			while (true) {
				schemeField = ip
			

				}
				switch (schemeFie
			
		

				iprot.readFieldEnd()
			}
			iprot.readStructEnd();

	
		

		}
		public 
			struct.validate();
		
		

			o
	 }
	 
	}
		
		rivate static class getMyInt_
		

		}
		
	

	
		@Override
		public void write(org.a
			TTupleProtocol o

	

		public void read(org.apa
			TTupleProtocol ipro
		

	}
		
		
		
	u

	
		rivate static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new o
	

	sta
	 * ic {
	 * 
	 
		schemes.put(StandardScheme.cla
		schemes.put(TupleScheme.class, new getMyInt_resultTupleSchemeFactor
	}

	public Integer success;
		** The set of fields this struct contains, along with convenience methods for finding
	p

		;
		
		private stati
			
				atic {
			for (_Fi
				byName.put(field.get FieldNa
			}
			

		/
		

		public static _Fields findByThriftId(int fi
			switch(fieldId)
				case 0: // 
					return SUCCESS;

			
			}
		

		/*
	 * 
	 * 
	 
		 * Find the _Fields constant that ma
		 * if it is not foun
			*/
		p

			if (fields == n
			return field
			
		
		/**
		

		public s
			return byName.get(name);
		}
			
		private final short _thriftId;
			rivate final String _fieldName; 
		
		

			_fieldName = fieldName;
		}
			

			return _thriftId;
		}
		
			ublic String getFieldName() {
				eturn _fieldN
			
				
		

		ublic getMyI
	}

	public ge
		Integer success) {
		this();

		
		
		**
			 Performs a deep c

		ublic getMyInt_result(g
		

		}
	}
		
			blic getMyInt_result deepCopy() {
		r

		

		ublic void clear() {
		this.success = null;
			
		
		
			blic Integer getSuccess() {
			eturn this.success;
				
			
		u
		this.succ
		

	
		ublic void unsetSuccess() {
		

	
		** Returns true if field success is set (has been assigned a 
	p

	}
		
	p

			this.su
		}
		
		

		switch (field) {
		case SUCCESS:
			if (value == 
				unsetSuccess(
			} else {
		

			break;
		
		}
	}

	public Object getFieldValue(_Fields field) {
		switc
			ase SUCCESS:
					
			return getSuccess();
			
		}
		

	
		** Re
			blic boolean isSet(_Fields field) {
			// 
			f (field == null) {
			throw new IllegalArgumentException();
					
		}
			
		s
		

		}
		throw new IllegalStateException();
			
		
	@

		if (that == null)

		if (that instanceof getMyInt_result)
				
			return this.equals((getMyInt_result)that);
			eturn false;
			
				
				lic boolean equals(getMyInt_result that) {
					(that 
				e
				
				lean this_present_
					ean that_present_success = true && that.isSetSuccess();
						his_present_success || that_prese
						!(this_present_success && tha
					turn fal
						!this.success.equals(that.success))
					t
					
				
					rn true;
				
				
			v
			blic int hashCode() {

			
			// 
			oolean present_suc
		l

			list.add(success);
				
			

			
			
				erride
				lic int compareTo(getMyInt_re
				 (!getClass().equals(oth
				eturn getClass().getNa
			
			
			nt lastComparison = 0;
		

		

		}
		if (isSetSuccess()) {
			lastComparison = org.apache.thrift.TBase
			
		

		}

		
		
				
			blic _Fields fieldForId(int fieldId) {
			eturn _Fields.findByThriftId(fie
			
				
			b
			chemes.get(iprot.getScheme()).ge
			
				
				lic void write(org.apach
			c
		

		Override
		ublic String toString() {
				
			tringBuilder sb = new StringBuilder("getMyInt
			oolean first = true;
			
				.append("success:");
				 (this.success == null) {
			s
		}

		

	

	}
		
		
	
			

		// check for required fields
			 

	}
	
		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
		

			throw new

		}
	 * 
	 * 
	 
	}
		 r

			// it doesn't seem like you should have to do this, but java serialization is wac

		} catch 
			throw new java.io.IOException(te);
				
			
		

		pub
		 return new getMyInt_resultStandardScheme();
		 
		
			 
			vate static 
				
			blic voi
				g.apache.thr
			i
			

				i
		 		break; 
		 * 
		 	s
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thr
							struct.success 
				 iprot.readI32();
							struct.set
			

					
		 			break;
		 		
						org.apache.thrift.protocol.TProtocolUtil.sk
				}
			

			iprot.readStructEnd();
		

			struct.validate();
			
			
		p

		
			oprot.writeStruct
			

				Integer elem332 = struct.suc
				if (elem332 == nu
			
		

				oprot.writeFieldEnd(
			}
		

		}
		
		
	p

			r
	 }
	 
	
		rivate static class g
			
		@
		

			BitSet optionals = new BitSet();
			if (struct.isSetSuccess()) {
		

			oprot.w
			if (struct.isSetSuc
				Integer elem

		

				oprot.writeI32
			}
		

		@Override
		public void
			TTupleProto
		

				struct.success = ip
				struct.setSu
		

	
	 * 
	 * 
	 
	}
		
	

	ublic static class use_subdir_struct_a
		rivate static
			
		r
	

	static {
		schemes.put(Stan
		schemes
			
				
			blic A a
				 The set  of fie
			b
			((shor

		
		

		static {
			for (_Fields fi
				byNam
			}

		
		/**
		

		pu
	 * lic static _Fields findByThriftId(int fieldId) {
	 * 
	 
			switch(fieldId) {
				case 1: // A
					return A;
			

			}
		}
			
		/
		 * Find the _Fields constant that 
		

		public s
			_Fields fields = findByThriftId(fi
			if (fields == nu
			return fields
		}
			 
		/**
		

		public static _Fields findByName(String name) {
			return byName.ge
			

		private final short _thriftId;
		private final String _fieldName;
		
			Fields(short thriftId, String fieldName)
				thriftId = th
			_fieldName = fieldName;
				
		

			return _thr
		

		public S
			return _fieldName;
		}

		
		/ isset id assignmen
		ublic use_subd
			

		ublic use_subdir_struct
		

		this.a =
	}
		
			*
		*

		ublic use_subdir_struct

			this.a = new A(other.a);
		}
			
		
		ublic use_subdi
			eturn new use_subdir_struct_args(this);
			
				
			v
		u
		this.a = 
	

	
		ublic A getA() {
		

	
		ublic use_subdir_struct_args setA(A a) {
		

	}
		
	p

	}
	
		** Returns true if field a is set (has been assigned a value) an
		ublic boolean isSetA(

		
		
			blic void setAIsSe
		if (!val
			this.a = null;
		}
		
		
		ublic void setFieldVa
		

			if (value == null) {
				unsetA();
			} else {
				setA((A)value)
			}
			
	

	}
		
			blic Object getFieldValue(_Fields field) {
					
		switch (field) {
			ase A:
			
	

		throw new IllegalStateException();
		
			
			// 
			* Returns true if field corresponding to fieldID is s
					et (has been assigned a value) and false otherwise */
		ublic boolean isSet(_Fields field) {
			f (field == null) {
			
		

		switch (field) {
		case A:
			return isSetA();
		}
		

	

		ublic boolean equals(Object that) {
				
			f (that == null)
			return false;
			f (that instan
				eturn this.equals((use_subdir_struct_
				turn false;
					
				
				lic boolean equals(use_su
				(that == nul
					urn false;
						
						an this_present_a = t
						an that_present_a = tru
					this_pre
						!(this_present_a && that_present_a))
					t
					(!this
				eturn fa
					
				
				turn true;
			
			

			blic int hashCode() {
			// 
			ist<Object> list =
		

		list.add(present_a);
				
			f (present_a)

			
			eturn list.hashCode();
				
				
				erride
			b
			f (!getClass().equals(o
			return getClass().getNa
		}

		

		lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
		if (lastComparison != 0) {
			return lastComparison;
		}
		

			if (lastComparison != 0) {

			}
		}
				
			eturn 0;
			
			
				lic _Fields field
			e
			
			
				lic void read(org.apac
			c
		

		ublic voi
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
				
			
			
			verride
				lic String toString
				ringBuilder sb = new 
				olean first = true;
			
		s

		

	

		first = false;
		
		
		sb.append(")");
			

	}
			 

	public void validate() throws org.apache.thrift.TException {
		// chec
		// check for sub-struct validity
		if (a != null) {
		

	}

	
	 * 
	 * 
	 
	private void writeObject(java.io.ObjectOutputStream out) throws
		try { 	

			throw new java.io.IOException(te);

		
			
				vate void readObject(java.io.ObjectInput
			r
			

		} c
		 throw new java.io.IOException(te);
		 
		
			 
			vate static class 
				lic use_subdir_
			eturn ne
				
			
		

		
		 ublic void read(org.apache.thrift.protocol.TProtocol iprot, use_subdir_ g.apa
		 * he.thrift.pro
		 ip
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.ty
				e == org.apache.thrift.protocol.TType.STOP) {
					break;
			

					
		 			if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
		 		
							struct.a.read(iprot);
							struct.setAIsSet(tru
			

						}
						break;

						org.apache.thrift.protocol.TProtocolUti
				}
				iprot.readFieldEnd();
			

		
			// check for requ
			

		
			ublic void write(o
			
	

			if (struct.a != null)
				oprot.writeFieldBegin(A_FIELD_DE
		

			}	oprot.write
			oprot.
		}
	

	
	 rivate static class use_subdir_struct_a
	 pu
			return new use_subdir_struct_argsTupleScheme();
		}
			
		
	p

		@Override
		public void write(org.apache.thrift.protoc
		

			if (str
				optionals.set(0);
			}

		

			}
		}
	

		public void read(org.apache.thrift.protocol.TProtocol 
			TTupleProtocol iprot =
			BitSet inco
		

				struct.a.read(iprot);
				struct.setAIsSet(t
		

	
	 * 
	 * 
	 
	}
		
	

	ublic static class use_subdir_struct_result 
		rivate static
			
		r
	

	static {
		schemes.put(Stan
		schemes.put(T
			
				
			blic A s
				 The set of fi elds th
			b
			UCCESS

		
		

		static {
			for (_Fields fi
				byName.put(
			}

		
		/**
		

		pu
	 * lic static _Fields findByThriftId(int fieldId) {
	 * 
	 
			switch(fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
			

			}
		}
			
		/
		 * Find the _Fields constant that 
		

		public s
			_Fields fields = findByThriftId(fi
			if (fields == nu
			return fields
		}
			 
		/**
		

		public static _Fields findByName(String name) {
			return byName.ge
			

		private final short _thriftId;
		private final String _fieldName;
		
			Fields(short thriftId, String fieldName) {
				thriftId = th
			_fieldName = fieldName;
				
		

			return _thr
		

		public S
			return _fieldName;
		}

		
		/ isset id assignments
		ublic use_subdir_str
			

		ublic use_subdir_struct
		

		this.suc
	}
		
			*
		*

		ublic use_subdir_struct

			this.success = new A(other.success);
		}
			
		
		ublic use_subdir_stru
			eturn new use_subdir_struct_result(this);
			
				
			v
		u
		this.succ
	

	
		ublic A getSuccess() {
		

	
		ublic use_subdir_struct_result setSuccess(A success) {
		

	}
		
	p

	}
	
		** Returns true if field success is set (has been assigned a value
		ublic boolean isSetSu

		
		
			blic void setSucce
		if (!val
			this.success = null;
		}
		
		
		ublic void setFieldVa
		

			if (value == null) {
				unsetSuccess();
			} else {
				setSuccess((A)value)
			}
			
	

	}
		
			blic Object getFieldValue(_Fields field) {
					
		switch (field) {
			ase SUCCESS:
			
	

		throw new IllegalStateException();
		
			
			// 
			* Returns true if field corresponding to fieldID is s
					et (has been assigned a value) and false otherwise */
		ublic boolean isSet(_Fields field) {
			f (field == null) {
			
		

		switch (field) {
		case SUCCESS:
			return isSetSuccess();
		}
		

	

		ublic boolean equals(Object that) {
				
			f (that == null)
			return false;
			f (that instan
				eturn this.equals((use_subdir_struct_
				turn false;
					
				
				lic boolean equals(use_su
				(that == null)
					urn false;
						
						an this_present_success = t
						an that_present_success = tru
					this_pre
						!(this_present_success && that_present_success))
					t
					(!this
				eturn fa
					
				
				turn true;
			
			

			blic int hashCode() {
			// 
			ist<Object> list =
		

		list.add(present_success);
				
			f (present_success

			
			eturn list.hashCode();
				
				
				erride
			b
			f (!getClass().equals(o
			return getClass().getNa
		}

		

		lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
		if (lastComparison != 0) {
			return lastComparison;
		}
		

			if (lastComparison != 0) {

			}
		}
				
			eturn 0;
			
			
				lic _Fields field
			e
			
			
				lic void read(org.apache.thr
			c
		

		ublic voi
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
				
			
			
			verride
				lic String toString() {
				ringBuilder sb = new String
				olean first = true;
			
		s

		

	

		first = false;
		
		sb.append(")");
			

	}
			 

	public void validate() throws org.apache.thrift.TException {
		// chec
		// check for sub-struct validity
		if (success != null) {
		

	}

	
	 * 
	 * 
	 
	private void writeObject(java.io.ObjectOutputStream out) throws
		try { 	

			throw new java.io.IOException(te);

		
			
				vate void readObject(java.io.ObjectInput
			r
			

		} c
		 throw new java.io.IOException(te);
		 
		
			 
			vate static class use_
				lic use_subdir_stru
			eturn ne
				
			
		

		
		 ublic void read(org.apache.thrift.protocol.TProtocol iprot, use_subdir_ g.apa
		 * he.thrift.pro
		 ip
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.ty
				e == org.apache.thrift.protocol.TType.STOP) {
					break;
			

					
		 			if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
		 		
							struct.success.read(iprot);
							struct.setSuccessIsS
			

						}
						break;

						org.apache.thrift.protocol.TProtocolUti
				}
				iprot.readFieldEnd();
			

		
			// check for requ
			

		
			ublic void write(o
			
	

			if (struct.success !=
				oprot.writeFieldBegin(SUC
		

			}	oprot.writeFieldSto
			oprot.
		}
	

	
	 rivate static class use_subdir_struct_r
	 pu
			return new use_subdir_struct_resultTupleScheme();
		}
			
		
	p

		@Override
		public void write(org.apache.thrift
		

			if (str
				optionals.set(0);
			}

		

			}
		}
	

		public void read(org.apache.thrift.protocol.TProtocol prot
			TTupleProtocol iprot = (TTup
			BitSet inco
		

				struct.success.read(iprot);
				struct.setSuccessIsSe
		

	
	 * 
	 * 
	 
	}
		
	

	ublic static class sayHelloWith_args implements
		rivate static
			
		r
	

	static {
		schemes.put(Stan
		schemes.put(Tuple
			
				
			blic Str
				 The set of fields thi s struc
			b
			EW_MES

		
		

		static {
			for (_Fields fi
				byName.put(fiel
			}

		
		/**
		

		pu
	 * lic static _Fields findByThriftId(int fieldId) {
	 * 
	 
			switch(fieldId) {
				case 1: // NEW_MES
					return NEW_MESSAGE;
			

			}
		}
			
		/
		 * Find the _Fields constant that 
		

		public s
			_Fields fields = findByThriftId(fi
			if (fields == nu
			return fields
		}
			 
		/**
		

		public static _Fields findByName(String name) 
			return byName.ge
			

		private final short _thriftId;
		private final String _fieldName;
		
			Fields(short thriftId, String fieldName) {
				thriftId = th
			_fieldName = fieldName;
				
		

			return _thr
		

		public S
			return _fieldName;
		}

		
		/ isset id assignments
		ublic sayHelloWith_args
			

		ublic sayHelloWith_args
		

		this.new
	}
		
			*
		*

		ublic sayHelloWith_args

			this.newMessage = other.newMessage;
		}
			
		
		ublic sayHelloWith_args 
			eturn new sayHelloWith_args(this);
			
				
			v
		u
		this.newM
	

	
		ublic String getNewMessage() {
		

	
		ublic sayHelloWith_args setNewMessage(String newMessage) {
		

	}
		
	p

	}
	
		** Returns true if field newMessage is set (has been assign
		ublic boolean isSetNe

		
		
			blic void setNewMe
		if (!val
			this.newMessage = null;
		}
		
		
		ublic void setFieldVa
		

			if (value == null) {
				unsetNewMessage();
			} else {
		

			break;
		
			
					
		
			
		u
		

			return getNewMessage();
		
			
			// 
			hrow new IllegalStateException();
					
		
			
		*
	p

			throw new IllegalArgumentException();
		}
			
		s
		

		}

		
				
			
			verride
			blic boolean e
				 (that == null)
				eturn false;
					(that 
				e
				turn false;
				
					
						 boolean equals(sayHelloWith_args that)
						hat == null)
					urn fals
						
					e
					ean th
				(this_pr
					(!(this_present_newMessage && that_present_newMessage))
				r
				f (!this.newMessage.e
				
			

			eturn true;
			// 
			
		

		ublic int hashCode() {
				
			ist<Object> list =

			oolean present_newMessage = true && 
			ist.add(present_newMessage);
				 (present_newMessage)
				ist.add(newMessage);
				
				turn list.hashCode();
			
			
			verride
		u

		

	
		int lastComparison = 0;
			
		l
		

		}

			lastComp
			if (lastComparison != 0) {
				
				return lastComparison;
			}
			
				turn 0;
			
			
			blic _Fields fieldForId(int fie
				turn _Fields.findByThriftId(fieldId
				
			
		u

		
		
				
			blic void write(org.apache.thrift.protocol.TP
			chemes.get(oprot.getScheme()).getSchem
			
				
				erride
			b
		S

	

	

		} else {
		
		
			sb.append(this.newMessage);
			

		first = false;
			 

		return sb.toString();
	}
		
		ublic void validate() throws org.apache.thrift.TException {
		

	}

	
	 * 
	 * 
	 
	private void writeObject(java.io.ObjectOutputStream out) throws
		try { 	

			throw new java.io.IOException(te);

		
			
				vate void readObject(java.io.ObjectInput
			r
			

		} c
		 throw new java.io.IOException(te);
		 
		
			 
			vate static class 
				lic sayHelloWit
			eturn ne
				
			
		

		
		 ublic void read(org.apache.thrift.protocol.TProtocol iprot, sayHelloWit g.apa
		 * he.thrift.pro
		 ip
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.ty
				e == org.apache.thrift.protocol.TType.STOP) {
					break;
			

					
		 			if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
		 		
							struct.setNewMessageIsSet(true);
						} else {
			

						break;
					default:

				}
				iprot.readFieldEnd()
			}
			

			// check for required fields of 
			struct.validate()
		}

		public void write(org.apache.t
			struct.validate();
		
		

				oprot.writeFieldBegi
				String elem334 = struct.new
		

			}	oprot.writeField
			oprot.
		}
	

	
	 rivate static class sayHelloWith_argsTu
	 pu
			return new sayHelloWith_argsTupleScheme();
		}
			
		
	p

		@Override
		public void write(org.apache.thrift.p
		

			if (str
				optionals.set(0);
			}

		

				oprot.writeString(elem335
			}
		

		@Override
		public void read(org.ap
			TTupleProto
		

				struct.newMessage = iprot
				struct.setNewMessa
		

	
	 * 
	 * 
	 
	}
		
	

	ublic static class sayHelloWith_result imple
		rivate static
			
		r
	

	static {
		schemes.put(Stan
		schemes.put(T
			
				
			blic Str
				 The set of fields  this st
			b
			UCCESS

		
		

		static {
			for (_Fields fi
				byName.put(
			}

		
		/**
		

		pu
	 * lic static _Fields findByThriftId(int fieldId) {
	 * 
	 
			switch(fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
			

			}
		}
			
		/
		 * Find the _Fields constant that 
		

		public s
			_Fields fields = findByThriftId(fi
			if (fields == nu
			return fields
		}
			 
		/**
		

		public static _Fields findByName(String name) {
			return byName.ge
			

		private final short _thriftId;
		private final String _fieldName;
		
			Fields(short thriftId, String fieldName) {
				thriftId = th
			_fieldName = fieldName;
				
		

			return _thr
		

		public S
			return _fieldName;
		}

		
		/ isset id assignments
		ublic sayHelloWith_r
			

		ublic sayHelloWith_resu
		

		this.suc
	}
		
			*
		*

		ublic sayHelloWith_resu

			this.success = other.success;
		}
			
		
		ublic sayHelloWith_re
			eturn new sayHelloWith_result(this);
			
				
			v
		u
		this.succ
	

	
		ublic String getSuccess() {
		

	
		ublic sayHelloWith_result setSuccess(String success) {
		

	}
		
	p

	}
	
		** Returns true if field success is set (has been assigned a 
		ublic boolean isSetSu

		
		
			blic void setSucce
		if (!val
			this.success = null;
		}
		
		
		ublic void setFieldVa
		

			if (value == null) {
				unsetSuccess();
			} else {
		

			break;
		
			
					
		
			
		u
		

			return getSuccess();
		
			
			// 
			hrow new IllegalStateException();
					
		
			
		*
	p

			throw new IllegalArgumentException();
		}
			
		s
		

		}

		
				
			
			verride
			blic boolean e
				 (that == null)
				eturn false;
					(that 
				e
				turn false;
				
					
						 boolean equals(sayHelloWith_result 
						hat == null)
					urn fals
						
					e
					ean th
				(this_pr
					(!(this_present_success && that_present_success))
				r
				f (!this.success.equa
				
			

			eturn true;
			// 
			
		

		ublic int hashCode() {
				
			ist<Object> list =

			oolean present_success = true && (is
			ist.add(present_success);
				 (present_success)
				ist.add(success);
				
				turn list.hashCode();
			
			
			verride
		u

		

	
		int lastComparison = 0;
			
		l
		

		}

			lastComp
			if (lastComparison != 0) {
				
				return lastComparison;
			}
			
				turn 0;
			
			
			blic _Fields fieldForId(int 
				turn _Fields.findByThriftId(fiel
				
			
		u

		
		
				
			blic void write(org.apache.thrift.protocol.TP
			chemes.get(oprot.getScheme()).getSchem
			
				
				erride
			b
		S

	

	

		} else {
		
			sb.append(this.success);
			

		first = false;
			 

		return sb.toString();
	}
		
		ublic void validate() throws org.apache.thrift.TException {
		

	}

	
	 * 
	 * 
	 
	private void writeObject(java.io.ObjectOutputStream out) throws
		try { 	

			throw new java.io.IOException(te);

		
			
				vate void readObject(java.io.ObjectInput
			r
			

		} c
		 throw new java.io.IOException(te);
		 
		
			 
			vate static class sayHe
				lic sayHelloWith_res
			eturn ne
				
			
		

		
		 ublic void read(org.apache.thrift.protocol.TProtocol iprot, sayHelloWit g.apa
		 * he.thrift.pro
		 ip
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.ty
				e == org.apache.thrift.protocol.TType.STOP) {
					break;
			

					
		 			if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
		 		
							struct.setSuccessIsSet(true);
						} else {
			

						break;
					default:

				}
				iprot.readFieldEnd()
			}
			

			// check for required fields of 
			struct.validate()
		}

		public void write(org.apache.t
			struct.validate();
		
		

				oprot.writeFieldBegi
				String elem336 = struct.s
		

			}	oprot.writeFieldStop
			oprot.
		}
	

	
	 rivate static class sayHelloWith_result
	 pu
			return new sayHelloWith_resultTupleScheme();
		}
			
		
	p

		@Override
		public void write(org.apache.thrift
		

			if (str
				optionals.set(0);
			}

		

				oprot.writeString(elem337);
			}
		

		@Override
		public void read(org.apache.thr
			TTupleProto
		

				struct.success = iprot.readSt
				struct.setSuccessIsSet
		

	
	 * 
	 * 
	 
	}
		
	

	ublic static class whatDoYouSay_args implements 
		rivate static
			
		r
	

	static {
		schemes.put(Stan
		schemes.put(TupleS
			
				
			blic Str
				 The set of fields this  struct
			b
			ESSAGE

		
		

		static {
			for (_Fields fi
				byName.put(field
			}

		
		/**
		

		pu
	 * lic static _Fields findByThriftId(int fieldId) {
	 * 
	 
			switch(fieldId) {
				case 1: // MESSAGE
					return MESSAGE_ARGS;
			

			}
		}
			
		/
		 * Find the _Fields constant that 
		

		public s
			_Fields fields = findByThriftId(fi
			if (fields == nu
			return fields
		}
			 
		/**
		

		public static _Fields findByName(String name) 
			return byName.ge
			

		private final short _thriftId;
		private final String _fieldName;
		
			Fields(short thriftId, String fieldName) {
				thriftId = th
			_fieldName = fieldName;
				
		

			return _thr
		

		public S
			return _fieldName;
		}

		
		/ isset id assignments
		ublic whatDoYouSay_args(
			

		ublic whatDoYouSay_args
		

		this.mes
	}
		
			*
		*

		ublic whatDoYouSay_args

			this.messageArgs = other.messageArgs;
		}
			
		
		ublic whatDoYouSay_args d
			eturn new whatDoYouSay_args(this);
			
				
			v
		u
		this.mess
	

	
		ublic String getMessageArgs() {
		

	
		ublic whatDoYouSay_args setMessageArgs(String messageArgs) {
		

	}
		
	p

	}
	
		** Returns true if field messageArgs is set (has been assig
		ublic boolean isSetMe

		
		
			blic void setMessa
		if (!val
			this.messageArgs = null;
		}
		
		
		ublic void setFieldVa
		

			if (value == null) {
				unsetMessageArgs();
			} else {
		

			break;
		
			
					
		
			
		u
		

			return getMessageArgs();
		
			
			// 
			hrow new IllegalStateException();
					
		
			
		*
	p

			throw new IllegalArgumentException();
		}
			
		s
		

		}

		
				
			
			verride
			blic boolean e
				 (that == null)
				eturn false;
					(that 
				e
				turn false;
				
					
						 boolean equals(whatDoYouSay_args that) 
						hat == null)
					urn fals
						
					e
					ean th
				(this_pr
					(!(this_present_messageArgs && that_present_messageArgs))
				r
				f (!this.messageArgs.
				
			

			eturn true;
			// 
			
		

		ublic int hashCode() {
				
			ist<Object> list =

			oolean present_messageArgs = true &&
			ist.add(present_messageArgs);
				 (present_messageArgs)
				ist.add(messageArgs);
				
				turn list.hashCode();
			
			
			verride
		u

		

	
		int lastComparison = 0;
			
		l
		

		}

			lastComp
			if (lastComparison != 0) {
				
				return lastComparison;
			}
			
				turn 0;
			
			
			blic _Fields fieldForId(int fiel
				turn _Fields.findByThriftId(fieldId)
				
			
		u

		
		
				
			blic void write(org.apache.thrift.protocol.TP
			chemes.get(oprot.getScheme()).getSchem
			
				
				erride
			b
		S

	

	

		} else {
		
		
			sb.append(this.messageArgs);
			

		first = false;
			 

		return sb.toString();
	}
		
		ublic void validate() throws org.apache.thrift.TException {
		

	}

	
	 * 
	 * 
	 
	private void writeObject(java.io.ObjectOutputStream out) throws
		try { 	

			throw new java.io.IOException(te);

		
			
				vate void readObject(java.io.ObjectInput
			r
			

		} c
		 throw new java.io.IOException(te);
		 
		
			 
			vate static class 
				lic whatDoYouSa
			eturn ne
				
			
		

		
		 ublic void read(org.apache.thrift.protocol.TProtocol iprot, whatDoYouSa g.apa
		 * he.thrift.pro
		 ip
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.ty
				e == org.apache.thrift.protocol.TType.STOP) {
					break;
			

					
		 			if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
		 		
							struct.setMessageArgsIsSet(true);
						} else {
			

						break;
					default:

				}
				iprot.readFieldEnd()
			}
			

			// check for required fields of 
			struct.validate()
		}

		public void write(org.apache.t
			struct.validate();
		
		

				oprot.writeFieldBegi
				String elem338 = struct.mes
		

			}	oprot.writeField
			oprot.
		}
	

	
	 rivate static class whatDoYouSay_argsTu
	 pu
			return new whatDoYouSay_argsTupleScheme();
		}
			
		
	p

		@Override
		public void write(org.apache.thrift.p
		

			if (str
				optionals.set(0);
			}

		

				oprot.writeString(elem339
			}
		

		@Override
		public void read(org.ap
			TTupleProto
		

				struct.messageArgs = ipro
				struct.setMessageA
		

	
	 * 
	 * 
	 
	}
		
	

	ublic static class whatDoYouSay_result imple
		rivate static
			
		r
	

	static {
		schemes.put(Stan
		schemes.put(T
			
				
			blic Str
				 The set of fields  this st
			b
			UCCESS

		
		

		static {
			for (_Fields fi
				byName.put(
			}

		
		/**
		

		pu
	 * lic static _Fields findByThriftId(int fieldId) {
	 * 
	 
			switch(fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
			

			}
		}
			
		/
		 * Find the _Fields constant that 
		

		public s
			_Fields fields = findByThriftId(fi
			if (fields == nu
			return fields
		}
			 
		/**
		

		public static _Fields findByName(String name) {
			return byName.ge
			

		private final short _thriftId;
		private final String _fieldName;
		
			Fields(short thriftId, String fieldName) {
				thriftId = th
			_fieldName = fieldName;
				
		

			return _thr
		

		public S
			return _fieldName;
		}

		
		/ isset id assignments
		ublic whatDoYouSay_r
			

		ublic whatDoYouSay_resu
		

		this.suc
	}
		
			*
		*

		ublic whatDoYouSay_resu

			this.success = other.success;
		}
			
		
		ublic whatDoYouSay_re
			eturn new whatDoYouSay_result(this);
			
				
			v
		u
		this.succ
	

	
		ublic String getSuccess() {
		

	
		ublic whatDoYouSay_result setSuccess(String success) {
		

	}
		
	p

	}
	
		** Returns true if field success is set (has been assigned a 
		ublic boolean isSetSu

		
		
			blic void setSucce
		if (!val
			this.success = null;
		}
		
		
		ublic void setFieldVa
		

			if (value == null) {
				unsetSuccess();
			} else {
		

			break;
		
			
					
		
			
		u
		

			return getSuccess();
		
			
			// 
			hrow new IllegalStateException();
					
		
			
		*
	p

			throw new IllegalArgumentException();
		}
			
		s
		

		}

		
				
			
			verride
			blic boolean e
				 (that == null)
				eturn false;
					(that 
				e
				turn false;
				
					
						 boolean equals(whatDoYouSay_result 
						hat == null)
					urn fals
						
					e
					ean th
				(this_pr
					(!(this_present_success && that_present_success))
				r
				f (!this.success.equa
				
			

			eturn true;
			// 
			
		

		ublic int hashCode() {
				
			ist<Object> list =

			oolean present_success = true && (is
			ist.add(present_success);
				 (present_success)
				ist.add(success);
				
				turn list.hashCode();
			
			
			verride
		u

		

	
		int lastComparison = 0;
			
		l
		

		}

			lastComp
			if (lastComparison != 0) {
				
				return lastComparison;
			}
			
				turn 0;
			
			
			blic _Fields fieldForId(int 
				turn _Fields.findByThriftId(fiel
				
			
		u

		
		
				
			blic void write(org.apache.thrift.protocol.TP
			chemes.get(oprot.getScheme()).getSchem
			
				
				erride
			b
		S

	

	

		} else {
		
			sb.append(this.success);
			

		first = false;
			 

		return sb.toString();
	}
		
		ublic void validate() throws org.apache.thrift.TException {
		

	}

	
	 * 
	 * 
	 
	private void writeObject(java.io.ObjectOutputStream out) throws
		try { 	

			throw new java.io.IOException(te);

		
			
				vate void readObject(java.io.ObjectInput
			r
			

		} c
		 throw new java.io.IOException(te);
		 
		
			 
			vate static class whatDoY
				lic whatDoYouSay_resul
			eturn ne
				
			
		

		
		 ublic void read(org.apache.thrift.protocol.TProtocol iprot, whatDoYouSa g.apa
		 * he.thrift.pro
		 ip
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.ty
				e == org.apache.thrift.protocol.TType.STOP) {
					break;
			

					
		 			if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
		 		
							struct.setSuccessIsSet(true);
						} else {
			

						break;
					default:

				}
				iprot.readFieldEnd()
			}
			

			// check for required fields of 
			struct.validate()
		}

		public void write(org.apache.t
			struct.validate();
		
		

				oprot.writeFieldBegi
				String elem340 = stru
		

			}	oprot.writeFieldStop()
			oprot.
		}
	

	
	 rivate static class whatDoYouSay_result
	 pu
			return new whatDoYouSay_resultTupleScheme
		}
			
		
	p

		@Override
		public void write(org.apache.th
		

			if (str
				optionals.set(0);
			}

		

				oprot.writeString(elem341);
			}
		

		@Override
		public void read(org.apache.thrift.
			TTupleProto
		

				struct.success = iprot.readStri
				struct.setSuccessIsSet(t
		

	
	 * 
	 * 
	 
	}
		
	

	ublic static class sayAgain_args implements org.ap
		rivate static
			
		r
	

	static {
		schemes.put(Stan
		schemes.put(TupleSch
			
				
			blic Str
				 The set of fields this s truct c
			b
			ESSAGE

		
		

		static {
			for (_Fields fi
				byName.put(field.g
			}

		
		/**
		

		pu
	 * lic static _Fields findByThriftId(int fieldId) {
	 * 
	 
			switch(fieldId) {
				case 1: // MESSAGE
					return MESSAGE_RESULT;
			

			}
		}
			
		/
		 * Find the _Fields constant that 
		

		public s
			_Fields fields = findByThriftId(fi
			if (fields == nu
			return fields
		}
			 
		/**
		

		public static _Fields findByName(String na
			return byName.ge
			

		private final short _thriftId;
		private final String _fieldName;
		
			Fields(short thriftId, String fieldName) {
				thriftId = th
			_fieldName = fieldName;
				
		

			return _thr
		

		public S
			return _fieldName;
		}

		
		/ isset id assignments
		ublic sayAgain_args() {
			

		ublic sayAgain_args(
		

		this.mes
	}
		
			*
		*

		ublic sayAgain_args(say

			this.messageResult = other.messageResult;
		}
			
		
		ublic sayAgain_args deepCop
			eturn new sayAgain_args(this);
			
				
			v
		u
		this.mess
	

	
		ublic String getMessageResult() {
		

	
		ublic sayAgain_args setMessageResult(String messageResult) {
		

	}
		
	p

	}
	
		** Returns true if field messageResult is set (has been
		ublic boolean isSetMe

		
		
			blic void setMessa
		if (!val
			this.messageResult = null;
		}
		
		
		ublic void setFieldVa
		

			if (value == null) {
				unsetMessageResult();
			} else {
		

			break;
		
			
					
		
			
		u
		

			return getMessageResult();
		
			
			// 
			hrow new IllegalStateException();
					
		
			
		*
	p

			throw new IllegalArgumentException();
		}
			
		s
		

		}

		
				
			
			verride
			blic boolean e
				 (that == null)
				eturn false;
					(that 
				e
				turn false;
				
					
						 boolean equals(sayAgain_args that) {
						hat == null)
					urn fals
						
					e
					ean th
				(this_pr
					(!(this_present_messageResult && that_present_messageResult))
				r
				f (!this.messageResul
				
			

			eturn true;
			// 
			
		

		ublic int hashCode() {
				
			ist<Object> list =

			oolean present_messageResult = true 
			ist.add(present_messageResult);
				 (present_messageResult)
				ist.add(messageResult);
				
				turn list.hashCode();
			
			
			verride
		u

		

	
		int lastComparison = 0;
			
		l
		

		}

			lastComp
			if (lastComparison != 0) {
				
				return lastComparison;
			}
			
				turn 0;
			
			
			blic _Fields fieldForId(int fieldI
				turn _Fields.findByThriftId(fieldId);
				
			
		u

		
		
				
			blic void write(org.apache.thrift.protocol.TP
			chemes.get(oprot.getScheme()).getSchem
			
				
				erride
			b
		S

	

	

		} else {
		
			sb.append(this.messageResult);
			

		first = false;
			 

		return sb.toString();
	}
		
		ublic void validate() throws org.apache.thrift.TException {
		

	}

	
	 * 
	 * 
	 
	private void writeObject(java.io.ObjectOutputStream out) throws
		try { 	

			throw new java.io.IOException(te);

		
			
				vate void readObject(java.io.ObjectInput
			r
			

		} c
		 throw new java.io.IOException(te);
		 
		
			 
			vate static class 
				lic sayAgain_ar
			eturn ne
				
			
		

		
		 ublic void read(org.apache.thrift.protocol.TProtocol iprot, sayAgain_ar g.apa
		 * he.thrift.pro
		 ip
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.ty
				e == org.apache.thrift.protocol.TType.STOP) {
					break;
			

					
		 			if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
		 		
							struct.setMessageResultIsSet(true);
						} else {
			

						break;
					default:

				}
				iprot.readFieldEnd()
			}
			

			// check for required fields of 
			struct.validate()
		}

		public void write(org.apache.t
			struct.validate();
		
		

				oprot.writeFieldBegi
				String elem342 = struct
		

			}	oprot.writeField
			oprot.
		}
	

	
	 rivate static class sayAgain_argsTupleS
	 pu
			return new sayAgain_argsTupleScheme();
		}
			
		
	p

		@Override
		public void write(org.apache.thri
		

			if (str
				optionals.set(0);
			}

		

				oprot.writeString(elem343
			}
		

		@Override
		public void read(org.ap
			TTupleProto
		

				struct.messageResult = ip
				struct.setMessageR
		

	
	 * 
	 * 
	 
	}
		
	

	ublic static class sayAgain_result implement
		rivate static
			
		r
	

	static {
		schemes.put(Stan
		schemes.put(T
			
				
			blic Str
				 The set of fields  this st
			b
			UCCESS

		
		

		static {
			for (_Fields fi
				byName.put(
			}

		
		/**
		

		pu
	 * lic static _Fields findByThriftId(int fieldId) {
	 * 
	 
			switch(fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
			

			}
		}
			
		/
		 * Find the _Fields constant that 
		

		public s
			_Fields fields = findByThriftId(fi
			if (fields == nu
			return fields
		}
			 
		/**
		

		public static _Fields findByName(String name
			return byName.ge
			

		private final short _thriftId;
		private final String _fieldName;
		
			Fields(short thriftId, String fieldName) {
				thriftId = th
			_fieldName = fieldName;
				
		

			return _thr
		

		public S
			return _fieldName;
		}

		
		/ isset id assignments
		ublic sayAgain_resul
			

		ublic sayAgain_result(
		

		this.suc
	}
		
			*
		*

		ublic sayAgain_result(s

			this.success = other.success;
		}
			
		
		ublic sayAgain_result
			eturn new sayAgain_result(this);
			
				
			v
		u
		this.succ
	

	
		ublic String getSuccess() {
		

	
		ublic sayAgain_result setSuccess(String success) {
		

	}
		
	p

	}
	
		** Returns true if field success is set (has been assigne
		ublic boolean isSetSu

		
		
			blic void setSucce
		if (!val
			this.success = null;
		}
		
		
		ublic void setFieldVa
		

			if (value == null) {
				unsetSuccess();
			} else {
		

			break;
		
			
					
		
			
		u
		

			return getSuccess();
		
			
			// 
			hrow new IllegalStateException();
					
		
			
		*
	p

			throw new IllegalArgumentException();
		}
			
		s
		

		}

		
				
			
			verride
			blic boolean e
				 (that == null)
				eturn false;
					(that 
				e
				turn false;
				
					
						 boolean equals(sayAgain_result that
						hat == null)
					urn fals
						
					e
					ean th
				(this_pr
					(!(this_present_success && that_present_success))
				r
				f (!this.success.equa
				
			

			eturn true;
			// 
			
		

		ublic int hashCode() {
				
			ist<Object> list =

			oolean present_success = true && (is
			ist.add(present_success);
				 (present_success)
				ist.add(success);
				
				turn list.hashCode();
			
			
			verride
		u

		

	
		int lastComparison = 0;
			
		l
		

		}

			lastComp
			if (lastComparison != 0) {
				
				return lastComparison;
			}
			
				turn 0;
			
			
			blic _Fields fieldForId(int 
				turn _Fields.findByThriftId(fiel
				
			
		u

		
		
				
			blic void write(org.apache.thrift.protocol.TP
			chemes.get(oprot.getScheme()).getSchem
			
				
				erride
			b
		S

	

		if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class sayAgain_resultStandardSchemeFactory implements SchemeFactory {
			public sayAgain_resultStandardScheme getScheme() {
				return new sayAgain_resultStandardScheme();
			}
		}

		private static class sayAgain_resultStandardScheme extends StandardScheme<sayAgain_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sayAgain_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.success = iprot.readString();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sayAgain_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					String elem344 = struct.success;
					oprot.writeString(elem344);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sayAgain_resultTupleSchemeFactory implements SchemeFactory {
			public sayAgain_resultTupleScheme getScheme() {
				return new sayAgain_resultTupleScheme();
			}
		}

		private static class sayAgain_resultTupleScheme extends TupleScheme<sayAgain_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sayAgain_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					String elem345 = struct.success;
					oprot.writeString(elem345);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sayAgain_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

}