/**
 * Autogenerated by Frugal Compiler (3.4.6)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package variety.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.workiva.frugal.FContext;
import com.workiva.frugal.exception.TApplicationExceptionType;
import com.workiva.frugal.exception.TTransportExceptionType;
import com.workiva.frugal.middleware.InvocationHandler;
import com.workiva.frugal.middleware.ServiceMiddleware;
import com.workiva.frugal.processor.FBaseProcessor;
import com.workiva.frugal.processor.FProcessor;
import com.workiva.frugal.processor.FProcessorFunction;
import com.workiva.frugal.protocol.*;
import com.workiva.frugal.provider.FServiceProvider;
import com.workiva.frugal.transport.FTransport;
import com.workiva.frugal.transport.TMemoryOutputBuffer;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TMessage;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;
import java.util.Arrays;
import java.util.concurrent.*;

public class FFoo {

	private static final Logger logger = LoggerFactory.getLogger(FFoo.class);

	/**
	 * This is a thrift service. Frugal will generate bindings that include a frugal
	 * Context for each service call.
	 */
	public interface Iface extends actual_base.java.FBaseFoo.Iface {

		/**
		 * Ping the server.
		 * 
		 * @deprecated don't use this; use "something else"
		 */
		@Deprecated
		public void Ping(FContext ctx) throws TException;

		/**
		 * Blah the server.
		 */
		public long blah(FContext ctx, int num, String Str, Event event)
				throws TException, AwesomeException, actual_base.java.api_exception;

		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, long id, java.util.Map<Integer, String> req) throws TException;

		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str)
				throws TException, actual_base.java.api_exception;

		public long param_modifiers(FContext ctx, int opt_num, int default_num, int req_num) throws TException;

		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type,
				java.util.Set<Long> set_type) throws TException;

		public Thing getThing(FContext ctx) throws TException;

		public int getMyInt(FContext ctx) throws TException;

		public A use_subdir_struct(FContext ctx, A a) throws TException;

		public String sayHelloWith(FContext ctx, String newMessage) throws TException;

		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException;

		public String sayAgain(FContext ctx, String messageResult) throws TException;

	}

	public static class Client extends actual_base.java.FBaseFoo.Client implements Iface {

		private Iface proxy;

		public Client(FServiceProvider provider, ServiceMiddleware... middleware) {
			super(provider, middleware);
			Iface client = new InternalClient(provider);
			List<ServiceMiddleware> combined = new ArrayList<ServiceMiddleware>(Arrays.asList(middleware));
			combined.addAll(provider.getMiddleware());
			middleware = combined.toArray(new ServiceMiddleware[0]);
			proxy = InvocationHandler.composeMiddleware(client, Iface.class, middleware);
		}

		/**
		 * Ping the server.
		 */
		@Deprecated
		public void Ping(FContext ctx) throws TException {
			proxy.Ping(ctx);
		}

		/**
		 * Blah the server.
		 */
		public long blah(FContext ctx, int num, String Str, Event event) throws TException, AwesomeException, actual_base.java.api_exception {
			return proxy.blah(ctx, num, Str, event);
				
		}

		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, long id, java.util.Map<Integer, String> req) throws TException {
			proxy.oneWay(ctx, id, req);
		}

		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str) throws TException, actual_base.java.api_exception {
			return proxy.bin_method(ctx, bin, Str);
				
		}

		public long param_modifiers(FContext ctx, int opt_num, int default_num, int req_num) throws TException {
			return proxy.param_modifiers(ctx, opt_num, default_num, req_num);
		}

		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type, java.util.Set<Long> set_type) throws TException {
			return proxy.underlying_types_test(ctx, list_type, set_type);
				
		}

		public Thing getThing(FContext ctx) throws TException {
			return proxy.getThing(ctx);
		}

		public int getMyInt(FContext ctx) throws TException {
			return proxy.getMyInt(ctx);
		}

		public A use_subdir_struct(FContext ctx, A a) throws TException {
			return proxy.use_subdir_struct(ctx, a);
		}

		public String sayHelloWith(FContext ctx, String newMessage) throws TException {
			return proxy.sayHelloWith(ctx, newMessage);
		}

		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException {
			return proxy.whatDoYouSay(ctx, messageArgs);
		}

		public String sayAgain(FContext ctx, String messageResult) throws TException {
			return proxy.sayAgain(ctx, messageResult);
		}

	}

	private static class InternalClient extends actual_base.java.FBaseFoo.Client implements Iface {

		private FTransport transport;
		private FProtocolFactory protocolFactory;
		public InternalClient(FServiceProvider pr

			super(provider);
			this.transport = provider.getTransport();
			this.protocolFactory = provider.getProtocolFactory();
		}

		/**
		 * Ping the server.
		 */
		public void Ping(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("ping", TMessageType.CALL, 0));
			Ping_args args = new Ping_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("ping")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "Ping failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}if(message.type!=TMessageType.REPLY)

		{
			throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE,
					"Ping failed: invalid message type");
		}
		Ping_result res = new Ping_result();res.read(iprot);iprot.readMessageEnd();
	}

	/**
		 * Blah the server.
		 */
		public long blah(FContext ctx, int num, String Str, Event event) throws TException, AwesomeException, actual_base.java.api_exception {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("blah", TMessageType.CALL, 0));
			blah_args args = new blah_args();
			args.setNum(num);
			args.setStr(Str);
			args.setEvent(event);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("blah")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "blah failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
					trow returnedEcetion;

	
		
				
	i
		throw new TApplicationException(TAp}blah_result res = new bre.read(iprot);
	
		prot.readMessageEnd
	i	rturn ressucess;
	
		
	i	trow res.we
	
		
	i	throw res.api;
		

		throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "blah failed: unknown result");
		}
		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, long id, java.util.Map<Integer, String> req) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("oneWay", TMessageType.ONEWAY, 0));
			oneWay_args args = new oneWay_args();
			args.setId(id);
			args.setReq(req);
			args.write(oprot);
			

		this.transport.oneway(ctx, memoryBuffer.getWriteBytes());
		}
		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str) throws TException, actual_base.java.api_exception {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("bin_method", TMessageType.CALL, 0));
			bin_method_args args = new bin_method_args();
			args.setBin(bin);
			args.setStr(Str);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("bin_method")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "bin_method failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					}

	
		throw returnedException;
				
	}
	if (message.type != TMessageType.REPLY) {	throw new TAppl}bin_method_result res = new binthod_result();
	ripot.readMssgeEnd)f (res.isSetSu	}	

			throw res.api;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "bin_method failed: unknown result");
		}
		public long param_modifiers(FContext ctx, int opt_num, int default_num, int req_num) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("param_modifiers", TMessageType.CALL, 0));
			param_modifiers_args args = new param_modifiers_args();
			args.setOpt_num(opt_num);
			args.setDefault_num(default_num);
			args.setReq_num(req_num);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("param_modifiers")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "param_modifiers failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "param_modifiers failed: invalid message type");
			}
			

		res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "param_modifiers failed: unknown result");
		}
		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type, java.util.Set<Long> set_type) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("underlying_types_test", TMessageType.CALL, 0));
			underlying_types_test_args args = new underlying_types_test_args();
			args.setList_type(list_type);
			args.setSet_type(set_type);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("underlying_types_test")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "underlying_types_test failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
			

		}
			underlying_types_test_result res = new underlying_types_test_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "underlying_types_test failed: unknown result");
		}
		public Thing getThing(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("getThing", TMessageType.CALL, 0));
			gars.write(oprot;prot.writeMessageEnd();
	Transport response = this.transpo
	
		rotocol iprot = this.protocolFactory.getProtocol(response);
	pMessage message = iprot.
	i	trow new TApplcaionException(TApplicationExceptionType.WRONG_METHOD_NAME, "getThing failed: wrong method name");
			}

	if (message.type == TMessageType.EXCEPTION) 	TApplicationExc	iprot.readMessageEnd()	TException returnedException =
				returnedException = new TTransportException(TTransportExceptionType.RESONSE_TOO_LARGE, e.getMessage());	

			throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "getThing failed: invalid message type");
			}
			getThing_result res = new getThing_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getThing failed: unknown result");
		}
		public int getMyInt(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("getMyInt", TMessageType.CALL, 0));
			getMyInt_args args = new getMyInt_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			Fipot.readResponeHader(ctx);Message message = iprot.readMessageBegin();i

		throw new TApplicationException(TApplicatio}if (message.type == TMe	TpplicationException  			iprot.readMessageEnd();	TException returnedException = e;
		

				returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "getMyInt failed: invalid message type");
			}
			getMyInt_result res = new getMyInt_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getMyInt failed: unknown result");
		}
		public A use_subdir_struct(FContext ctx, A a) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("use_subdir_struct", TMessageType.CALL, 0));
			use_subdir_struct_args args = new use_subdir_struct_args();
			args.setA(a);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("use_subdir_struct")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "use_subdir_struct failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
			

			TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "use_subdir_struct failed: invalid message type");
			}
			use_subdir_struct_result res = new use_subdir_struct_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "use_subdir_struct failed: unknown result");
		}
		public String sayHelloWith(FContext ctx, String newMessage) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("sayHelloWith", TMessageType.CALL, 0));
			sayHelloWith_args args = new sayHelloWith_args();
			args.setNewMessage(newMessage);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			i	throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NME, "sayHelloWith failed: wrong method 

		

		if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "sayHelloWith failed: invalid message type");
			}
			sayHelloWith_result res = new sayHelloWith_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sayHelloWith failed: unknown result");
		}
		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("whatDoYouSay", TMessageType.CALL, 0));
			whatDoYouSay_args args = new whatDoYouSay_args();
			args.setMessageArgs(messageArgs);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			

			throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "whatDoYouSay failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "whatDoYouSay failed: invalid message type");
			}
			whatDoYouSay_result res = new whatDoYouSay_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "whatDoYouSay failed: unknown result");
		}
		public String sayAgain(FContext ctx, String messageResult) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			Fopot.writeRequetHader(ctx);o

	sayAgain_args args = new sayAgain_args();args.setMessageRargs.write(oprot);opot.writeMessageEnd()Transport response 
FProtocol iprot = this.protocolFactory.getProtocol(response);		

			throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "sayAgain failed:

		if (message.type == T

			iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
			

			throw returnedException;
		}
		if (message.type != TMessageType.RE
			throw new TApplicationException(TA
		}
		sayAgain_result res = new sayAgain_result();
		res.read(iprot);
		iprot.readMessageEnd();
		if (res.isSetSuccess()) {
			return res.success;
		}
		throw new TApplicationException(TApplicationExcepti
		
		
		
	u

	private Iface handler;

	

		public Processor(Iface iface, ServiceMiddleware... middleware) {
			super(iface, middleware);
			handler = InvocationHandler.composeMiddleware(iface, Iface.class, middleware);
		}


		java.uti
		processMap.put("ping", new Ping());
		processMap.put("blah", new Blah(
		processMap.put("oneWay", new OneWay());   
		

		processMap.put("underlying_types_test", new Under

		processMap.put("getMyInt", new GetMyInt());
			processMap.put("use_subdir_struct", new Use_subdir_struct());
			processMap.put("sayHelloWith", new SayHelloWith());
			processMap.put("whatDoYouSay", new WhatDoYouSay());
			processMap.put("sayAgain", new SayAgain());
			return processMap;
		}

		protected java.util.Map<String, java.util.Map<String, String>> getAnnotationsMap() {
			java.util.Map<String, java.util.Map<String, String>> annotationsMap = super.getAnnotationsMap();
			java.util.Map<String, String> PingMap = new java.util.HashMap<>();
			PingMap.put("deprecated", "don't use this; use \"something else\"");
			annotationsMap.put("ping", PingMap);
			return annotationsMap;
		}

		@Override
		public void addMiddleware(ServiceMiddleware middleware) {
			super.addMiddleware(middleware);
			handler = InvocationHandler.composeMiddleware(handler, Iface.class, new ServiceMiddleware[]{middleware});
		}

		private class Ping implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				Ping_args args = new Ping_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "Ping", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				Ping_result result = new Ping_result();
				try {
					handler.Ping(ctx);
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("ping", TMessageType.EXCEPTION, 0));
				
		

				return;

				synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "ping", "Internal error processing Ping: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("ping", TMessageType.REPLY, 0));
					

				oprot.getTransport().

			} catch (TTransportException e) {		i
		 
					throw (TApplicationException) writeApplicationException(ctx, opro
				}
			throwe
		;
		
			}
		}
		
		
			
		
		
		
			
			vate class Blah implements FProcessorFunction {
			
			blic void process(FConte
			lah_args args = new blah_args
			ry {
			rgs.ra
		d(iprot);
		
			 catch (TException e) {
				prot.readMessageEnd();
						
						
			s
				e = wri
				throw e;
		
			
				
				rot.readMessageEnd();
				ah_result result = n
				y {
				esult.success = handler.blah(
			result.setSuccessIsSet(true);
				catch (AwesomeException awe) {
					sult.awe = awe;
							
							
				c
				esult.ap
			 
			
		
	

			oprot.getTransport().flush();

		} catch (TException e) {
			synchronized (WRITE_LOCK) {
				e =
			}
			throw e;
			
			ynchroni
			

				oprot.writeMessageBeg
				result.write(oprot);
		
	

				if (e.getType() == TTransportExceptionType.REQUEST_T

				}
				throw e;
			}
			
		
			
			
				ate class OneWay implements FProcessorFunction {
						
			
			blic voi
		o

			args.read(iprot);
		} catch (TException e) {
			ipro
			throw e;
			
		
			prot.readMessageE
		handler.oneWay(ctx, args.id, args.r
			
			
			
			vate class Bin_method im
			
			blic vo
		bin_method_args args = n
			ry {
				rgs.read(iprot);
						
						
			 
			iprot.re
			
				e = writeApplicationExcep
			}
				hrow e;
				
				
				rot.readMessageEnd();
				n_method_result result = new 
			ry {
				esult.success = handler.bin_method(ctx, args.bin, args.Str);
					sult.setSuccessIsSet(true);
							
							
				c
				esult.ap
			 
			
		
	

			oprot.getTransport().flush();

		} catch (TException e) {
			synchronized (WRITE_LOCK) {
				e =
			}
			throw e;
			
			ynchronized (WRITE_LOCK) {
				ry {
						
				
				oprot.w
			

				oprot.getTransport().
			} catch (TTransportException e) {
				if 
					throw (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionT
				}
				throw e;
			}
			
			
			
			
			vate cl
		
			blic void process(FContext 
				ram_modifiers_args args = new param_modifiers_args();
						
						
			r
			args.rea
		}
			iprot.readMessageEnd();
			synch
				e = writeApplicationException(c
				
				hrow e;
				
				
			prot.readMessageEnd();
				ram_modifiers_result result = new param_modifiers_result();
					 {
							
							
				e
				esult.se
			 
			
		
	

			oprot.getTransport().flush();

		} catch (TException e) {
			synchronized (WRITE_LOCK) {
				e =
			}
			throw e;
			
			ynchronized (WRITE_LOCK) {
				ry {
						
				
				oprot.w
			

				oprot.getTransport().
			} catch (TTransportException e) {
				if 
					throw (TApplicationException) writeApplicationException(ctx, oprot, TApplicationE
				}
				throw e;
			}
			
			
			
			
			vate cl
		
			blic void process(FContext 
				derlying_types_test_args args = new underlying_types_test_args();
						
						
			r
			args.rea
		}
			iprot.readMessageEnd();
			synch
				e = writeApplicationException(c
				
				hrow e;
				
				
			prot.readMessageEnd();
				derlying_types_test_result result = new underlying_types_test_r
					 {
							
							
				e
				esult.se
			 
			
		
	

			oprot.getTransport().flush();

		} catch (TException e) {
			synchronized (WRITE_LOCK) {
				e =
			}
			throw e;
			
			ynchronized (WRITE_LOCK) {
				ry {
						
				
				oprot.w
			

				oprot.getTransport().
			} catch (TTransportException e) {
				if 
					throw (TApplicationException) writeAp
				}
				throw e;
			}
			
			
			
			
			vate cl
		
			blic void process(FContext 
				tThing_args args = new getThing_args();
						
						
			r
			args.rea
		}
			iprot.readMessageEnd();
			synch
				e = writeApplicationException(c
				
				hrow e;
				
				
			prot.readMessageEnd();
				tThing_result result = new getThing_result();
					 {
							
							
				e
				esult.se
			 
			
		
	

			oprot.getTransport().flush();

		} catch (TException e) {
			synchronized (WRITE_LOCK) {
				e =
			}
			throw e;
			
			ynchronized (WRITE_LOCK) {
				ry {
						
				
				oprot.w
			

				oprot.getTransport().
			} catch (TTransportException e) {
				if 
					throw (TApplicationException) writeAp
				}
				throw e;
			}
			
			
			
			
			vate cl
		
			blic void process(FContext 
				tMyInt_args args = new getMyInt_args();
						
						
			r
			args.rea
		}
			iprot.readMessageEnd();
			synch
				e = writeApplicationException(c
				
				hrow e;
				
				
			prot.readMessageEnd();
				tMyInt_result result = new getMyInt_result();
					 {
							
							
				e
				esult.se
			 
			
		
	

			oprot.getTransport().flush();

		} catch (TException e) {
			synchronized (WRITE_LOCK) {
				e =
			}
			throw e;
			
			ynchronized (WRITE_LOCK) {
				ry {
						
				
				oprot.w
			

				oprot.getTransport().
			} catch (TTransportException e) {
				if 
					throw (TApplicationException) writeApplicationExceptio
				}
				throw e;
			}
			
			
			
			
			vate cl
		
			blic void process(FContext 
				e_subdir_struct_args args = new use_subdir_struct_args();
						
						
			r
			args.rea
		}
			iprot.readMessageEnd();
			synch
				e = writeApplicationException(c
				
				hrow e;
				
				
			prot.readMessageEnd();
				e_subdir_struct_result result = new use_subdir_struct_result();
					 {
							
							
				e
				esult.se
			 
			
		
	

			oprot.getTransport().flush();

		} catch (TException e) {
			synchronized (WRITE_LOCK) {
				e =
			}
			throw e;
			
			ynchronized (WRITE_LOCK) {
				ry {
						
				
				oprot.w
			

				oprot.getTransport().
			} catch (TTransportException e) {
				if 
					throw (TApplicationException) writeApplicationException(ct
				}
				throw e;
			}
			
			
			
			
			vate cl
		
			blic void process(FContext 
				yHelloWith_args args = new sayHelloWith_args();
						
						
			r
			args.rea
		}
			iprot.readMessageEnd();
			synch
				e = writeApplicationException(c
				
				hrow e;
				
				
			prot.readMessageEnd();
				yHelloWith_result result = new sayHelloWith_result();
					 {
							
							
				e
				esult.se
			 
			
		
	

			oprot.getTransport().flush();

		} catch (TException e) {
			synchronized (WRITE_LOCK) {
				e =
			}
			throw e;
			
			ynchronized (WRITE_LOCK) {
				ry {
						
				
				oprot.w
			

				oprot.getTransport().
			} catch (TTransportException e) {
				if 
					throw (TApplicationException) writeApplicationException(ctx
				}
				throw e;
			}
			
			
			
			
			vate cl
		
			blic void process(FContext 
				atDoYouSay_args args = new whatDoYouSay_args();
						
						
			r
			args.rea
		}
			iprot.readMessageEnd();
			synch
				e = writeApplicationException(c
				
				hrow e;
				
				
			prot.readMessageEnd();
				atDoYouSay_result result = new whatDoYouSay_result();
					 {
							
							
				e
				esult.se
			 
			
		
	

			oprot.getTransport().flush();

		} catch (TException e) {
			synchronized (WRITE_LOCK) {
				e =
			}
			throw e;
			
			ynchronized (WRITE_LOCK) {
				ry {
						
				
				oprot.w
			

				oprot.getTransport().
			} catch (TTransportException e) {
				if 
					throw (TApplicationException) writeApplicationException(c
				}
				throw e;
			}
			
			
			
			
			vate cl
		
			blic void process(FContext 
				yAgain_args args = new sayAgain_args();
						
						
			r
			args.rea
		}
			iprot.readMessageEnd();
			synch
				e = writeApplicationException(c
				
				hrow e;
				
				
			prot.readMessageEnd();
				yAgain_result result = new sayAgain_result();
					 {
							
							
				e
				esult.se
			 
			
		
	

	

			} catch (TException e) {
		
				synchronized (WRITE_LOCK) {
			

				throw e;
			}
			synchronized (WRITE_LOCK) {
				try {
		

				
	 * result.write(oprot);
	 * 
	 
					oprot.writeMessageEnd();
			

					if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {

					}
					throw e;
				}
			}
		}

		
		 
		 
		blic static class Ping_args implements org.apache.t
			ivate  static fina
			
				
			i
		t

		sch
		  
		 * 
		 * 
		ublic enum _Fields implements org.apache.thrift.TFieldIdEn
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		pu
	 	return byName.get(name);
	 }
	
		

	
		_Fields(short thriftId, Str
		

		}
	
		

		}
		
		p
		

	}
		
		/
		ublic Ping_args() {
	}

	/**
	 * 
	 * 
	 
	 * Performs a deep copy on <i>other</
		*/
			blic Ping_args(Ping_args other) {
		

		ublic Ping_args 
		r
		
	

	public vo
	}
		
			blic void set
		switch (field) {
			 
		
	

		switch (field) {
		}
			hrow new Ille

		
	/

		if (fiel
			throw new IllegalArgu
		}

		switch (field) {
		

	}
	
		Override
			blic boolean equals(Object that) {
		i

		if (that instanceof Pin

		return fa
	}

	public boolean equals(Ping_args that) {
		if (that == null)
		

		return true;
		
	

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();
	

	}
	
		Override
		ublic int compareTo(P

			return getClas
		}
	

	
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
			
					
		ublic void read(org.apache.thrift.protocol.
			chemes.get(iprot.getScheme()).getS
		
	

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		
			
			// 
			verride
					
		ublic String toString() {
			tringBuilder sb = new StringBuilde
		b
	

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOExcep
				ion {
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serialization
				e
				catch (org.apache.thr
			t
			

			
			// 
			ivate static class
		p

		}
				
			

			ivate static class Ping_argsStandard
			
			ublic void read(org.apa
			

		

				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
			
		

				}

			}
			iprot.readStructEnd();
				
			
			

		}
		
				
			ublic void write(org.apache.thrift.protocol.T
			

		

	


		
	}
			

		public Ping_argsTupleScheme getScheme() {
			return
		}
		
	

	
	 * 
	 * 
	 
		@Override
		p

		}

		@Overrid
			ublic void read(org.apache.thrift.protocol.TProtocol
				TupleProtocol iprot = (TTupleProtocol) p
			
		

		
		 
		 
		blic static class Ping_result implements org.apache
			ivate  static fina
			
				
			i
		t

		sch
		  
		 * 
		 * 
		ublic enum _Fields implements org.apache.thrift.TFieldIdEn
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		pu
	 	return byName.get(name);
	 }
	
		

	
		_Fields(short thriftId, Strin
		

		}
	
		

		}
		
		p
		

	}
		
		/
		ublic Ping_result() {
	}

	/**
	 * 
	 * 
	 
	 * Performs a deep copy on <i>other</
		*/
			blic Ping_result(Ping_result other) {
		

		ublic Ping_resul
		r
		
	

	public vo
	}
		
			blic void set
		switch (field) {
			 
		
	

		switch (field) {
		}
			hrow new Ille

		
	/

		if (fiel
			throw new IllegalArgu
		}

		switch (field) {
		

	}
	
		Override
			blic boolean equals(Object that) {
		i

		if (that instanceof Pin

		return fa
	}

	public boolean equals(Ping_result that) 
		if (that == null)
		

		return true;
		
	

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();
	

	}
	
		Override
		ublic int compareTo(P

			return getClas
		}
	

	
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
			
					
		ublic void read(org.apache.thrift.protocol.
			chemes.get(iprot.getScheme()).getS
		
	

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		
			
			// 
			verride
					
		ublic String toString() {
			tringBuilder sb = new StringBuilde
		b
	

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOExcepti
				n {
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serialization
				e
				catch (org.apache.thr
			t
			

			
			// 
			ivate static class
		p

		}
				
			

			ivate static class Ping_resultStanda
			
			ublic void read(org.apa
			

		

				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
			
		

				}

			}
			iprot.readStructEnd();
				
			
			

		}
		
				
			ublic void write(org.apache.thrift.protocol.T
			

		

	


		
	}
			

	private static class Ping_resultTupleSchemeFactory implements SchemeFactory {
			 
		public Ping_resultTupleScheme getScheme() {
			 
			return new Ping_resultTupleScheme();
			 

	}
	
		rivate static class Ping_resultTupleScheme extends TupleScheme<Ping_resu
		
		

			TTupleProtoco
		}
	

		@O
	 * erride
	 * 
	 
		public void read(org.apache.thrift.protocol.TProtocol prot, Pi
			TTupleProt ocol iprot }   

		

		blic sta
			ivate static final org.apache.thrift.protocol.TStruc
				
			i
		r

		
		 ivate static final Map<Class<? extends IScheme>, SchemeFactory> schemes = n
		 at
		schemes.put(StandardScheme.class, new blah_argsStan
			chemes .put(TupleS
			
				
			lic int num;
				ic String S
			lic Event event;
				The set of fi
			lic enum
				((short)1, "
			T
		E

		
		 rivate static final Map<String, _Fields> byName = new HashMap<String, _ 
		 * 
		 ta
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
				
			
		

		 * 
		 */
		 ub
			switch(fieldId) {
				case 1: // NUM
			

					return STR;
				case 3: // EVENT

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		 * Find the _Fields constant that

		 */
		

		} private fin private final 
		
		_Fields(short t
			_thriftId = thrif
			_fieldName = f
		}
	

			r
	 }
	 
		public String getFieldName() {
			return _fieldName;
		}
		
			
		/
		rivate static final int _
			ivate byte __isset_bitfield = 0;
		u
	}

	public blah_args(
		int num,
		

		this();
		this.num = num;
		setNumIsSet(true);
		this.Str = St

		

		**

	 

		__isset_bitfield = o
		this.num = other
		

		}
		if (other.isSet
			this.event = new 
		}
	}

	public blah_args deepCop
		return new blah_args(this);
	}

	@Ov
	 * rride
	 * 
	 
	public void clear() {
		setNumIsSet(false);
		

		this.Str = null;
		
		

	}
		
	p

	}
		
		ublic blah_a
		

		return this;
		
	

		__
	 * sset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_I
	 * );
	 
	}
		
	/

		return EncodingUtils.testBit(__isset_bi
		
			
		u
		

	
		ublic String getSt
		

	
		ublic blah_args set
		this.Str = S
		

	
		ublic void unsetSt
		

	
	 * 
	 * 
	 
	/** Returns true if field Str
		ublic boolean isSetStr() {
		

	
		ublic void se
			f (!value) {
			
		

	
		ublic Event getE
		return th
			
				
			blic bla
				is.event = event ;
			e
			

		ublic voi
			his.event = null;
				
			
				 Returns true i f field
			b
			eturn 

		
			blic void setEventIs
				 (!value) {
			this.eve
				 
			
			

		s
		

				unsetNum();
			} else {
				setNum(
			}

		
			ase STR:

				unsetStr(
			} else {

			
			break;
	

			i
	 *  (value == null) {
	 * 
	 
				unsetEvent();
			} else {
				setEvent((Event)value);
			

		
		}
			
		
			blic Object getFie
		switch (fie
			ase NUM:
			
		
		

	
		case EVENT:
			return getEvent(
			
		}
			hrow new IllegalStateException ();
		
	

	public boolean isSet(_Fields field) {
		if (field == null
			throw new Ill

		
		switch (field) {
		case NUM:
			return isSetNum();
				se STR:
			return isSetStr();
				se EVENT:
			

		throw new IllegalStateException();
		
		
			verride
				lic boolean e
			f (that == null)
				eturn false;
		i

		return false;
		
		
			blic boolean equals(blah_args that) {
				 (that == nul
			return false;
				
		b

		if (this_pre
		

			if (thi
				return false;
		}

		boolean this_present_Str = 
		boolean that_present_S
		if (this_present
			if (!(this_pre

			if (!this.Str.equals(that.Str))
				return false;
		}
			

		boolean that_present_event = true && that.isSet
		if (this_present_event |
			if (!(this_presen
				return false;

				return false;
		

		return t
	}
		
			verride
		u

		

		list.add(present_num);
		if (present_num)
			list.add(num);
		
		boolean present_S
			ist.add(present_Str);
			f (present_Str)
				ist.add(Str);
			
		b
		list.add(present_event);
		if (present_event)
			list.add(event);
		
		return list.hashC
			
			
				erride
			b
		i
			return getClass().getName().compareTo(other.getClass().getName());
		}
			
		i
		
			astComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
			f (lastComparison != 0) {
				eturn lastComparison;
			
		i
			lastComp
		

			}
		}
		

			return lastComparison;
		}
		

			if (lastComparison != 0) {
				return lastComparison;
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = 
			if (lastComparison 
				return lastC
			}
			
		}
		return 0;
			
		
			blic _Fields fieldFo
		r
		
		
			
		ublic void read(org.
		schemes.get(iprot.getSche
			
		
			blic void write(org.ap
		s
		
		
		Override
	p

		boolean first = true;
		
		sb.append("num:");
		sb.append(this.num);
			irst = false;
		i
		

			sb.append("null");
		} els
			sb.append(this.Str);
					
		}
			irst = false;
		i
		

			sb.append("null");
		} els
			sb.append(this.event);
			// 
			
			irst = false;
					
		sb.append(")");
			eturn sb.toString();
		
	

		// check for required fields
		// check for sub-struct validity
			f (event != null) {
			
		

	

		try {
				
			write(new org.apache.thrift.protocol.TCompactP
			 catch (org.apache.thrif
			throw new java
				
				
					
				v
				y {
				 it doesn't se
					sset_bitfield = 0;
						(new org.apache.thrift.protoc
						ch (org.apache.thrift.TEx
					ow new j
						
					
					
				ate static cla
					ic blah_argsStandardScheme getScheme() {
						rn new blah_argsStandardScheme()
						
					
						
					t
					
				lic void read(or
					.apache.thrift.protocol.TField schemeField;
						t.readStructBegin();
						e (true) {
						emeField = iprot.readFieldB
					 (scheme
						eak;
					
					itch (
				case 1: 
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
					
							struct.setNumIsSet
				
							org.apache.thrift.

						break;
			// 
					case 2: // STR
			

							struct.setStrIsSet(true);
				
						} else {

						}
						break;
					case 3: // EVENT
						if (schemeField.type 
							struct.event = new
							struct.event.read(ipr
							struct.setEventIsSet(true);
						} else {
							org.apache.thrift.protoc
						}
				
					default:
						org.apache.thrift.protocol.TProtocolUt
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
			
			

		

		public void write(org.apache.thrift.protocol.TProtocol oprot, blah_args st
			struct.validate();
			
			
		

			oprot.writeI32(elem257);

			if (stru
				oprot.writeFieldBegin(STR_FIELD_DESC);
				
				String elem258 = struct.Str;
				oprot.writeString(elem258);
				oprot.writeFieldEnd();
				
			i
				oprot.writeFieldBegin(E
				struct.event.writ
				
			}
				prot.writeFieldSt
			o
			
			
				
				
			i
			ublic blah_argsTupleSche
				eturn new blah_argsTupleSche
				
			
			
				vate static class blah_arg
			
		@

			TTuplePr
			BitSet optionals = new BitSet();
				
			if (struct.isSetNum()) {
				optionals.set(0);
			}
				f (struct.isSetStr()) {
				optionals.set(1);
			}
			if (struct.isSetEvent(
				optionals.set(2);
				
			o
			if (struct.isSetNum())
				int elem259 = struct.num;
				oprot.writeI32(elem259);
				
			i
			

		

	

		}
		
	
			

		public void read(org.apache.thrift.protocol.TProtocol prot, blah_args struct) throws org.apache.thrift.TException
			 { 
			TTupleProtocol iprot = (TTupleProtocol) prot;
			 
			BitSet incoming = iprot.readBitSet(3);
			 

				struct.num = iprot.readI32();
				struc
			}
			if (incoming.get(1)) {
		

			}
			if (incoming.get(2)) {
				struct.event = new Event();

				
	 * truct.event.read(iprot);
	 * 
	 
				struct.setEventIsSet(true);
			}  }   

		

		blic sta
			ivate static final org.apache.thrift.protocol.TStruc
				
			i
		r

		
		 ivate static final Map<Class<? extends IScheme>, SchemeFactory> schemes = n
		 at
		schemes.put(StandardScheme.class, new blah_resultSt
			chemes .put(TupleS
			
				
			lic long succe
				ic AwesomeE
			lic actual_bas
				The set of 
			lic enum
				CESS((short)
			W
		A

		
		 rivate static final Map<String, _Fields> byName = new HashMap<String, _ 
		 * 
		 ta
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
				
			
		

		 * 
		 */
		 ub
			switch(fieldId) {
				case 0: // SUCCESS
			

					return AWE;
				case 2: // API

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		 * Find the _Fields constant that

		 */
		

		} private final short _ private final String _fieldName;
		
		_Fields(short thriftId,
			_thriftId = thriftId;
			_fieldName = f
		}
	

			r
	 }
	 
		public String getFieldName() {
			return _fieldName;
		}
		
			
		/
		rivate static final int
			ivate byte __isset_bitfield = 0;
		u
	}

	public blah_result(
		long success,
		

		this();
		this.success = succe
		setSuccessIsSet(true);
		this.awe = awe;

		

		**

	 

		__isset_bitfield = other.
		this.success = other
		

		}
		if (other.isSetApi()) {
			this.api = new actual
		}
	}

	public blah_result deepCopy(
		return new blah_result(this);
	}

	@Ov
	 * rride
	 * 
	 
	public void clear() {
		setSuccessIsSet(false);
		

		this.awe = null;
		
		

	}
		
	p

	}
		
		ublic blah_r
		

		return this;
		
	

		__
	 * sset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISS
	 * T_ID);
	 
	}
		
	/

		return EncodingUtils.testBit(__isset_bi
		
			
		u
		

	
		ublic AwesomeExc
		

	
		ublic blah_resu
		this.awe = a
		

	
		ublic void unset
		

	
	 * 
	 * 
	 
	/** Returns true if field a
		ublic boolean isSetAwe()
		

	
		ublic void se
			f (!value) {
			
		

	
		ublic actual_bas
		return this.a
			
				
			blic bla
				is.api = api; 
			e
			

		ublic voi
			his.api = null;
				
			
				 Returns true if field ap i is se
			b
			eturn 

		
			blic void setApiIsSe
				 (!value) {
			this.api
				 
			
			

		s
		

				unsetSuccess();
			} else {
				setSuccess(
			}

		
			ase AWE:

				unsetAw
			} else {

			
			break;
	

			i
	 *  (value == null) {
	 * 
	 
				unsetApi();
			} else {
				setApi((actual_base.java.api_excepti
			

		
		}
			
		
			blic Object getFie
		switch (f
			ase SUCCESS:
			
		
		

	
		case API:
			return getApi();
			
		}
			hrow new IllegalStateException() ;
		
	

	public boolean isSet(_Fields field) {
		if (field == null
			throw new Ill

		
		switch (field) {
		case SUCCESS:
			return isSetSuccess();
				se AWE:
			return isSetAwe();
				se API:
			

		throw new IllegalStateException();
		
		
			verride
				lic boolean e
			f (that == null)
				eturn false;
		i

		return false;
		
		
			blic boolean equals(blah_result that) {
				 (that == nul
			return false;
				
		b

		if (this_pre
		

			if (thi
				return false;
		}

		boolean this_present_awe = true
		boolean that_present_awe =
		if (this_present_awe
			if (!(this_present

			if (!this.awe.equals(that.awe))
				return false;
		}
			

		boolean that_present_api = true && that.isS
		if (this_present_api |
			if (!(this_pres
				return false;

				return false;
		

		return t
	}
		
			verride
		u

		

		list.add(present_success);
		if (present_success)
			list.add(success);
		
		boolean present_awe =
			ist.add(present_awe);
			f (present_awe)
				ist.add(awe);
			
		b
		list.add(present_api);
		if (present_api)
			list.add(api);
		
		return list.hashC
			
			
				erride
			b
		i
			return getClass().getName().compareTo(other.getClass().getName());
		}
			
		i
		
			astComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess()
			f (lastComparison != 0) {
				eturn lastComparison;
			
		i
			lastComp
		

			}
		}
		

			return lastComparison;
		}
		

			if (lastComparison != 0) {
				return lastComparison;
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.
			if (lastComparison != 0
				return lastC
			}
			
		}
		return 0;
			
		
			blic _Fields fieldFo
		r
		
		
			
		ublic void read(or
		schemes.get(iprot.getSc
			
		
			blic void write(org.
		s
		
		
		Override
	p

		boolean first = true;
		
		sb.append("success:");
		sb.append(this.suc
			irst = false;
		i
		sb.append("awe:");
			f (this.awe == 
			
		

		}
		first
			f (!first) sb.append(", ");
					
		sb.append("api:");
			f (this.api == null) {
			
		

		}
		first
			b.append(")");
			// 
			eturn sb.toString();
			
					
		
			blic void validate() throws org.ap
		/
		

			awe.validate();
		}
			f (api != null) {
			
		

	

		try {
				
			write(new org.apache.thrift.protocol.TCompactP
			 catch (org.apache.thrif
			throw new java
				
				
					
				v
				y {
				 it doesn't seem l
					sset_bitfield = 0;
						(new org.apache.thrift.protocol.T
						ch (org.apache.thrift.TExcept
					ow new j
						
					
					
				ate static cla
					ic blah_resultStandardScheme getScheme() {
						rn new blah_resultStandardScheme();
						
						
					
						e static class blah_resultStandardScheme extends StandardScheme<blah_re
					
					ic voi
				g.apache.thrif
					ot.readStructBegin();
						e (true) {
						emeField = iprot.readFi
						(schemeField.type == org.
					reak;
						
					i
					ase 0:
					if (sch
						struct.success = iprot.readI64();
					
						} else {
				
						}

					case 1: // AWE
			// 
						if (schemeField
			

							struct.setAweIsSet(true);
				
						} else {

						}
						break;
					case 2: // API
						if (schemeField.type == org.
							struct.api = new actu
							struct.api.read(ipr
				
						} else {
							org.apache.thrift.protocol.TProtoco
						}
						break;
				
						org.apache.thrift.prot
				}
				iprot.readFieldEnd();
				
			i
			
			// check for required f
			

	

			struct.validate();
		
			oprot.writeStructBegin(STRUCT_DESC);
			
		

				oprot.writeI64(elem261);

			}
			if (struct.awe != null) {
				
				oprot.writeFieldBegin(AWE_FIELD_DESC);
				struct.awe.write(oprot);
				oprot.writeFieldEnd();
				
			i
				oprot.writeFieldBegin(A
				struct.api.write(
				
			}
				prot.writeFieldSt
			o
			
			
				
				
			i
			ublic blah_resultTupleSc
				eturn new blah_resultTup
			
			
				
			i
		

		public vo
			TTupleProtocol oprot = (TTupleProtocol) prot;
				
			BitSet optionals = new BitSet();
			if (struct.isSetSuccess()) {
				optionals.set(0);
				
				f (struct.isSetAwe()) {
				
			}
				f (struct.isSetApi()) {
				optionals.set(2);
				
			o
			if (struct.isSetSucces
				long elem262 = struct.success;
				oprot.writeI64(elem262)
				
			i
			

		

	


		
		@Override
			

			TTupleProtocol iprot = (TTupleProtocol) prot;
			 
			BitSet incoming = iprot.readBitSet(3);
			 

				struct.success = iprot.readI64();
				struc
			}
			if (incoming.get(1)) {
		

				struct.setAw
			}

			i
	 *  (incoming.get(2)) {
	 * 
	 
				struct.api = new actual_base.java.api_exception();
				struct.a pi.read(i 		struct.se tApiIsSet	

		

		
			
				
			l
		r

		riv
		 ivate static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new o
		 
		rivate static final Map<Class<? extends IScheme>, S
			atic { 
			hemes.put(Sta
				emes.put(T
			
				
			lic long
				ic java.util
			*
		u

		REQ
		  
		 * 
		 ri
		
			tatic {
			for (_Fields field 
				 EnumSet.allOf(_Fields.class)) {
				byName.put(fi
			

		
		 **
		 * 
		 */
			ublic static _Fields fin
			

					return ID;
				case 2: // REQ

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		 * Find the _Fields constant that

		 */
		

		} private final short _thriftId;
		private
		
		_Fields(short thr
			_thriftId = th
		

	
	 public short getThriftFieldId() {
	 	r
		}
		
		public String getFi
			return _fieldName;
			 
		
	

	private static final int __ID_I
		rivate byte __isset_bitfield 
	p

	
	public oneWay_args(
		long id,
		java.util.Map

		this.id = id;

		

	
		**
	 

	public oneWay_args(oneWay_args othe
		__isset_bitfi
		this.id = other.i
		if (other.is
		

	}
		
	p

	}
	 * 
	 * 
	 
	
		Override
	p

		this.id = 0L;
		
		

	}
		
	p

	}
		
			blic oneWay_args setId(long id)  {
		t
		setIdIsSet(true);
		

	
		ublic void unset
		

	
		** Returns true
		ublic boolea
		

	
		ublic void setId
		

	
	 * 
	 * 
	 
	public int getReqSize() {
		return (this.req == null
	}

	public void putToReq(int key, String val
		if (this.req 
			this.req = new H
		}
		

	
		ublic java.util.
		return t
			
				
			blic one
				is.req = req ;
			e
			

		ublic voi
			his.req = null;
				
			
				 Returns true if field req is set (has  been as
			b
			eturn 

		
	p

			this.req = null;
		}
		
			

		switch (f
			ase ID:

			
			} else {
		

			b
	 * eak;
	 * 
	 
	
		case REQ:
			if (value == null) {
			

				setReq((java.u
			}
			break;
		
			
		
		
	p

		case ID:
			return getId();
		
			ase REQ:
			return getReq();
			 
		}
		

	
		** Returns true i
			blic boolean 

			throw new IllegalArgumentExcep
		}
		
			witch (field) {
				se ID:
			return isSetId();
				se REQ:
			

		throw new IllegalStateException();
		
		
			verride
				lic boolean e
			f (that == null)
				eturn false;
		i

		return false
	}

	public bo
		if (that == null)
			return false;

		boolean this_present_id = 
		boolean that_present_
		if (this_presen
			if (!(this_pr

			if (this.id != that.id)
				return false;
		}
			

		boolean that_present_re
		

				return
			if (!this.req.equals(that.req))
				return false;
			
		

		

		Override
		ublic int hashCode() {
			ist<Object> list = new
		
		boolean present_
			ist.add(present_id);
			f (present_id)
				ist.add(id);
			
		b
		list.add(present_req);
		if (present_req)
			list.add(req);
		
		return list.hashC
			
			
				erride
			b
		i
			return g
		

		int lastComparison = 0;
		
		

			return lastComparison;
		}
		

			if (lastComparison != 0) {
				return lastComparison;
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison =
			if (lastComparison
				return lastC
			}
			
		}
		return 0;
			
		
			blic _Fields fieldFo
		r
		
		
		ublic void read(org.a
		

	
		ublic void write(org.apache.
		schemes.get(oprot.getScheme()).g
	}

	@Override
		ublic
			tringBuilder sb = new StringBuilder("oneWay_args(");
					
		boolean first = true;
			
		s
		

		if (!first) sb.append(", ");
		sb.ap
			f (this.req == null) {
			// 
			sb.append("null");
			 else {
					
			sb.append(this.req);
			
		f
		

	}
		
			blic void validate() throws org.apache.
		/
		

	

		try {
				
			write(new org.apache.thrift.protocol.TCompactP
			 catch (org.apache.thrif
			throw new java
				
				
					
				v
				y {
				 it doesn't s
					sset_bitfield = 0;
						(new org.apache.thrift.proto
						ch (org.apache.thrift.TE
					ow new j
						
					
					
				ate static cla
					ic oneWay_argsStandardScheme getScheme() {
						rn new oneWay_argsStandardScheme();
						   
						
							
							 static class oneWay_argsStandardSch
							
						c
						apache.thrift.proto
						t.readStructBegin();
					le (true
						emeField = iprot.readFieldBegin();
					 
					reak;
				
					itch (schemeField.id) {
					
						if (schemeField.typ
				
							struct.setIdIsSet(

							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
			// 
						}
			

						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
				
							org.apache.thr

							for (int elem266 = 0; elem266 < 
								int elem268 = iprot.readI32();
								String elem267 = ipr
								struct.req.put(elem
							}
							iprot.readMapEnd();
							struct.setReqIsSet(true);
						} else {
						
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeFiel
						}
						break;
					default:
						org.apache.thrift.protocol
				}
				iprot.readFieldEnd()
				
			i
			
			// check for required f
			

	

			struct.validate();
		
			oprot.writeStructBegin(STRUCT_DESC);
			
		

			oprot.writeFieldEnd();

				oprot.w
				oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.prot
				col.TType.I32, org.apache.thrift.prot
				for (Map.Entry<Integer, String> elem270 : st
					int elem271 = elem270.getKey()
					oprot.writeI32(elem27
					String elem272 =
				
				}
				oprot.writeMapEnd
				
			}
			oprot.writeFieldStop();
				prot.writeStructEnd();
				
			
			
				
				vate static class oneWay_argsTupleSchemeFactory implements SchemeF
					lic oneWay_argsTupleScheme getS
					turn new oneWay_argsTupl
					
					
				
			i
		

		public vo
			TTupleProtocol oprot = (TTupleProtocol) prot;
				
			BitSet optionals = new BitSet();
			if (struct.isSetId()) {
				optionals.set(0);
				
				f (struct.isSetReq()) {
				
			}
				prot.writeBitSet(optionals, 2);
						
				f (struct.isSetId()) {   
				long elem273 = struct.id;
					prot.writeI64(elem273);
					
					 (struct.isSetReq()) {
				o
				for (Map.Entry<Integer, S
				
			

		

	


		
		@Override
			

			TTupleProtocol iprot = (TTupleProtocol) prot;
			 
			BitSet incoming = iprot.readBitSet(2);
			 

				struct.id = iprot.readI64();
				struc
			}
			if (incoming.get(1)) {
		

				for (int elem278 = 0; elem27
					int elem280 = 

				
	 * String elem279 = iprot.readString();
	 * 
	 
					struct.req.put(elem280, elem279);
				}  		struct.se tReqIsSet	

		

		
			
				
			l
		r

		riv
		 ivate static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new o
		 
		rivate static final Map<Class<? extends IScheme>, S
			atic { 
			hemes.put(Stan
				emes.put(Tu
			
				
			lic java
				ic String St
			*
		u

		STR
		  
		 * 
		 ri
		
			tatic {
			for (_Fields field 
				 EnumSet.allOf(_Fields.class)) {
				byName.put(fi
			

		
		 **
		 * 
		 */
			ublic static _Fields fin
			

					return BIN;
				case 2: // STR

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields 	return byName.get(name) }
		
		private final short _thriftId;
		private final S
	

			_
	 	_fieldName = fieldName;
	 }
	
		public short getThriftF
			return _thriftId;
		}
		
			ublic String getField
			
		

	
		/ isset id assignments
	p

	
	public bin_method_arg
		java.nio.ByteBuf

		this();

		

	
		**
		* Performs a deep copy on <i>other</i>.
	 

		if (other.isSetBin()) {
			this.bin = org.apache.thrift.TBaseHelper.copyBinary(
		

			this.Str = other.Str;
		} 
		
	

		return new bin_method_args(this);
		
		
	@

		this.bin = null;
		
		

	}
	 * 
	 * 
	 
	
		ublic byte[] getBin() {
		

	}
		
			blic java.nio.By
		r
	}

	public bin_method_args s
		this.bin = bin =
		

	
		ublic bin_metho
		this.bin = o
		

	
		ublic void unset
		

	
	 * 
	 * 
	 
	/** Returns true if field b
		ublic boolean isSetBin()
		

	
		ublic void se
			f (!value) {
			
		

	
		ublic String get
		return th
			
				
			blic bin
				is.Str = Str; 
			e
			

		ublic voi
			his.Str = null;
				
			
				 Returns true i f field
			b
			eturn 

		
	p

			this.Str = null;
		}
		
			

		switch (f
			ase BIN:

			
			} else {
		

			b
	 * eak;
	 * 
	 
	
		case STR:
			if (value == null) {
			

				setStr((String
			}
			break;
		
			
		
		
	p

		case BIN
			return getBin();
		
			ase STR:
			return getStr();
			 
		}
		

	
		** Returns true i
			blic boolean 

			throw new IllegalArgumentException();
		}
		
			witch (field) {
				se BIN:
			return isSetBin();
				se STR:
			

		throw new IllegalStateException();
		
		
			verride
				lic boolean e
			f (that == null)
				eturn false;
		i

		return false
	}

	public bo
		if (that == null)
			return false;

		boolean this_present_bin = true && this.isS
		boolean that_present_b
		if (this_present
			if (!(this_pre

			if (!this.bin.equals(that.bin))
				return false;
		}
			

		boolean that_present_St
		

				return
			if (!this.Str.equals(that.Str))
				return false;
			
		

		

		Override
		ublic int hashCode() {
			ist<Object> list = new
		
		boolean present_b
			ist.add(present_bin);
			f (present_bin)
				ist.add(bin);
			
		b
		list.add(present_Str);
		if (present_Str)
			list.add(Str);
		
		return list.hashC
			
			
				erride
			b
		i
			return g
		

		int lastComparison = 0;
		
		

			return lastComparison;
		}
		

			if (lastComparison != 0) {
				return lastComparison;
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = 
			if (lastComparison != 
				return lastCompar
			}
			
		r
		
		
			
		ublic _Fields fiel
		return _Fields.findByTh
			
		
			blic void read(org.a
		s
		
		
		ublic void write(org.
		

	
		Override
		ublic String toString() {
		

	
		sb.ap
			f (this.bin == null) {
					
			sb.append("null");
			 else {
			
		

		if (!first) sb.append(", ");
		sb.ap
			f (this.Str == null) {
			// 
			sb.append("null");
					
		} else {
			sb.append(this.Str);
		}
		

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serializ
						(new org.apache.thrift.protocol.
						ch (org.apache.thrift.TEx
					ow new j
						
					
					
				ate static cla
					ic bin_method_argsStandardScheme getScheme() {
						rn new bin_method_argsStandardSc
						
					
						
					t
					
				lic void
					.apache.thrift.protocol.TField schemeField;
				p
				hile (true) {
				
				if (schemeField.type 

				}
			// 
				switch (schemeFie
			

							struct.bin = iprot.readBinary();
				
							struct.setBinI

							org.apache.thrift.protocol.TProt
						}
						break;
					case 2: // STR
						if (schemeField.type == o
							struct.Str = iprot.
				
						} else {
							org.apache.thrift.protocol.TProtoco
						}
						break;
					default:
				
				}
				iprot.readFieldEnd();
			

	

			struct.validate();
		}
			
		p
		

			oprot.writeStructBegin(STRUCT_DESC);

				oprot.w
				java.nio.ByteBuffer elem281 = struct.bin;
				
				oprot.writeBinary(elem281);
				oprot.writeFieldEnd();
			}
				f (struct.Str != 
				
				String elem282 = struct
				oprot.writeString
				
			}
			oprot.writeFieldStop();
				prot.writeStructEnd();
				
			
			
				
				vate static class bin_metho
			u
			

		
		
				
			ivate static class bin_method_argsTupleScheme
			
			Override
				blic void write(org.apache.thrif
				TupleProtocol oprot = (TT
			B
			if (struct.isSetBin())
				optionals.set(0);
				
			i
			

		

	

			}
		
			if (struct.isSetStr()) {
			

				oprot.writeString(elem284);
			 
			}
			 

	
		@Overri
		public void read(org.apache.thrift.protocol.TProtocol prot, bin_method_args stru
			TTupleProtocol iprot = (TTupleProtocol) prot;
		

				struct.bin = iprot.readBinary();
				struct.setBinIsSet(true);

			}
	 * 
	 * 
	 
			if (incoming.get(1)) {
				struct.Str =  iprot.readStri 		struct.se tStrIsSet	

		

		
			
				
			l
		r

		riv
		 ivate static final org.apache.thrift.protocol.TField API_FIELD_DESC = new o
		 
		rivate static final Map<Class<? extends IScheme>, S
			atic { 
			hemes.put(Standard
				emes.put(TupleS
			
				
			lic java
				ic actual_ba
			*
		u

		API
		  
		 * 
		 ri
		
			tatic {
			for (_Fields field 
				 EnumSet.allOf(_Fields.class)) {
				byName.put(fi
			

		
		 **
		 * 
		 */
			ublic static _Fields fin
			

					return SUCCESS;
				case 1: // API

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields fi	return byName.get(name); }
		
		private final short _thriftId;
		private final S
	

			_
	 	_fieldName = fieldName;
	 }
	
		public short getThriftField
			return _thriftId;
		}
		
			ublic String getFieldName() {
			
		

	
		/ isset id assignments
	p

	
	public bin_method_res
		java.nio.ByteBuffer 

		this();

		

	
		**
		* Performs a deep copy on <i>other</i>.
	 

		if (other.isSetSuccess()) {
			this.success = org.apache.thrift.TBaseHelper.copyBinary(
		

			this.api = new actual_base.java.api_exception(other
		} 
				
		
	

		return new bin_method_result(this);
		
		
	@

		this.success = null;
		
		

	}
	 * 
	 * 
	 
	
		ublic byte[] getSuccess() {
		

	}
		
			blic java.nio.ByteBu
		r
	}

	public bin_method_result setSuccess(byte[] succe
		this.success = s
		

	
		ublic bin_metho
		this.success
		

	
		ublic void unset
		

	
	 * 
	 * 
	 
	/** Returns true if field s
		ublic boolean isSetSucce
		

	
		ublic void se
			f (!value) {
			
		

	
		ublic actual_bas
		return this.a
			
				
			blic bin
				is.api = api; 
			e
			

		ublic voi
			his.api = null;
				
			
				 Returns true if field api is set (has  been as
			b
			eturn 

		
	p

			this.api = null;
		}
		
			

		switch (f
			ase SUCCESS:

			
			} else {
		

			b
	 * eak;
	 * 
	 
	
		case API:
			if (value == null) {
			

				setApi((actual
			}
			break;
		
			
		
		
	p

		case SUC
			return getSuccess();
		
			ase API:
			return getApi();
			 
		}
		

	
		** Returns true i
			blic boolean 

			throw new IllegalArgumentException();
		}
		
			witch (field) {
				se SUCCESS:
			return isSetSuccess();
				se API:
			

		throw new IllegalStateException();
		
		
			verride
				lic boolean e
			f (that == null)
				eturn false;
		i

		return false
	}

	public bo
		if (that == null)
			return false;

		boolean this_present_success = true && this.isSetSu
		boolean that_present_succe
		if (this_present_suc
			if (!(this_present

			if (!this.success.equals(that.success))
				return false;
		}
			

		boolean that_present_ap
		

				return
			if (!this.api.equals(that.api))
				return false;
			
		

		

		Override
		ublic int hashCode() {
			ist<Object> list = new
		
		boolean present_succe
			ist.add(present_success);
			f (present_success)
				ist.add(success);
			
		b
		list.add(present_api);
		if (present_api)
			list.add(api);
		
		return list.hashC
			
			
				erride
			b
		i
			return g
		

		int lastComparison = 0;
		
		

			return lastComparison;
		}
		

			if (lastComparison != 0) {
				return lastComparison;
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.
			if (lastComparison != 0) {
				return lastCompar
			}
			
		r
		
		
			
		ublic _Fields fiel
		return _Fields.findByTh
			
		
			blic void read(org.a
		s
		
		
		ublic void write(org.
		

	
		Override
		ublic String toString() {
		StringBuilder sb =
			oolean first = 
		
		

			sb.append("null");
		} els
			org.apache.thrift.TBaseHelper.toString(this.success, s
					b);
		}
			irst = false;
		i
		

			sb.append("null");
		} els
			sb.append(this.api);
			// 
			
					
		first = false;
			b.append(")");
		r
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
			/ check for sub-struct validity
		i
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serializ
						(new org.apache.thrift.protocol.TCom
						ch (org.apache.thrift.TExcept
					ow new j
						
					
					
				ate static cla
					ic bin_method_resultStandardScheme getScheme() {
						rn new bin_method_resultStandardScheme();
						
						
					
						e static class bin_method_resultStandardScheme extends StandardScheme<b
					
					ic voi
				g.apache
					ot.readStructBegin();
				h
				schemeField = iprot.r
				
					break;

				switch (schemeField.id) {
			// 
					case 0: // SUCCE
			

							struct.setSuccessIsSet(true);
				
						} else {

						}
						break;
					case 1: // API
						if (schemeField.type == org.apache.thrift.p
							struct.api = new actual_
							struct.api.read(ipr
				
						} else {
							org.apache.thrift.protocol.TProtoco
						}
						break;
				
						org.apache.thrift.pr
				}
			

		

			// check for required fields of primitive type, which can't be checked in the val
			struct.validate();
			
		
		

	

			if (stru
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				
				java.nio.ByteBuffer elem285 = struct.success
				oprot.writeBinary(elem285);
				oprot.writeFieldEnd();
				
			i
				oprot.writeFieldBegin(A
				struct.api.write(
				
			}
			oprot.writeFieldStop();
				prot.writeStructEnd();
				
			
			
				
			i
		p

		}
		
				
			
			ivate static class bin_method_resultTu
			
				verride
				blic void write(org.apache.th
			T
			BitSet optionals = new
				f (struct.isSetSuccess()) {
				optionals.set(0);
				
			i
			

		

	

			}
		
		
			if (struct.isSetApi()) {
			

			}
			 
		}
			 
	
			 

		public void read(org.apache.thrift.protocol.TProtocol prot, bin_method_result struct) throws org.apache.thrift.TException {
			TTuple
			BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0)) {
		

			}
			if (incoming.get(1)) 
				struct.api = new actual_base

				
	 * truct.api.read(iprot);
	 * 
	 
				struct.setApiIsSet(true);
			}  }   

		

		blic sta
			ivate static final org.apache.thrift.protocol.TStruc
				
			i
		r

		
		 ivate static final Map<Class<? extends IScheme>, SchemeFactory> schemes = n
		 at
		schemes.put(StandardScheme.class, new param_modifie
			chemes .put(TupleS
			
				
			lic int opt_num;
				ic int default_num;
			lic int req_num; /
				The set of fiel
			lic enum
				_NUM((short)
			E
		R

		
		 rivate static final Map<String, _Fields> byName = new HashMap<String, _ 
		 * 
		 ta
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
				
			
		

		 * 
		 */
		 ub
			switch(fieldId) {
				case 1: // OPT_NUM
			

					return DEFAULT_NUM;
				case 3: // REQ_NUM

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		 * Find the _Fields constant that matches name, or 
		 */
		public static _Fields findByName(

			return byName.get(name);
		

		private final short _thriftprivate fina  _Fields(short 
			_thrif
			_fieldName = fieldName
		}
		
		public short getThriftFiel
			return _thriftId;
		}
	

			r
	 }
	 
	
		/ isset id assignments
		rivate static final int __OPT
		rivate static final int __DEFAULT_NUM
		rivate static final int __REQ
	p

	}
		
	p

		int defa
		int req_num) {
		this();
		this.opt_num = op

		this.default_num = default_
		setDefault_numIsSet(t

		setReq_numIsSet(true);
		

	/

	 */
		ublic param_modifier
		

		this.default_num = other.default_num;
		this.req_num = other.re
		
		
	p

	}
		
	@

		se
	 * Opt_numIsSet(false);
	 * 
	 
		this.opt_num = 0;
		
		

	
		setReq_numIsSet(false);
		

	}
		
	p

	}
		
		ublic param_modifiers_args
		this.opt_num
		

	}
		
	p

	}
	 * 
	 * 
	 
	
		** Returns true if field opt_num is set (has been assigned a value) and
	p

	}
		
	p

	}
		
	p

	}
		
		ublic param_modifiers_
		this.default
		

	}
		
	p

	}
	 * 
	 * 
	 
	
		** Returns true if field default_num is set (has been assigned a va
	p

	}
		
	p

	}
		
		ublic int get
			eturn this.req_num;
				
			
				lic param_modifiers_ args se
			h
			etReq_

		
			
				lic void unsetReq_n
			_isset_b
				 
			
			* Retu

		return Encodi
			
				
			blic voi
				isset_bitfield = Enc odingUt
			
			

		s
		

				unsetOpt_num();
			} else {
				setOpt_num(
			}

		
			ase DEFAULT_NUM:

				unsetDefaul
			} else {

			
			break;
	

			i
	 *  (value == null) {
	 * 
	 
				unsetReq_num();
			} else {
				setReq_num((Integer)value);
			

		
		}
			
		
			blic Object getFieldValue(
		switch (field
			ase OPT_NUM:
			
		
		

	
		case REQ_NUM:
			return getReq_nu
			
		}
			hrow new IllegalStateException(); 
		
	

	public boolean isSet(_Fields field) {
		if (field == null
			throw new Ill

		
		switch (field) {
		case OPT_NUM:
			return isSetOpt_num();
				se DEFAULT_NU
			return isSetDefault_num();
				se REQ_NUM:
			

		throw new IllegalStateException();
		
		
			verride
				lic boolean e
			f (that == null)
				eturn false;
		i

		return false;
		
		
			blic boolean equals(param_modifiers_args that) {
				 (that == nul
			return false;
				
		b

		if (this_pre
		

			if (thi
				return false;
		}

		boolean this_present_default_nu
		boolean that_present_defau
		if (this_present_def
			if (!(this_present

			if (this.default_num != that.defau
				return false;
		}
			

		boolean that_present_req_num = 
		if (this_present_req_num |
			if (!(this_present_
				return false;

				return false;
		

		return t
	}
		
			verride
		u

		

		list.add(present_opt_num);
		if (present_opt_num)
			list.add(opt_num);
		
		boolean present_defau
			ist.add(present_default_num);
			f (present_default_num)
				ist.add(default_num);
			
		b
		list.add(present_req_num);
		if (present_req_num)
			list.add(req_num);
		
		return list.hashCode();
			
			
				erride
			b
		i
			return getClass().getName().compareTo(other.getClass().getName());
		}
			
		i
		
			astComparison = Boolean.valueOf(isSetOpt_num()).compareTo(other.isSetOpt_num());
			f (lastComparison != 0) {
				eturn lastComparison;
			
		i
			lastComp
		

			}
		}
		

			return lastComparison;
		}
		

			if (lastComparison != 0) {
				return lastComparison;
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.
			if (lastComparison != 0
				return lastC
			}
			
		}
		return 0;
		
		
			
		ublic _Fields fieldFor
		return _Fields.findByThr
		
		
		ublic void read(org.a
		

	
		ublic void write(org.apache.
		schemes.get(oprot.getScheme()).g
	}

	@Override
		ublic
			tringBuilder sb = new StringBuilder("param_modifiers_a
					rgs(");
		boolean first = true;
			
		s
		

		if (!first) sb.append(", ");
		sb.ap
			b.append(this.default_num);
			// 
			irst = false;
			f (!first) sb.append(", ");
					
		sb.append("req_num:");
			b.append(this.req_num);
		f
		

	}
		
			blic void validate() throws org.apache.thrift.TE
		/
		

	

		try {
				
			write(new org.apache.thrift.protocol.TCompactP
			 catch (org.apache.thrif
			throw new java
				
				
					
				v
				y {
				 it doesn't seem l
					sset_bitfield = 0;
						(new org.apache.thrift.protocol.T
						ch (org.apache.thrift.TExcept
					ow new j
						
					
					
				ate static class param
					ic param_modifiers_argsStandardScheme getScheme() {
						rn new param_modifiers_argsStandardSc
						
					
						
					t
					
				lic void read(org.
					.apache.thrift.protocol.TField schemeField;
						t.readStructBegin();
						e (true) {
					hemeFiel
						(schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					r
					
				witch (s
					ase 1: // OPT_NUM
					
							struct.opt_num = i
				
						} else {

						}
			// 
						break;
					case 2: // DEFAULT_NUM
						
				
							struct.default
			

							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				
						}

					case 3: // REQ_NUM
						if (schemeField.type == org.apache.thri
							struct.req_num = iprot.re
							struct.setReq_numIsS
						} else {
							org.apache.thrift.protocol.TProtocolUtil.s
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUti
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
			
			

		

			struct.validate();
		}
			
		p
		

			oprot.writeStructBegin(STRUCT_DESC);

			int elem
			oprot.writeI32(elem287);
				
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(DEFAULT
			int elem288 = struct.def
			oprot.writeI32(elem288);
			oprot.writeFieldEnd();
				prot.writeFieldBe
			i
			oprot.writeI32(elem289);
				prot.writeFieldEn
			o
			oprot.writeStructEnd();
			
				
				
			
			ivate static class param_modifie
				blic param_modifiers_argsTupleSch
				eturn new param_modifier
			
		

		rivate st
		
				
			Override
			ublic void write(org.apache.thrif
			TTupleProtocol oprot = (TTupl
			int elem290 = struct.req_num;
			oprot.writeI32(elem290
				itSet optionals = new BitSet();
				f (struct.isSetOpt_num()) {
				
			}
				f (struct.isSetDefault_num()) {
				optionals.set(1);
			}
			

		

	

				int elem292 = struct.default_num;
		
		
				oprot.writeI32(elem292);
			

		}
			 

		@Override
		public 
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.req_num = iprot.readI32();
		

			if (incoming.get(0

				
	 * truct.opt_num = iprot.readI32();
	 * 
	 
				struct.setOpt_numIsSet(true);
			} 	

				struct.setDefault_numIsSet(true);

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final 
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { CESS(
		 * short)0, "suc
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 0: // SUCCESS

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		 * Find the _Fields constant that

		 */
		

		}
		private
		private final String _f
		
		

			_
	 }
	 
		public short getThriftFieldId() {
			return _thriftId;
		}
	

			return _fieldName;
		}
	}

	// isset 
	private static final 
		rivate byte __isset_bit
		ublic param_modifi

	

		long success) {
		this();
		

	}
		
		**
		* Performs a
	 

		__isset_bitfield = other.__
		this.success = other.success;
	}

	pub
	 * ic param_modifiers_result deepCopy() {
	 * 
	 
		return new param_modifiers_res
		
	

	public void clear() {
		setSuccessIsSet(false);
		

	}
		
		ublic long ge
			eturn this.success;
				
			
				lic param_modifie rs_resu
			h
			etSucc

		
	

		__isset_bitfield = EncodingUtils.clearBit(_
		
		
			* Returns true if fi

		r
		
	

		__
	 * sset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID,
	 * value);
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unsetSucces
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase SUCCESS: 
			return getSu
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se SUCCESS:
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof param_modif
			return this.equals((param
		return false;
			

		ublic boolean equals(pa
		

	
		boolean this_present_success = true;
		boolean that_present_success = true;
			f (this_present_success || that_present_success) {
			

			if (this.success != th

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(param_modifiers_result other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.
			if (lastComparison != 0
				return lastC
			}
		}
		

	
		ublic _Fields fieldForId(int
		return _Fields.findByThriftId(fi
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift
		schem
			
					
		
			blic void write(org.apache.thrift.
		s
	}

	@Override
		ublic
			tringBuilder sb = new StringBuilder("param_modifiers_result(");
			// 
			oolean first = true;
			
					
		sb.append("success:");
			b.append(this.success);
		f
		

	}
		
			blic void validate() throws org.apache.thrift.TExc
		/
		

	

		try {
				
			write(new org.apache.thrift.protocol.TCompactP
			 catch (org.apache.thrif
			throw new java
				
				
					
				v
				y {
				 it doesn't seem l
					sset_bitfield = 0;
						(new org.apache.thrift.protocol.T
						ch (org.apache.thrift.TExcept
					ow new j
						
					
					
				ate stat
					ic param_modifiers_resultStandardScheme getScheme() {
				e
				
			
			

			
			// 
			ublic void read(or
			

			while (true) {
				
				schemeField = ipr

					break;
				}
				switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type =
							struct.success = ip
				
						} else {
							org.apache.thrift.p
			

		

				}
				iprot.readFieldEnd();
			}
			
	

			struct.validate();

		
		public void write(org.apache.thrift.protocol.TProtocol oprot, param_modifiers_result struct
				 throws org.apache.thrift.TException 
			struct.validate();
			
			oprot.writeStructBegin(STRUC
				f (struct.isSetSu
				
				long elem293 = struct.success;
				oprot.writeI64(elem293);
				oprot.writeFieldEnd();
				
			o
			

		
		
				
			
			ivate static class param_modifiers_res
			ublic param_modifiers_
				eturn new param_modifiers_resultT
				
			
		

	

	

			BitSet optionals = new BitSet();
		
		
			if (struct.isSetSuccess()) {
			

			}
			 
			oprot.writeBitSet(optionals, 1);
			 

				long elem294 = struct.success;
				oprot
			}
		}
	

		public void read(org.apache.thrift.pr
			TTupleProtocol iprot = (TTupleProt

			B
	 * tSet incoming = iprot.readBitSet(1);
	 * 
	 
			if (incoming.get(0)) {
				struct.success  = iprot.readI64( 		struct.setSucc essIsSet(true)	

		

		
			
				
			l
		r

		riv
		 ivate static final org.apache.thrift.protocol.TField SET_TYPE_FIELD_DESC = 
		 
		rivate static final Map<Class<? extends IScheme>, S
			atic { 
			hemes.put(StandardSc
				emes.put(TupleSch
			
				
			lic java
				ic java.util
			*
		u

		SET
		  
		 * 
		 ri
		
			tatic {
			for (_Fields field 
				 EnumSet.allOf(_Fields.class)) {
				byName.put(fi
			

		
		 **
		 * 
		 */
			ublic static _Fields fin
			

					return LIST_TYPE;
				case 2: // SET_TYPE

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields findByName(	return byName.get(name); }
		
		private final short _thrift
		private final String _fie
	

			_
	 	_fieldName = fieldName;
	 }
	
		public short getThriftFieldId
			return _thriftId;
			
				
				blic String getFieldName() {
			r
		}
		
			
			 isset id assignments
				lic underlying_types_te
				
			
		u
		

		this();
		this.list_type = list_type;
		

	
	/**
		* Performs a deep copy

		ublic underlying_type

		

				long elem296 = elem295;
				this.list_type.add(elem296);
		

		if (other.isSetSet_type()) {
			this.set_type = new HashSet<Long>(other.set_type.size());
		

				this.set_type.add(elem298);
			}
			
		
		
	p

	}
		
	@

		this.list_type = null;
		
		this.set_typ
	

	
		ublic int getList_type
		

	
	 * 
	 * 
	 
	public java.util.Iterator<Long> g
		return (this.list_type == null
	}

	public void addToList_type(long elem) {
		if (this.list
			this.list_type = new A
		}
		

	
		ublic java.util.List<Long> getList_type() {
		

	
		ublic underlying_types_test_args setList_type(java.util.List<Long
		

	}
		
			blic void unsetList_type() {
		t
		
	

	public boolean isSetList_type() {
		return this.list_type
	}

	public void setList_typeIsSet(boolean value) {
		if (!value) {
			this.list_t
		

	
		ublic int getSet_type
		

	
	 * 
	 * 
	 
	public java.util.Iterator<Long> 
		return (this.set_type == null
	}

	public void addToSet_type(long elem) {
		if (this.set_
			this.set_type = new H
		}
		

	
		ublic java.util.
		return this.set
			
				
			blic und
				is.set_type = set_type; 
			e
			

		ublic void uns
			his.set_type = null;
				
			
				 Returns true if field set_type i s set (
			b
			eturn 

		
	p

			this.set_type = null;
		}
		
			

		switch (field)
			ase LIST_TYPE:

			
			} else {
		

			b
	 * eak;
	 * 
	 
	
		case SET_TYPE:
			if (value == null) {
			

				setSet_type((j
			}
			break;
		
			
		
		
	p

		case LIS
			return getList_type();
		
			ase SET_TYPE:
			return getSet_type();
			 
		}
		

	
		** Returns true i
			blic boolean 

			throw new IllegalArgumentException();
		}
		
			witch (field) {
				se LIST_TYPE:
			return isSetList_type();
				se SET_TYPE:
			

		throw new IllegalStateException();
		
		
			verride
				lic boolean e
			f (that == null)
				eturn false;
		i

		return false
	}

	public bo
		if (that == null)
			return false;

		boolean this_present_list_type = true && this.isSetList
		boolean that_present_list_ty
		if (this_present_list_
			if (!(this_present_l

			if (!this.list_type.equals(that.list_type))
				return false;
		}
			

		boolean that_present_se
		

				return
			if (!this.set_type.equals(that.set_type))
				return false;
			
		

		

		Override
		ublic int hashCode() {
			ist<Object> list = new
		
		boolean present_list_ty
			ist.add(present_list_type);
			f (present_list_type)
				ist.add(list_type);
			
		b
		list.add(present_set_type);
		if (present_set_type)
			list.add(set_type);
		
		return list.hashCode()
			
			
				erride
			b
		i
			return g
		

		int lastComparison = 0;
		
		

			return lastComparison;
		}
		

			if (lastComparison != 0) {
				return lastComparison;
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.ap
			if (lastComparison != 0) {
				return lastCompar
			}
			
		r
		
		
			
		ublic _Fields fieldForI
		return _Fields.findByThriftI
			
		
			blic void read(org.apache
		s
		
		
		ublic void write(org.
		

	
		Override
		ublic String toString() {
		

	
		sb.ap
			f (this.list_type == null) {
					
			sb.append("null");
			 else {
			
		

		if (!first) sb.append(", ");
		sb.ap
			f (this.set_type == null) {
			// 
			sb.append("null");
					
		} else {
			sb.append(this.set_type);
		}
		

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serial
						(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.t
						ch (org.apache.thrift.TException te) {
						w new java.io.IOException(te);
							
							
						
						e static class under
						c underlying_types_test_argsSta
					urn new 
						
					
					
				ate static class un
					
						c void read(org.apache.thrift.protocol.TProtocol iprot, underly
						apache.thrift.protocol.TField schemeF i eld;
						t.readStructBegin();
							 (true) {
							meField = iprot.readFieldBegi
						(
						eak;
						
					itch (sc
						se 1: // LIST_TYPE
					i
						org.a
						struct
						for (int elem300 = 0; elem300 < elem299.size; ++elem300) {
					
								struct.list_type.
				
							iprot.readListEnd(

						} else {
			// 
							org.apache.thr
			

					case 2: // SET_TYPE
				
						if (schemeField

							struct.set_type = new HashSet<Lo
							for (int elem303 = 0; elem3
								long elem304 = iprot.readI64();
								struct.set_type.add(elem304);
						
							}
							iprot.readSetEnd();
							struct.setSet_typeIsSe
					
							org.apache.thrift.
						}
				
					default:
						org.apache.thrift.protocol.TProtocolUtil.
				}
						
				iprot.readFieldEnd();
					
					rot.readStructEnd();
				
				/ check for required
				truct.validate();
			
			
			ublic void write(org.ap
			

		

				oprot.writeFieldBegin(LIST_TYPE_FIELD_DESC);
				oprot.writeListBegin(new org.apache.thrift.protocol.TLis
				for (long elem305 : struct.list_type) {
			
		

				oprot.writeListEnd();

			}
			if (struct.set_type != null) {
				
				oprot.writeFieldBegin(SET_TYPE_FIELD_DESC);
				oprot.writeSetBegin(new org.apa
				for (long elem307 : struct.se
					long elem308 = e
				
				}
				oprot.writeSetEnd
				
			}
			oprot.writeFieldStop();
				prot.writeStructEnd();
				
					
					
				
			i
			ublic underlying_types_test_a
				eturn new underlying_types_test_argsTup
				
					
					
				v
			
		@

			TTuplePr
			BitSet optionals = new BitSet();
				
			if (struct.isSetList_type()) {
				optionals.set(0);
			}
				f (struct.isSetSet_type()) {
						
				optionals.set(1);
				
					rot.writeBitSet(optionals, 2);
					 (struct.isSetList_type()) {
				o
				for (long elem309 : struct.list
				
					oprot.writeI64(elem3
				}
						
				  
				f (struct.isSetSet_type()) {
					prot.writeI32(struct.set_type.s
					or (long elem311 : struct.set
					
					oprot.writeI64(elem312);
				
			

	

	

			BitSet incoming = iprot.readBitSet(2);
		
		
			if (incoming.get(0)) {
			

				struct.list_type = new ArrayList<Long>(elem313.size);
			 

					long elem315 = iprot.readI64();
					stru
				}
				struct.setList_typeIsSet(true);
		

				org.apache.thrift.protocol.TSet e

				
	 * truct.set_type = new HashSet<Long>(2*elem316.size);
	 * 
	 
				for (int elem317 = 0; elem317 < elem316.size; ++elem317) {
					long elem318  = iprot.read	

				struct.setSet_typeIsSet(true);

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final 
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { CESS(
		 * short)0, "suc
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 0: // SUCCESS

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields findByName(St	return byName.get(name);
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
			ublic short getThriftFieldId() {
				eturn _thriftId;
				
			
		p
		

	}
		
	/

	}
	
		ublic underlying_typ

		

	}
		
	/

	 */
		ublic underlying_types_test_result(underlying_types_test_result
		

			for (long elem319 : other.success) 
				long elem320 = elem319;
				this.success.add(elem320);
			
		}
	}

	public underlying_types_test_result deepCo
		return new underlyin
	}

	@Override
		ublic void clear() {
		this.success
	

	
		ublic int getSuccess
		

	
	 * 
	 * 
	 
	public java.util.Iterator<Long>
		return (this.success == null
	}

	public void addToSuccess(long elem) {
		if (this.succ
			this.success = new A
		}
		

	
		ublic java.util.
		return this.s
			
				
			blic und
				is.success = success; 
			e
			

		u
		

	
		** Returns true 
		ublic boolean
			eturn this.success !

		
		ublic void setSuccessIsSet(boolean
		

		}
	 * 
	 * 
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unsetSucces
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase SUCCESS: 
			return getSu
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se SUCCESS:
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof underlying_types_test_result)
			return this.equals((under
		return false;
			

		ublic boolean equals(un
		

	
		boolean this_present_success = true && this.isSetSuccess(
		boolean that_present_success = true && that
			f (this_present_success || that_present_success) {
			

			if (!this.success.equa

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(underlying_types_test_result other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.
			if (lastComparison != 0) {
				return lastCompar
			}
			
		r
		
		
		ublic _Fields fieldFo
		

	
		ublic void read(org.apache.t
		schemes.get(iprot.getScheme()).g
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrif
		schem
			
					
		
			verride
		u
		

	
		sb.ap
			f (this.success == null) {
			// 
			sb.append("null");
					
		} else {
			sb.append(this.success);
		}
		

		return sb.toString();
		
			
		u
		

	}
			

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serial
						(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.t
						ch (org.apache.thrift.TException te) {
						w new java.io.IOException(te);
							
							
						
						e static class under
						c underlying_types_test_resul
					urn new 
						
					
					
				ate stat
					
				b
				rg.apache.thrift.prot
			i
			while (true) {

				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
			// 
					break;
			

					case 0: // SUCCESS
				
						if (schemeField

							struct.success = new ArrayList<L
							for (int elem322 = 0; ele
								long elem323 = iprot.readI64();
								struct.success.add(elem323);
						
							}
							iprot.readListEnd();
							struct.setSuccessIsSet
					
							org.apache.thrift.
						}
				
					default:
						org.apache.thrift.pr
			

		

	
			// check for required fields of primitive type, which can't
			struct.validate();
		}
	

			struct.validate();

			oprot.wr
			if (struct.success != null) {
				
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeListBegin(new org.ap
				for (long elem324 : struct.
					long elem325 = e
				
				}
				oprot.writeListEnd();
				oprot.writeFieldEnd();
				
					rot.writeFieldStop();
					rot.writeStructEnd();
				
			
		

		rivate st
		public underlying_types_test_resultTupleScheme getScheme() {
				
			return new underlying_types_test_resultTupleS
			
			
				
						
				vate static class underlying_types_test_resultTuple
				
					erride
					lic void write(org.apache.th
				T
				itSet optionals = new BitSet(
			i
			

		

	

					long elem327 = elem326;
		
					oprot.writeI64(elem327);
			

		}
	
		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, underlying
		

			i
	 *  (incoming.get(0)) {
	 * 
	 
				org.apache.thrift.protocol.TList elem328 = new org.apache.th
			

					long elem330 = iprot.readI64();

				}
				struct.setSuccessIsSet(true);
				
			
		

		
		 
		 
		blic static class getThing_args implements org.apac
			ivate  static fina
			
				
			i
		t

		sch
		  
		 * 
		 * 
		ublic enum _Fields implements org.apache.thrift.TFieldIdEn
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		pu
	 	return byName.get(name);
	 }
	
		

	
		_Fields(short thriftId, String 
		

		}
	
		

		}
		
		p
		

	}
		
		/
		ublic getThing_args() {
	}

	/**
	 * 
	 * 
	 
	 * Performs a deep copy on <i>other</
		*/
			blic getThing_args(getThing_args othe
		

		ublic getThing_a
		r
		
	

	public vo
	}
		
			blic void set
		switch (field) {
			 
		
	

		switch (field) {
		}
			hrow new Ille

		
	/

		if (fiel
			throw new IllegalArgu
		}

		switch (field) {
		

	}
	
		Override
			blic boolean equals(Object that) {
		i

		if (that instanceof get

		return fa
	}

	public boolean equals(getThing_args that
		if (that == null)
		

		return true;
		
	

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();
	

	}
	
		Override
		ublic int compareTo(g

			return getClas
		}
	

	
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
			
					
		ublic void read(org.apache.thrift.protocol.
			chemes.get(iprot.getScheme()).getS
		
	

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		
			
			// 
			verride
					
		ublic String toString() {
			tringBuilder sb = new StringBuilde
		b
	

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
				{
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serialization
				e
				catch (org.apache.thr
			t
			

			
			// 
			ivate static class
		p

		}
				
			

			ivate static class getThing_argsStan
			
			ublic void read(org.apa
			

		

				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
			
		

				}

			}
			iprot.readStructEnd();
				
			
			

		}
		
				
			ublic void write(org.apache.thrift.protocol.T
			

		

	


		
	}
			

	private static class getThing_argsTupleSchemeFactory implements SchemeFactory {
			 

			return new getThing_argsTupleScheme();
		}
		
		
	p

		@Override

		pu
	 * lic void write(org.apache.thrift.protocol.TProtocol prot, getThing_args st
	 * uct) throws org.apache.thrift.
	 Ex
			TTupleProtocol oprot = (TTupleProtocol) prot;
		} 

		public void read(org.apache.thrift.protocol.TProtocol prot, getThing_args struct) 

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final 
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { CESS(
		 * short)0, "suc
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 0: // SUCCESS

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields 	return byName.g
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
		p
		

	
		public String getFieldName() {
		

	}
	
		/ isset id assignmen

	}

	public getThing_result(
		Thing success) {
		

	}
		
		**
	 

	public getThing_result(getTh
		if (other.isSetSucce
		

	}
	 * 
	 * 
	 
	
		ublic getThing_result deepCo
		

	
		Override
			blic void clear() {
		t
	

	
		ublic Thing getS
		return this.s
			
				
			blic get
				is.success = succe ss;
			e
			

		u
		

	
		** Returns true 
		ublic boolean
			eturn this.success !

		
		ublic void setSuccessIsSet(boolean
		

		}
	 * 
	 * 
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unsetSucces
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase SUCCESS: 
			return getSu
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se SUCCESS:
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof getThing_result)
			return this.equals((getTh
		return false;
			

		ublic boolean equals(ge
		

	
		boolean this_present_success = true && this.
		boolean that_present_success = true && that
			f (this_present_success || that_present_success) {
			

			if (!this.success.equa

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(getThing_result other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.
			if (lastComparison != 0) {
				return lastCompar
			}
			
		r
		
		
		ublic _Fields fieldFo
		

	
		ublic void read(org.apache.t
		schemes.get(iprot.getScheme()).g
		
			
		u
		

	
		Overr
			blic String toString() {
					
		StringBuilder sb = new StringBuilder("getTh
			oolean first = true;
		
		

			sb.append("null");
		} els
			sb.append(this.success);
			// 
			
					
		first = false;
			b.append(")");
		r
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
			/ check for sub-struct validity
		i
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serializ
						(new org.apache.thrift.protoc
						ch (org.apache.thrift.TExce
						w new java.io.IOException(te)
					
						
					
					te sta
				lic getT
					urn new getThing_resultStandardScheme();
				
				
			
			ivate static class get

			ublic void read(org.apache.thrift.protocol.TProtocol iprot, getThing_result s
			// ruct) throws or
			org.apache.thrift.
			

				schemeField = iprot.readFieldBegin();
				
				if (schemeField.t

				}
				switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == or
							struct.success = ne
				
							struct.setSuccessIs
						} else {
			

		

						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			
		

			// check for required fields of primitive type, which can't be checked in the valida

		}
		
				
			ublic void write(org.apache.thrift.protocol.T
			struct.validate();
			
				prot.writeStructB
			i
				oprot.writeFieldBegin(SUCCESS_F
				struct.success.write(oprot)
				oprot.writeFieldEnd();
			}
			

		}
		
				
			
			
			ivate static class get
				blic getThing_resultTupleSche
				eturn new getThing_resultTu
				
			
		

	

	

			BitSet optionals = new BitSet();
		
			if (struct.isSetSuccess()) {
			

			oprot.writeBitSet(optionals, 1);
			if (st
				struct.success.write(oprot);
			}
		

		@O
	 * erride
	 * 
	 
		public void read(org.apache.thrift.protocol.TProtocol prot, ge
			

			if (incoming.get(0)) {

				struct
				struct.setSuccessIsSet(true);
				
			
		

		
		 
		 
		blic static class getMyInt_args implements org.apac
			ivate  static fina
			
				
			i
		t

		sch
		  
		 * 
		 * 
		ublic enum _Fields implements org.apache.thrift.TFieldIdEn
			
			
				
			rivate static 
		

			fo
		 	byName.put(field.getFieldName(), field);
		 }
		}
			
		/

		 */
		public static _Fields findByThri

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		pu
	 	return byName.get(name);
	 }
	
		

	
		_Fields(short thriftId, String 
		

		}
	
		

		}
		
		p
		

	}
		
		/
		ublic getMyInt_args() {
	}

	/**
	 * 
	 * 
	 
	 * Performs a deep copy on <i>other</
		*/
			blic getMyInt_args(getMyInt_args othe
		

		ublic getMyInt_a
		r
		
	

	public vo
	}
		
			blic void set
		switch (field) {
			 
		
	

		switch (field) {
		}
			hrow new Ille

		
	/

		if (fiel
			throw new IllegalArgu
		}

		switch (field) {
		

	}
	
		Override
			blic boolean equals(Object that) {
		i

		if (that instanceof get

		return fa
	}

	public boolean equals(getMyInt_args that
		if (that == null)
		

		return true;
		
	

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();
	

	}
	
		Override
		ublic int compareTo(g

			return getClas
		}
	

	
		return 0;
		
	

		return _Fields.findByThriftId(fieldId);
		
			
					
		ublic void read(org.apache.thrift.protocol.
			chemes.get(iprot.getScheme()).getS
		
	

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		
			
			// 
			verride
					
		ublic String toString() {
			tringBuilder sb = new StringBuilde
		b
	

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
				{
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serialization
				e
				catch (org.apache.thr
			t
			

			
			// 
			ivate static class
		p

		}
				
			

			ivate static class getMyInt_argsStan
			
			ublic void read(org.apa
			

		

				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
			
		

				}

			}
			iprot.readStructEnd();
				
			
			

		}
		
				
			ublic void write(org.apache.thrift.protocol.T
			

		

	


		
	}
			

	private static class getMyInt_argsTupleSchemeFactory implements SchemeFactory {
			 

			return new getMyInt_argsTupleScheme();
		}
		
		
	p

		@Override

		pu
	 * lic void write(org.apache.thrift.protocol.TProtocol prot, getMyInt_args st
	 * uct) throws org.apache.thrift.
	 Ex
			TTupleProtocol oprot = (TTupleProtocol) prot;
		} 

		public void read(org.apache.thrift.protocol.TProtocol prot, getMyInt_args struct) 

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final 
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { CESS(
		 * short)0, "suc
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 0: // SUCCESS

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		 * Find the _Fields constant that

		 */
		

		}
		private
		private final String _f
		
		

			_
	 }
	 
		public short getThriftFieldId() {
			return _thriftId;
		}
	

			return _fieldName;
		}
	}

	// isset 
	private static final 
		rivate byte __isset_bit
		ublic getMyInt_re

	

		int success) {
		this();
		

	}
		
		**
		* Performs a
	 

		__isset_bitfield = other.__
		this.success = other.success;
	}

	pub
	 * ic getMyInt_result deepCopy() {
	 * 
	 
		return new getMyInt_result(thi
		
	

	public void clear() {
		setSuccessIsSet(false);
		

	}
		
		ublic int get
			eturn this.success;
				
			
				lic getMyInt_result  setSucc
			h
			etSucc

		
	

		__isset_bitfield = EncodingUtils.clearBit(_
		
		
			* Returns true if fi

		r
		
	

		__
	 * sset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID,
	 * value);
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unsetSucces
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase SUCCESS: 
			return getSu
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se SUCCESS:
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof getMyInt_re
			return this.equals((getMy
		return false;
			

		ublic boolean equals(ge
		

	
		boolean this_present_success = true;
		boolean that_present_success = true;
			f (this_present_success || that_present_success) {
			

			if (this.success != th

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(getMyInt_result other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.
			if (lastComparison != 0
				return lastC
			}
		}
		

	
		ublic _Fields fieldForId(int
		return _Fields.findByThriftId(fi
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift
		schem
			
					
		
			blic void write(org.apache.thrift.
		s
	}

	@Override
		ublic
			tringBuilder sb = new StringBuilder("getMyInt_result(");
			// 
			oolean first = true;
			
					
		sb.append("success:");
			b.append(this.success);
		f
		

	}
		
			blic void validate() throws org.apache.thri
		/
		

	

		try {
				
			write(new org.apache.thrift.protocol.TCompactP
			 catch (org.apache.thrif
			throw new java
				
				
					
				v
				y {
				 it doesn't seem l
					sset_bitfield = 0;
						(new org.apache.thrift.protocol.T
						ch (org.apache.thrift.TExcept
					ow new j
						
					
					
				ate stat
					ic getMyInt_resultStandardScheme getScheme() {
				e
				
			
			

			
			// 
			ublic void read(or
			

			while (true) {
				
				schemeField = ipr

					break;
				}
				switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type =
							struct.success = ip
				
						} else {
							org.apache.thrift.p
			

		

				}
				iprot.readFieldEnd();
			}
			
	

			struct.validate();

		
		public void write(org.apache.thrift.protocol.TProtocol oprot, getMyInt_result struct
				 throws org.apache.thrift.TException 
			struct.validate();
			
			oprot.writeStructBegin(STRUC
				f (struct.isSetSu
				
				int elem331 = struct.success;
				oprot.writeI32(elem331);
				oprot.writeFieldEnd();
				
			o
			

		
		
				
			
			ivate static class getMyInt_resultTupl
			ublic getMyInt_resultT
				eturn new getMyInt_resultTupleSch
				
			
		

	

	

			BitSet optionals = new BitSet();
		
		
			if (struct.isSetSuccess()) {
			

			}
			 

			if (struct.isSetSuccess()) {
				int e
				oprot.writeI32(elem332);
			}
		

		@Override

		pu
	 * lic void read(org.apache.thrift.protocol.TProtocol prot, getMyInt_result s
	 * ruct) throws org.apache.thrift
	 TE
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet i ncoming	

				struct.setSuccessIsSet(true);

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static 
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { short
		 * 1, "a")
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 1: // A

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields findByN	retur
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
		p
		

	
		public String getFieldName() {
		

	}
	
		/ isset id ass

	}

	public use_subdir
		A a) {
		

	}
		
		**
	 

	public use_subdir_stru
		if (other.isSe
		

	}
	 * 
	 * 
	 
	
		ublic use_subdir_struc
		

	
		Override
			blic void clea
		t
	

	
		ublic A getA() {
		return 
			
				
			blic use
				is.a = a ;
			e
			

		u
		

	
		** Returns true 
		ublic b
			eturn this.a !

		
		ublic void setAIsSet(boolean value
		

		}
	 * 
	 * 
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unset
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase A: 
			return getA(
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se A:
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof use_subdir_struct_a
			return this.equals(
		return false;
			

		ublic boolean equals(us
		

	
		boolean this_present_a = true && this.isSetA();
		boolean that_present_a = true && that.isSet
			f (this_present_a || that_present_a) {
			

			if (!this.a.equals(tha

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(use_subdir_struct_args other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison 
			if (lastComparison !
				return lastCompar
			}
			
		r
		
		
		ublic _Fields fieldFo
		

	
		ublic void read(org.apache.t
		schemes.get(iprot.getScheme()).g
		
			
		u
		

	
		Overr
			blic String toString() {
					
		StringBuilder sb = new StringBuilder("use_s
			oolean first = true;
		
		

			sb.append("null");
		} els
			sb.append(this.a);
			// 
			
					
		first = false;
			b.append(")");
		r
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
			/ check for sub-struct validity
		i
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serializ
						(new org.apache.thr
						ch (org.apache.thrift
						w new java.io.IOExcepti
					
						
					
					te sta
				lic use_
					urn new use_subdir_struct_argsStandardScheme();
				
				
			
			ivate static class use

			ublic void read(org.apache.thrift.protocol.TProtocol iprot, use_subdir_struct
			// args struct) th
			org.apache.thrift.
			

				schemeField = iprot.readFieldBegin();
				
				if (schemeField.t

				}
				switch (schemeField.id
					case 1: // A
						if (schemeField.type
							struct.a = new A();
				
							struct.setAIsSet(tr
						} else {
			

		

						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			
		

			// check for required fields of primitive type, which can't be checked in the validate method

		}
		
				
			ublic void write(org.apache.thrift.protocol.T
			struct.validate();
			
				prot.writeStructB
			i
				oprot.writeFieldBegin(A_FIELD_D
				struct.a.write(oprot)
				oprot.writeFieldEnd();
			}
			

		}
		
				
			
			
			ivate static class use
				blic use_subdir_str
				eturn new use_subdir_
				
			
		

	

	

			BitSet optionals = new BitSet();
		
		
			if (struct.isSetA()) {
			

			}
			 

			if (struct.isSetA()) {
				struc
			}
		}
	

		public void read

			T
	 * upleProtocol iprot = (TTupleProtocol) prot;
	 * 
	 
			BitSet incoming = iprot.readBitSet(1);
			if (incoming.g et(0)) {	

				struct.setAIsSet(true);

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final 
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { CESS(
		 * short)0, "suc
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 0: // SUCCESS

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields findByNam	return byNa
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
		p
		

	
		public String getFieldName() {
		

	}
	
		/ isset id assignmen

	}

	public use_subdir_struc
		A success) {
		

	}
		
		**
	 

	public use_subdir_struct_res
		if (other.isSetSucce
		

	}
	 * 
	 * 
	 
	
		ublic use_subdir_struct_resu
		

	
		Override
			blic void clear() {
		t
	

	
		ublic A getSucce
		return this.s
			
				
			blic use
				is.success = s uccess;
			e
			

		u
		

	
		** Returns true 
		ublic boolean
			eturn this.success !

		
		ublic void setSuccessIsSet(boolean
		

		}
	 * 
	 * 
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unsetSucces
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase SUCCESS: 
			return getSu
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se SUCCESS:
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof use_subdir_struct_result)
			return this.equals((use_s
		return false;
			

		ublic boolean equals(us
		

	
		boolean this_present_success = true && this.isSetSucc
		boolean that_present_success = true && that
			f (this_present_success || that_present_success) {
			

			if (!this.success.equa

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(use_subdir_struct_result other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.
			if (lastComparison != 0) {
				return lastCompar
			}
			
		r
		
		
		ublic _Fields fieldFo
		

	
		ublic void read(org.apache.t
		schemes.get(iprot.getScheme()).g
		
			
		u
		

	
		Overr
			blic String toString() {
					
		StringBuilder sb = new StringBuilder("use_s
			oolean first = true;
		
		

			sb.append("null");
		} els
			sb.append(this.success);
			// 
			
					
		first = false;
			b.append(")");
		r
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
			/ check for sub-struct validity
		i
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serializ
						(new org.apache.thrift.pr
						ch (org.apache.thrift.TExce
						w new java.io.IOException(te)
					
						
					
					te sta
				lic use_
					urn new use_subdir_struct_resultStandardScheme();
				
				
			
			ivate static class use

			ublic void read(org.apache.thrift.protocol.TProtocol iprot, use_subdir_struct
			// result struct) 
			org.apache.thrift.
			

				schemeField = iprot.readFieldBegin();
				
				if (schemeField.t

				}
				switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == or
							struct.success = ne
				
							struct.setSuccessIs
						} else {
			

		

						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			
		

			// check for required fields of primitive type, which can't be checked in the validate method

		}
		
				
			ublic void write(org.apache.thrift.protocol.T
			struct.validate();
			
				prot.writeStructB
			i
				oprot.writeFieldBegin(SUCCESS_F
				struct.success.write(oprot)
				oprot.writeFieldEnd();
			}
			

		}
		
				
			
			
			ivate static class use
				blic use_subdir_struct_re
				eturn new use_subdir_struct
				
			
		

	

	

			BitSet optionals = new BitSet();
		
			if (struct.isSetSuccess()) {
			

			}
			 

			if (struct.isSetSuccess()) {
				struc
			}
		}
	

		public void read(org.apa

			T
	 * upleProtocol iprot = (TTupleProtocol) prot;
	 * 
	 
			BitSet incoming = iprot.readBitSet(1);
			if (incoming.get(0 )) {	

				struct.setSuccessIsSet(true);

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final Map<
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { _MESS
		 * GE((short)1, 
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 1: // NEW_MESSAGE

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields fi	return byName.get(n
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
		p
		

	
		public String getFieldName() {
		

	}
	
		/ isset id assignments

	}

	public sayHelloWith_args(
		String newMessage) {
		

	}
		
		**
	 

	public sayHelloWith_args(sayHel
		if (other.isSetNewMessa
		

	}
	 * 
	 * 
	 
	
		ublic sayHelloWith_args deepCop
		

	
		Override
			blic void clear() {
		t
	

	
		ublic String get
		return this.newMe
			
				
			blic say
				is.newMessage = newMes sage;
			e
			

		u
		

	
		** Returns true 
		ublic boolean isS
			eturn this.newMessage !

		
		ublic void setNewMessageIsSet(bool
		

		}
	 * 
	 * 
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unsetNewMessage
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase NEW_MESSAGE: 
			return getNe
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se NEW_MESSAG
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof sayHelloWith_args)
			return this.equals((sayHello
		return false;
			

		ublic boolean equals(sa
		

	
		boolean this_present_newMessage = true && this
		boolean that_present_newMessage = true && t
			f (this_present_newMessage || that_present_newMessage) {
			

			if (!this.newMessage.e

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(sayHelloWith_args other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.apa
			if (lastComparison != 0) {
				return lastCompar
			}
			
		r
		
		
		ublic _Fields fieldFo
		

	
		ublic void read(org.apache.t
		schemes.get(iprot.getScheme()).g
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrif
		schem
			
					
		
			verride
		u
		

	
		sb.ap
			f (this.newMessage == null) {
			// 
			sb.append("null");
					
		} else {
			sb.append(this.newMessage);
		}
		

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serializ
						(new org.apache.thrift.protocol.TCompac
						ch (org.apache.thrift.TException
					ow new j
						
					
					
				ate stat
					ic sayHelloWith_argsStandardScheme getScheme() {
				e
				
			
			

			
			// 
			ublic void read(or
			

			while (true) {
				
				schemeField = ipr

					break;
				}
				switch (schemeField.id) {
					case 1: // NEW_MESSAGE
						if (schemeField.type == o
							struct.newMessage =
				
						} else {
							org.apache.thrift.p
			

		

				}
				iprot.readFieldEnd();
			}
			
	

			struct.validate();

		
		public void write(org.apache.thrift.protocol.TProtocol oprot, sayHelloWith_args struct
				 throws org.apache.thrift.TException 
			struct.validate();
			
			oprot.writeStructBegin(STRUCT_D
				f (struct.newMess
				
				String elem333 = struct.newMess
				oprot.writeString(elem333);
				oprot.writeFieldEnd();
				
			o
			

		
		
				
			
			ivate static class sayHelloWith_argsTu
			ublic sayHelloWith_arg
				eturn new sayHelloWith_argsTupleScheme(
				
			
		

	

	

			BitSet optionals = new BitSet();
		
		
			if (struct.isSetNewMessage()) {
			

			}
			 

			if (struct.isSetNewMessage()) {
				Strin
				oprot.writeString(elem334);
			}
		

		@Override

		pu
	 * lic void read(org.apache.thrift.protocol.TProtocol prot, sayHelloWith_args
	 * struct) throws org.apache.thri
	 t.
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incomin g = iprot.rea	

				struct.setNewMessageIsSet(true);

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final 
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { CESS(
		 * short)0, "suc
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 0: // SUCCESS

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields find	return byName.ge
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
		p
		

	
		public String getFieldName() {
		

	}
	
		/ isset id assignmen

	}

	public sayHelloWith_result(
		String success) {
		

	}
		
		**
	 

	public sayHelloWith_result(s
		if (other.isSetSucce
		

	}
	 * 
	 * 
	 
	
		ublic sayHelloWith_result de
		

	
		Override
			blic void clear() {
		t
	

	
		ublic String get
		return this.s
			
				
			blic say
				is.success = succes s;
			e
			

		u
		

	
		** Returns true 
		ublic boolean
			eturn this.success !

		
		ublic void setSuccessIsSet(boolean
		

		}
	 * 
	 * 
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unsetSucces
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase SUCCESS: 
			return getSu
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se SUCCESS:
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof sayHelloWith_result)
			return this.equals((sayHe
		return false;
			

		ublic boolean equals(sa
		

	
		boolean this_present_success = true && this.isSe
		boolean that_present_success = true && that
			f (this_present_success || that_present_success) {
			

			if (!this.success.equa

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(sayHelloWith_result other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.
			if (lastComparison != 0) {
				return lastCompar
			}
			
		r
		
		
		ublic _Fields fieldFo
		

	
		ublic void read(org.apache.t
		schemes.get(iprot.getScheme()).g
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrif
		schem
			
					
		
			verride
		u
		

	
		sb.ap
			f (this.success == null) {
			// 
			sb.append("null");
					
		} else {
			sb.append(this.success);
		}
		

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serializ
						(new org.apache.thrift.protocol.TCom
						ch (org.apache.thrift.TExcept
					ow new j
						
					
					
				ate stat
					ic sayHelloWith_resultStandardScheme getScheme() {
				e
				
			
			

			
			// 
			ublic void read(or
			

			while (true) {
				
				schemeField = ipr

					break;
				}
				switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == o
							struct.success = ip
				
						} else {
							org.apache.thrift.p
			

		

				}
				iprot.readFieldEnd();
			}
			
	

			struct.validate();

		
		public void write(org.apache.thrift.protocol.TProtocol oprot, sayHelloWith_result struct
				 throws org.apache.thrift.TException 
			struct.validate();
			
			oprot.writeStructBegin(STRUC
				f (struct.success
				
				String elem335 = struct.success
				oprot.writeString(elem335);
				oprot.writeFieldEnd();
				
			o
			

		
		
				
			
			ivate static class sayHelloWith_result
			ublic sayHelloWith_res
				eturn new sayHelloWith_resultTupleSc
				
			
		

	

	

			BitSet optionals = new BitSet();
		
			if (struct.isSetSuccess()) {
			

			}
			 

			if (struct.isSetSuccess()) {
				Strin
				oprot.writeString(elem336);
			}
		

		@Override

		pu
	 * lic void read(org.apache.thrift.protocol.TProtocol prot, sayHelloWith_resu
	 * t struct) throws org.apache.th
	 if
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = i prot.readBitSet(1	

				struct.setSuccessIsSet(true);

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final Map<C
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { SAGE_
		 * RGS((short)1,
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 1: // MESSAGE_ARGS

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields fi	return byName.get(na
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
		p
		

	
		public String getFieldName() {
		

	}
	
		/ isset id assignments

	}

	public whatDoYouSay_args(
		String messageArgs) {
		

	}
		
		**
	 

	public whatDoYouSay_args(whatDoY
		if (other.isSetMessageAr
		

	}
	 * 
	 * 
	 
	
		ublic whatDoYouSay_args deepCopy
		

	
		Override
			blic void clear() {
		t
	

	
		ublic String get
		return this.messag
			
				
			blic wha
				is.messageArgs = messag eArgs;
			e
			

		u
		

	
		** Returns true 
		ublic boolean isSe
			eturn this.messageArgs !

		
		ublic void setMessageArgsIsSet(boo
		

		}
	 * 
	 * 
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unsetMessageArgs
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase MESSAGE_ARGS: 
			return getMe
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se MESSAGE_AR
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof whatDoYouSay_args)
			return this.equals((whatDoYou
		return false;
			

		ublic boolean equals(wh
		

	
		boolean this_present_messageArgs = true && thi
		boolean that_present_messageArgs = true && 
			f (this_present_messageArgs || that_present_messageArgs) {
			

			if (!this.messageArgs.

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(whatDoYouSay_args other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.apac
			if (lastComparison != 0) {
				return lastCompar
			}
			
		r
		
		
		ublic _Fields fieldFo
		

	
		ublic void read(org.apache.t
		schemes.get(iprot.getScheme()).g
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrif
		schem
			
					
		
			verride
		u
		

	
		sb.ap
			f (this.messageArgs == null) {
			// 
			sb.append("null");
					
		} else {
			sb.append(this.messageArgs);
		}
		

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serializ
						(new org.apache.thrift.protocol.TCompact
						ch (org.apache.thrift.TException 
					ow new j
						
					
					
				ate stat
					ic whatDoYouSay_argsStandardScheme getScheme() {
				e
				
			
			

			
			// 
			ublic void read(or
			

			while (true) {
				
				schemeField = ipr

					break;
				}
				switch (schemeField.id) {
					case 1: // MESSAGE_ARGS
						if (schemeField.type == o
							struct.messageArgs 
				
						} else {
							org.apache.thrift.p
			

		

				}
				iprot.readFieldEnd();
			}
			
	

			struct.validate();

		
		public void write(org.apache.thrift.protocol.TProtocol oprot, whatDoYouSay_args struct
				 throws org.apache.thrift.TException 
			struct.validate();
			
			oprot.writeStructBegin(STRUCT_DE
				f (struct.message
				
				String elem337 = struct.message
				oprot.writeString(elem337);
				oprot.writeFieldEnd();
				
			o
			

		
		
				
			
			ivate static class whatDoYouSay_argsTu
			ublic whatDoYouSay_arg
				eturn new whatDoYouSay_argsTupleScheme()
				
			
		

	

	

			BitSet optionals = new BitSet();
		
		
			if (struct.isSetMessageArgs()) {
			

			}
			 

			if (struct.isSetMessageArgs()) {
				Strin
				oprot.writeString(elem338);
			}
		

		@Override

		pu
	 * lic void read(org.apache.thrift.protocol.TProtocol prot, whatDoYouSay_args
	 * struct) throws org.apache.thri
	 t.
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incomin g = iprot.rea	

				struct.setMessageArgsIsSet(true);

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final 
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { CESS(
		 * short)0, "suc
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 0: // SUCCESS

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields find	return byName.ge
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
		p
		

	
		public String getFieldName() {
		

	}
	
		/ isset id assignmen

	}

	public whatDoYouSay_result(
		String success) {
		

	}
		
		**
	 

	public whatDoYouSay_result(w
		if (other.isSetSucce
		

	}
	 * 
	 * 
	 
	
		ublic whatDoYouSay_result de
		

	
		Override
			blic void clear() {
		t
	

	
		ublic String get
		return this.s
			
				
			blic wha
				is.success = succes s;
			e
			

		u
		

	
		** Returns true 
		ublic boolean
			eturn this.success !

		
		ublic void setSuccessIsSet(boolean
		

		}
	 * 
	 * 
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unsetSucces
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase SUCCESS: 
			return getSu
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se SUCCESS:
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof whatDoYouSay_result)
			return this.equals((whatD
		return false;
			

		ublic boolean equals(wh
		

	
		boolean this_present_success = true && this.isSe
		boolean that_present_success = true && that
			f (this_present_success || that_present_success) {
			

			if (!this.success.equa

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(whatDoYouSay_result other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.
			if (lastComparison != 0) {
				return lastCompar
			}
			
		r
		
		
		ublic _Fields fieldFo
		

	
		ublic void read(org.apache.t
		schemes.get(iprot.getScheme()).g
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrif
		schem
			
					
		
			verride
		u
		

	
		sb.ap
			f (this.success == null) {
			// 
			sb.append("null");
					
		} else {
			sb.append(this.success);
		}
		

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serializ
						(new org.apache.thrift.protocol.TCom
						ch (org.apache.thrift.TExcept
					ow new j
						
					
					
				ate stat
					ic whatDoYouSay_resultStandardScheme getScheme() {
				e
				
			
			

			
			// 
			ublic void read(or
			

			while (true) {
				
				schemeField = ipr

					break;
				}
				switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == o
							struct.success = ip
				
						} else {
							org.apache.thrift.p
			

		

				}
				iprot.readFieldEnd();
			}
			
	

			struct.validate();

		
		public void write(org.apache.thrift.protocol.TProtocol oprot, whatDoYouSay_result struct
				 throws org.apache.thrift.TException 
			struct.validate();
			
			oprot.writeStructBegin(STRUC
				f (struct.success
				
				String elem339 = struct.success
				oprot.writeString(elem339);
				oprot.writeFieldEnd();
				
			o
			

		
		
				
			
			ivate static class whatDoYouSay_result
			ublic whatDoYouSay_res
				eturn new whatDoYouSay_resultTupleSc
				
			
		

	

	

			BitSet optionals = new BitSet();
		
			if (struct.isSetSuccess()) {
			

			}
			 

			if (struct.isSetSuccess()) {
				Strin
				oprot.writeString(elem340);
			}
		

		@Override

		pu
	 * lic void read(org.apache.thrift.protocol.TProtocol prot, whatDoYouSay_resu
	 * t struct) throws org.apache.th
	 if
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = ipr ot.readBitSet(1);	

				struct.setSuccessIsSet(true);

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final Map<Cla
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { SAGE_
		 * ESULT((short)
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 1: // MESSAGE_RESULT

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Field	return byName.get(name
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
		p
		

	
		public String getFieldName() {
		

	}
	
		/ isset id assignments

	}

	public sayAgain_args(
		String messageResult) {
		

	}
		
		**
	 

	public sayAgain_args(sayAgain_args
		if (other.isSetMessageResu
		

	}
	 * 
	 * 
	 
	
		ublic sayAgain_args deepCopy() {
		

	
		Override
			blic void clear() {
		t
	

	
		ublic String get
		return this.messageR
			
				
			blic say
				is.messageResult = messag eResult
			e
			

		u
		

	
		** Returns true 
		ublic boolean isSetM
			eturn this.messageResult !

		
		ublic void setMessageResultIsSet(b
		

		}
	 * 
	 * 
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unsetMessageResult
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase MESSAGE_RESULT: 
			return getMe
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se MESSAGE_RE
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof sayAgain_args)
			return this.equals((sayAgain_ar
		return false;
			

		ublic boolean equals(sa
		

	
		boolean this_present_messageResult = true 
		boolean that_present_messageResult = true &
			f (this_present_messageResult || that_present_messageResult) {
			

			if (!this.messageResul

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(sayAgain_args other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.apache
			if (lastComparison != 0) {
				return lastCompar
			}
			
		r
		
		
		ublic _Fields fieldFo
		

	
		ublic void read(org.apache.t
		schemes.get(iprot.getScheme()).g
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrif
		schem
			
					
		
			verride
		u
		

	
		sb.ap
			f (this.messageResult == null) {
			// 
			sb.append("null");
					
		} else {
			sb.append(this.messageResult);
		}
		

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
				{
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serializ
						(new org.apache.thrift.protocol.TCompactPr
						ch (org.apache.thrift.TException te
					ow new j
						
					
					
				ate stat
					ic sayAgain_argsStandardScheme getScheme() {
				e
				
			
			

			
			// 
			ublic void read(or
			

			while (true) {
				
				schemeField = ipr

					break;
				}
				switch (schemeField.id) {
					case 1: // MESSAGE_RESULT
						if (schemeField.type == o
							struct.messageResul
				
						} else {
							org.apache.thrift.p
			

		

				}
				iprot.readFieldEnd();
			}
			
	

			struct.validate();

		
		public void write(org.apache.thrift.protocol.TProtocol oprot, sayAgain_args struct
				 throws org.apache.thrift.TException 
			struct.validate();
			
			oprot.writeStructBegin(STRUCT_DESC
				f (struct.message
				
				String elem341 = struct.message
				oprot.writeString(elem341);
				oprot.writeFieldEnd();
				
			o
			

		
		
				
			
			ivate static class sayAgain_argsTupleS
			ublic sayAgain_argsTup
				eturn new sayAgain_argsTupleScheme();
				
			
		

	

	

			BitSet optionals = new BitSet();
		
			if (struct.isSetMessageResult()) {
			

			}
			 

			if (struct.isSetMessageResult()) {
				Strin
				oprot.writeString(elem342);
			}
		

		@Override

		pu
	 * lic void read(org.apache.thrift.protocol.TProtocol prot, sayAgain_args str
	 * ct) throws org.apache.thrift.T
	 xc
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incomin g = iprot.rea	

				struct.setMessageResultIsSet(true);

		}
			
				
			
		

		bli
		 ivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org
		 
		rivate static final org.apache.thrift.protocol.TFie
			 
			vate static final 
				ic {
			hemes.pu
				emes.put(Tup
			
		

		** 
		 blic enum _Fields implements org.apache.thrift.TFieldIdEnum { CESS(
		 * short)0, "suc
		 
		
			rivate static final Map<String, _Fields> 
			
				
			tatic {
			

			}
		 
		 
		/**
			* Find the _Fields const
		 

			switch(fieldId) {
				case 0: // SUCCESS

				default:
					return null;
			}
		}

		/**
			* Find the _Field
		 

		public static _Fields findByTh
			_Fields fields = f
			
		

	
		/**
		

		public static _Fields 	return byName.ge
		}
		
		

	
	 _Fields(short thriftId, String fieldNam
	 	_
			_fieldName = fieldName;
		}
			
		p
		

	
		public String getFieldName() {
		

	}
	
		/ isset id assignmen

	}

	public sayAgain_result(
		String success) {
		

	}
		
		**
	 

	public sayAgain_result(sayAg
		if (other.isSetSucce
		

	}
	 * 
	 * 
	 
	
		ublic sayAgain_result deepCo
		

	
		Override
			blic void clear() {
		t
	

	
		ublic String get
		return this.s
			
				
			blic say
				is.success = succes s;
			e
			

		u
		

	
		** Returns true 
		ublic boolean
			eturn this.success !

		
		ublic void setSuccessIsSet(boolean
		

		}
	 * 
	 * 
	 
	}
		
			blic void setFieldValue(_Fields field
		s

			if (value == nu
				unsetSucces
			} else {
			
			}
		

		}
	}
		
			blic Object g
		switch (field) {
			ase SUCCESS: 
			return getSu
	

		throw new IllegalStateException();
		
			

		ublic boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
			
				
			witch (field) {
				se SUCCESS:
			

		throw new Il
	}

	@Override
	public boolean equals(O
		if (that == null)

		if (that instanceof sayAgain_result)
			return this.equals((sayAg
		return false;
			

		ublic boolean equals(sa
		

	
		boolean this_present_success = true && this.
		boolean that_present_success = true && that
			f (this_present_success || that_present_success) {
			

			if (!this.success.equa

		}
		
			eturn true;
		
		
			verride
			blic int hashCode() {
				st<Object> list = new 
			
		b
		list.add(
		

	
		return list.hashCode();
	}

	@Override
		ublic int compareTo(sayAgain_result other) {
		

		}
		
		

		lastComp
		if (lastComparison != 0) 
			return lastComparison;
		}

			lastComparison = org.
			if (lastComparison != 0) {
				return lastCompar
			}
			
		r
		
		
		ublic _Fields fieldFo
		

	
		ublic void read(org.apache.t
		schemes.get(iprot.getScheme()).g
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrif
		schem
			
					
		
			verride
		u
		

	
		sb.ap
			f (this.success == null) {
			// 
			sb.append("null");
					
		} else {
			sb.append(this.success);
		}
		

		return sb.toString();
		
			
		u
		

	}

		rivate void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
				
			ry {
			write(new org.apache.thr
			 catch (org.ap
				hrow new java.io.IOException(te);
				
					
				
				vate void readObject(java
				 {
					it doesn't seem like you should have to do this, but java serializ
						(new org.apache.thrift.protocol.TCom
						ch (org.apache.thrift.TExcept
					ow new j
						
					
					
				ate stat
					ic sayAgain_resultStandardScheme getScheme() {
				e
				
			
			

			
			// 
			ublic void read(or
			

			while (true) {
				
				schemeField = ipr

					break;
				}
				switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == o
							struct.success = ip
				
						} else {
							org.apache.thrift.p
			

		

				}
				iprot.readFieldEnd();
			}
			
	

			struct.validate();

		
		public void write(org.apache.thrift.protocol.TProtocol oprot, sayAgain_result struct
				 throws org.apache.thrift.TException 
			struct.validate();
			
			oprot.writeStructBegin(STRUC
				f (struct.success
				
				String elem343 = struct.success
				oprot.writeString(elem343);
				oprot.writeFieldEnd();
				
			o
			

		
		
				
			
			ivate static class sayAgain_resultTupl
			ublic sayAgain_resultT
				eturn new sayAgain_resultTupleScheme
				
			
		

	

		public void write(org.apache.thrift.protocol.TProtocol prot, sayAgain_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					String elem344 = struct.success;
					oprot.writeString(elem344);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sayAgain_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

}