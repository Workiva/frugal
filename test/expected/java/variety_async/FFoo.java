/**
 * Autogenerated by Frugal Compiler (3.4.6)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package variety.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.workiva.frugal.FContext;
import com.workiva.frugal.exception.TApplicationExceptionType;
import com.workiva.frugal.exception.TTransportExceptionType;
import com.workiva.frugal.middleware.InvocationHandler;
import com.workiva.frugal.middleware.ServiceMiddleware;
import com.workiva.frugal.processor.FBaseProcessor;
import com.workiva.frugal.processor.FProcessor;
import com.workiva.frugal.processor.FProcessorFunction;
import com.workiva.frugal.protocol.*;
import com.workiva.frugal.provider.FServiceProvider;
import com.workiva.frugal.transport.FTransport;
import com.workiva.frugal.transport.TMemoryOutputBuffer;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TMessage;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;
import java.util.Arrays;
import java.util.concurrent.*;

public class FFoo {

	private static final Logger logger = LoggerFactory.getLogger(FFoo.class);

	/**
	 * This is a thrift service. Frugal will generate bindings that include a frugal
	 * Context for each service call.
	 */
	public interface Iface extends actual_base.java.FBaseFoo.Iface {

		/**
		 * Ping the server.
		 * 
		 * @deprecated don't use this; use "something else"
		 */
		@Deprecated
		public void Ping(FContext ctx) throws TException;

		/**
		 * Blah the server.
		 */
		public long blah(FContext ctx, int num, String Str, Event event)
				throws TException, AwesomeException, actual_base.java.api_exception;

		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, long id, java.util.Map<Integer, String> req) throws TException;

		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str)
				throws TException, actual_base.java.api_exception;

		public long param_modifiers(FContext ctx, int opt_num, int default_num, int req_num) throws TException;

		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type,
				java.util.Set<Long> set_type) throws TException;

		public Thing getThing(FContext ctx) throws TException;

		public int getMyInt(FContext ctx) throws TException;

		public A use_subdir_struct(FContext ctx, A a) throws TException;

		public String sayHelloWith(FContext ctx, String newMessage) throws TException;

		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException;

		public String sayAgain(FContext ctx, String messageResult) throws TException;

	}

	public static class Client extends actual_base.java.FBaseFoo.Client implements Iface {

		private Iface proxy;

		public Client(FServiceProvider provider, ServiceMiddleware... middleware) {
			super(provider, middleware);
			Iface client = new InternalClient(provider);
			List<ServiceMiddleware> combined = new ArrayList<ServiceMiddleware>(Arrays.asList(middleware));
			combined.addAll(provider.getMiddleware());
			middleware = combined.toArray(new ServiceMiddleware[0]);
			proxy = InvocationHandler.composeMiddleware(client, Iface.class, middleware);
		}

		/**
		 * Ping the server.
		 */
		@Deprecated
		public void Ping(FContext ctx) throws TException {
			logger.warn("Call to deprecated function 'Foo.Ping'");
			proxy.Ping(ctx);
		}

		/**
		 * Ping the server.
		 */
		public Future<Void> PingAsync(final FContext ctx) {
				
			return asyncExecutor.submit(new Callable<Void>() {
				public Void call() throws Exception {
					Ping(ctx);
					return null;
				}
			});
		}

		/**
		 * Blah the server.
		 */
				
		public long blah(FContext ctx, int num, String Str, Event event) throws TException, AwesomeException, actual_base.java.api_exception {
			return proxy.blah(ctx, num, Str, event);
		}

		/**
		 * Blah the server.
		 */
		public Future<Long> blahAsync(final FContext ctx, final int num, final String Str, final Event 
				vent) {
			return asyncExecutor.submit(new Callable<Long>() {
				public Long call() throws Exception {
					return blah(ctx, num, Str, event);
				}
			});
		}

		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, long id, java.util.Map<Integer, String> req) throws TException {
			proxy.oneWay(ctx, id, req);
		}

		/**
		 * oneway methods don't receive a response from the server.
		 */
		public Future<Void> oneWayAsync(final FContext ctx, final long id, final java.util.Map<Integer, String> req) {
			return asyncExecutor.submit(new Callable<Void>() {
				public Void call() throws Exception {
					oneWay(ctx, id, req);
					return null;
				}
			});
		}

		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str) throws TException, actual_base.java.api_exception {
			return proxy.bin_method(ctx, bin, Str);
		}

		public Future<java.nio.ByteBuffer> bin_methodAsync(final FContext ctx, final java.nio.ByteBuffer bin, final String Str) {
			return asyncExecutor.submit(new Callable<java.nio.ByteBuffer>() {
				public java.nio.ByteBuffer call() throw

					return bin_method(ctx, bin, Str);
				}
			});
		}

		public long param_modifiers(FContext ctx, int opt_num, int default_num, int req_num) throws TException {
			return proxy.param_modifiers(ctx, opt_num, default_num, req_num);
		}

		public Future<Long> param_modifiersAsync(final FContext ctx, final int opt_num, final int default_num, final int req_num) {
			return asyncExecutor.submit(new Callable<Long>() {
				public Long call() throws Exception {
					return param_modifiers(ctx, opt_num, default_num, req_num);
				}
			});
		}

		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type, java.util.Set<Long> set_type) throws TException {
			return proxy.underlying_types_test(ctx, list_type, set_type);
		}

		public Future<java.util.List<Long>> underlying_types_testAsync(final FContext ctx, final java.util.List<Long> list_type, final java.util.Set<Long> set_type) {
			return asyncExecutor.submit(new Callable<java.util.List<Long>>() {
				public java.util.List<Long> call() throws Exception {
					return underlying_types_test(ctx, list_type, set_type);
				}
			});
		}

		public Thing getThing(FContext ctx) throws TException {
			return proxy.getThing(ctx);
		}
ubic Future<Thig>getThingAsync(final

		F
			eturn asyncExecutor.submit(new Callable<Thing>() {
					
			
				return getThing(ctx);	}});
	}

	
		public int getMyInt(FContext ctx) throws TException {
			return proxy.getMyInt(ctx);
		}

		public Future<Integer> getMyIntAsync(final FContext ctx) {
			return asyncExecutor.submit(new Callable<Integer>() {
				public Integer call() throws Exception {
					return getMyInt(ctx);
				}
			});
		}

		public A use_subdir_struct(FContext ctx, A a) throws TException {
			return proxy.use_subdir_struct(ctx, a);
		}

		public Future<A> use_subdir_structAsync(final FContext ctx, final A a) {
			return asyncExecutor.submit(new Callable<A>() {
				public A call() throws Exception {
					return use_subdir_struct(ctx, a);
				}
			});
		}

		public String sayHelloWith(FContext ctx, String newMessage) throws TException {
			return proxy.sayHelloWith(ctx, newMessage);
		}
ubic Future<Strng sayHelloWithAsync(

	i
		eturn asyncExecutor.submit(new Callable<String>() {
				
		
			return sayHelloWith(ctx, newMessag	}});
	
		
	ureurn prox.watDoY
	u
		
	ubic Futur<Sring>
	w
		eturn asyncExe
				return whatDoYouSay(ctx, messageArgs);
		

		});
		}

		public String sayAgain(FContext ctx, String messageResult) throws TException {
			return proxy.sayAgain(ctx, messageResult);
		}

		public Future<String> sayAgainAsync(final FContext ctx, final String messageResult) {
			return asyncExecutor.submit(new Callable<String>() {
				public String call() throws Exception {
					return sayAgain(ctx, messageResult);
				}
			});
		}


	

	private static class InternalClient extends actual_base.java.FBaseFoo.Client implements Iface {

		private FTransport transport;
		private FProtocolFactory protocolFactory;
		public InternalClient(FServiceProvider provider) {
			super(provider);
			this.transport = provider.getTransport();
			this.protocolFactory = provider.getProtocolFactory();
		}

		/**
		 * Ping the server.
		 */
		public void Ping(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("ping", TMessageType.CALL, 0));
			Ping_args args = new Ping_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			Fipot.readResponeHader(ctx);

	
		Message message = iprot.readMessageBegin();
				
	i
		throw new TApplicationException(TApplicationExc}if (message.type == TMe	TApplicationException e = TAppationException.read
			Txceptionreurnedxif (e.getType(		}	

		}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "Ping failed: invalid message type");
			}
			Ping_result res = new Ping_result();
			res.read(iprot);
			iprot.readMessageEnd();
		}
		/**
		 * Blah the server.
		 */
		public long blah(FContext ctx, int num, String Str, Event event) throws TException, AwesomeException, actual_base.java.api_exception {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("blah", TMessageType.CALL, 0));
			blah_args args = new blah_args();
			args.setNum(num);
			args.setStr(Str);
			args.setEvent(event);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("blah")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "blah failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
			

			}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "blah failed: invalid message type");
			}
			blah_result res = new blah_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			if (res.awe != null) {
				throw res.awe;
			}
			if (res.api != null) {
				throw res.api;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "blah failed: unknown result");
		}
		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, long id, java.util.Map<Integer, String> req) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("oneWay", TMessageType.ONEWAY, 0));
			oneWay_args args = new oneWay_args();
			args.setId(id);
			args.setReq(req);
			args.write(oprot);
			oprot.writeMessageEnd();
			this.transport.oneway(ctx, memoryBuffer.getWriteBytes());
		}
		p

		TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("bin_method", TMessageType.CALL, 0));
			bin_method_args args = new bin_method_args();
			args.setBin(bin);
			args.setStr(Str);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			i	trow new TApplcaionException(TApplicationExceptionType.WRONG_METHOD_NAME, "bin_method failed: wrong method nam
	f (message.type == TMessageType.ETAplicationExcpton e = TApplicationException.readFrom(iprot);
	
		prot.readMessageEnd();
	Tif (e.getType() == TAppl
			}
				

	}if (message.type	throw new TApplication}
	bres.read(iprot);	

		if (res.isSetSuccess()) {
				return res.success;
			}
			if (res.api != null) {
				throw res.api;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "bin_method failed: unknown result");
		}
		public long param_modifiers(FContext ctx, int opt_num, int default_num, int req_num) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("param_modifiers", TMessageType.CALL, 0));
			param_modifiers_args args = new param_modifiers_args();
			args.setOpt_num(opt_num);
			args.setDefault_num(default_num);
			args.setReq_num(req_num);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			Tif(!message.nam.euals("param_modifiesthrow new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "parammodifiers failed: wrong method name");}

	if (message.type == TMessageType.EXCEPTION) 	TApplicationExc	iprot.readMessageEnd()	Txception returnedExcp			if (e.getType() == TApplicat		returnedException = new TTransportException(TTransportExceptionType.RESONSE_TOO_LARGE, e.getMessage());
		

			throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "param_modifiers failed: invalid message type");
			}
			param_modifiers_result res = new param_modifiers_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "param_modifiers failed: unknown result");
		}
		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type, java.util.Set<Long> set_type) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("underlying_types_test", TMessageType.CALL, 0));
			underlying_types_test_args args = new underlying_types_test_args();
			args.setList_type(list_type);
			args.setSet_type(set_type);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("underlying_types_test")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "underlying_types_test failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
			

			if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "underlying_types_test failed: invalid message type");
			}
			underlying_types_test_result res = new underlying_types_test_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "underlying_types_test failed: unknown result");
		}
		public Thing getThing(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("getThing", TMessageType.CALL, 0));
			getThing_args args = new getThing_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("getThing")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "getThing failed: wrong method name");
			}if (message.type == TMessageType.EXCEPTION) {

		

			iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "getThing failed: invalid message type");
			}
			getThing_result res = new getThing_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getThing failed: unknown result");
		}
		public int getMyInt(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("getMyInt", TMessageType.CALL, 0));
			getMyInt_args args = new getMyInt_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("getMyInt")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "getMyInt failed: wrong method name");
			}
			

			TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "getMyInt failed: invalid message type");
			}
			getMyInt_result res = new getMyInt_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getMyInt failed: unknown result");
		}
		public A use_subdir_struct(FContext ctx, A a) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("use_subdir_struct", TMessageType.CALL, 0));
			uars.setA(a);a

	oprot.writeMessageEnd();TTransport respoFPotocol iprot = this.rprot.readResponseHe
Tif (!message.name.equals("use_subdir_struct")) {		

			TApplicationException e = TApplicationException.readFrom(iprot);

			TException returnedE

				returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			

			throw new TApplicationException(TApplicationExceptionType.INVALID_M
		}
		use_subdir_struct_result res = new 
		res.read(iprot);
		iprot.readMessageEnd();
		if (res.isSetSuccess()) {
			return res.success;
		}
		throw new TApplicationException(TApplicatio
		
		ublic String sayHelloWith(FContext ctx, String newMessage) th
		TMemoryOutputBuffer memoryBuffer = new TMemoryOutpu
		FProtocol oprot = this.protocolFactory.getProtocol(
		oprot.writeRequestHeader(ctx);
		oprot.writeMessage
		

		args.write(oprot);

	
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			

			throw n
		}
		if (message.type == TMessageType
			TApplicationException e = TApplicationException.readFrom(iprot);   
		

			if (e.getType() == TApplicationExceptionType.RES

			}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "sayHelloWith failed: invalid message type");
			}
			sayHelloWith_result res = new sayHelloWith_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sayHelloWith failed: unknown result");
		}
		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("whatDoYouSay", TMessageType.CALL, 0));
			whatDoYouSay_args args = new whatDoYouSay_args();
			args.setMessageArgs(messageArgs);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("whatDoYouSay")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "whatDoYouSay failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.readFrom(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "whatDoYouSay failed: invalid message type");
			}
			w
		

		if (res.isSetSuccess()) {

		}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "whatDoYouSay failed: unknown result");
		}
		public String sayAgain(FContext ctx, String messageResult) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("sayAgain", TMessageType.CALL, 0));
			sayAgain_args args = new sayAgain_args();
			ar

		prot.writeMessageEnd();

		Transport response = this.transport.req
		
			rotocol iprot = this.protocolFactory.getProtocol(response);
			rot.readResponseHeader(ctx);
		Mssagem
		essage = iprot.readMe
		s
			 (!message.name.e
		trow nw
		 TApplicationException(TApplication
		x
			
		f(messg
		e.type == TMessageType.E
		C
			ApplicationException e = TAppli
			prot.readMessageEnd();
			Exception retur
			f (e.getType() == TAppli
			returnedException = new TTran
			
		trow rt
		urnedExceptio
		;
			
				(message.type != TMessageType.REPLY) {
						
						
			h
			
		aes.read(ipro);
		
			rot.r
				(res.isSetSuccess()) {
				turn res.success;
				
				ow new TApplicationExcep
				
			
				
					 static class Processor extends actual_base.java.FBaseFoo.Processor
							implements FProcessor {
							
				
				ate Ifac
			
		b
	s
	



	java.util.Map<String, FProcessorFunction> processMap = super.getProcessMap();
		rocessMap.put("ping", new Ping());
		roces
			ocessMap.put("one
		rocessMap.put("bin_metho
			ocessMap.put("param_mod
			ocessMap
		r

		rocessMap.put("use_subd
		rocessMap.put("sayHelloWith", new SayHe
	p
	

}

	rotected java.util.Map<String, java.util.Map<String, String>> getAnnotationsMap() {
		ava.util.Map<String, java.util.Map<String, St
		ava.u
			ngMap.put("deprec
		nnotationsMap.put("ping"
			turn annotationsMap;
			
				
						
			e
			lic void
		u

		
		
		ivate
			
			blic void process(FContext ct
		logger.warn("Deprecated function 'Foo.Ping' wa
			ing_args args = n
		try {
			args.read(iprot);
			 catch (TException e) {
			iprot.readMessa
			synchronized (WRITE_LOCK
				e = writeApplicationExceptio
			}
			throw e;
			
				
						
						
			p
			ing_resu
		t
			handler.Ping(ctx);
			 catc
				prot.writeResponseHeader(ctx);
				prot.writeMessageBegin(new TMessage("ping", TMessageType.EXCEPTION, 0));
				.write(oprot);
				prot.writeMessageEnd();
				prot.getTransport().flush();
			return;
				catch (TException e) {
					nchronized (WRITE_LOCK) {
							
							
				e
				
			t
		}
		
	

				oprot.writeMessageBegin(new TMessage("ping", TMessageType

				oprot.writeMessageEnd();
				oprot.getTransport().flush();
			} ca
				if (e.getType() 
					throw (TApplicationEx
				}
				throw e;
				
						
			
			
		

		ivate class Blah implem
		
		ublic
			lah_args args = new blah_args();
			ry {
			args.read(iprot);
			 catch (TException e) {
			iprot.readMessageEnd();
			synchronized (W
				e = writeApplicationExc
			}
			throw e
		}
			
				rot.readMessageEnd();
						
						
			l
			ry {
			
			result.setSuccessIsSet(tru
			 catc
				esult.awe = awe;
				catch (actual_base.java.api_exception api) {
				esult.api = api;
				catch (TApplicationExcep
				prot.writeResponseHeader(ctx)
			oprot.writeMessageBegin(new TMess
				.write(oprot);
					rot.writeMessageEnd();
							
							
				p
				eturn;
			 
			
		
	

		}

			try {
				oprot.writeResponseHeader(ctx);
				opr
				result.write(opr
				oprot.writeMessageEnd(
				oprot.getTransport().f
			} catch (TTransportExceptio
				if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
						
				
				}
			

		}
		
		
			
			vate class OneWay implements 
		
			blic void process(FContext ctx,
			neWay_args args = new oneWay_args();
			ry {
			args.read(iprot);
			 catch (TException e) {
			iprot.r
			throw e;
			
				
						
						
			p
			andler.o
		
		
			
				ate class Bin_method implements
				
				lic void process(FCo
				n_method_args args = new
				y {
			args.read(iprot);
				catch (TException e) {
					rot.readMessageEnd();
							
							
				y
				e = writ
			}
			
		


		bin_method_result result = new bin_method_result();

			result.success = handler.bin_method(ctx, args.bin, args.Str);
			result.setSuccessIsSet(true);
		} cat
			result.api = api;
		} catch (TApplicationExc
			oprot.writeResponseHead
			oprot.writeMessageBegin(new
				.write(oprot);
						
			o
			oprot.ge
			

			synchronized (WRITE_LO
				e = (TApplicationException) writeApplicationE
			}
			throw e;
			
		synchronized (WRITE_LOCK) {
			try {
				oprot.writeResponseHeader(ctx);
				oprot.writeMes
				result.write(oprot);
				oprot.writeMessageEnd();
				oprot.
			} catch (TTransportExce
				if (e.getType() == TTransp
					throw (TApplicationException) writeApplicationException(ctx, opr
						t, TApplicationExceptionType.RESPONSE_TOO_LARGE, "bin
						method", "response too large: " + e.getMessage()).initCause(e);
				
				throw e
			
		}
			
				
				
				ate class Param_modi
				
				lic void process(FContext ctx
			aram_modifiers_args args = new pa
				y {
					gs.read(iprot);
							
							
				c
				prot.rea
			s
			
		
	



		param_modifiers_result result = new param_modifiers_result();
		try {
			resu
			result.setSuccess
		} catch (TApplicationExc
			oprot.writeResponseHead
			oprot.writeMessageBegin(new
				.write(oprot);
						
			o
			oprot.ge
			

			synchronized (WRITE_LO
				e = (TApplicationException) writeApplicationE
			}
			throw e;
			
		synchronized (WRITE_LOCK) {
			try {
				oprot.writeResponseHeader(ctx);
				oprot.writeMes
				result.write(oprot);
				oprot.writeMessageEnd();
				oprot.
			} catch (TTransportExce
				if (e.getType() == TTransp
					throw (TApplicationException) writeApplicationException(ctx, opr
						t, TApplicationExceptionType.RESPONSE_TOO_LARGE, "par
						m_modifiers", "response too large: " + e.getMessage()).initCause(e);
				
				throw e
			
		}
			
				
				
				ate class Underlying
				
				lic void process(FContext ctx
			nderlying_types_test_args args = 
				y {
					gs.read(iprot);
							
							
				c
				prot.rea
			s
			
		
	



		underlying_types_test_result result = new underlying_types_test_result();
		try {
			resu
			result.setSuccess
		} catch (TApplicationExc
			oprot.writeResponseHead
			oprot.writeMessageBegin(new
				.write(oprot);
						
			o
			oprot.ge
			

			synchronized (WRITE_LO
				e = (TApplicationException) writeApplicationException(ctx, opro
			}
			throw e;
			
		synchronized (WRITE_LOCK) {
			try {
				oprot.writeResponseHeader(ctx);
				oprot.writeMes
				result.write(oprot);
				oprot.writeMessageEnd();
				oprot.
			} catch (TTransportExce
				if (e.getType() == TTransp
					throw (TApplicationException) writeApplicationException(ctx, opr
						t, TApplicationExceptionType.RESPONSE_TOO_LARGE, "underlying_t
						pes_test", "response too large: " + e.getMessage()).initCause(e);
				
				throw e
			
		}
			
				
				
				ate class GetThing i
				
				lic void process(FContext ctx
			etThing_args args = new getThing_
				y {
					gs.read(iprot);
							
							
				c
				prot.rea
			s
			
		
	



		getThing_result result = new getThing_result();
		try {
			resu
			result.setSuccess
		} catch (TApplicationExc
			oprot.writeResponseHead
			oprot.writeMessageBegin(new
				.write(oprot);
						
			o
			oprot.ge
			

			synchronized (WRITE_LO
				e = (TApplicationException) writeApplicationException
			}
			throw e;
			
		synchronized (WRITE_LOCK) {
			try {
				oprot.writeResponseHeader(ctx);
				oprot.writeMes
				result.write(oprot);
				oprot.writeMessageEnd();
				oprot.
			} catch (TTransportExce
				if (e.getType() == TTransp
					throw (TApplicationException) writeApplicationException(ctx, opr
						t, TApplicationExceptionType.RESPONSE_TOO_LARGE, "getThin
						", "response too large: " + e.getMessage()).initCause(e);
				
				throw e
			
		}
			
				
				
				ate class GetMyInt i
				
				lic void process(FContext ctx
			etMyInt_args args = new getMyInt_
				y {
					gs.read(iprot);
							
							
				c
				prot.rea
			s
			
		
	



		getMyInt_result result = new getMyInt_result();
		try {
			resu
			result.setSuccess
		} catch (TApplicationExc
			oprot.writeResponseHead
			oprot.writeMessageBegin(new
				.write(oprot);
						
			o
			oprot.ge
			

			synchronized (WRITE_LO
				e = (TApplicationException) writeApplicationException
			}
			throw e;
			
		synchronized (WRITE_LOCK) {
			try {
				oprot.writeResponseHeader(ctx);
				oprot.writeMes
				result.write(oprot);
				oprot.writeMessageEnd();
				oprot.
			} catch (TTransportExce
				if (e.getType() == TTransp
					throw (TApplicationException) writeApplicationException(ctx, opr
						t, TApplicationExceptionType.RESPONSE_TOO_LARGE, "getMyIn
						", "response too large: " + e.getMessage()).initCause(e);
				
				throw e
			
		}
			
				
				
				ate class Use_subdir
				
				lic void process(FContext ctx
			se_subdir_struct_args args = new 
				y {
					gs.read(iprot);
							
							
				c
				prot.rea
			s
			
		
	



		use_subdir_struct_result result = new use_subdir_struct_result();
		try {
			resu
			result.setSuccess
		} catch (TApplicationExc
			oprot.writeResponseHead
			oprot.writeMessageBegin(new
				.write(oprot);
						
			o
			oprot.ge
			

			synchronized (WRITE_LO
				e = (TApplicationException) writeApplicationE
			}
			throw e;
			
		synchronized (WRITE_LOCK) {
			try {
				oprot.writeResponseHeader(ctx);
				oprot.writeMes
				result.write(oprot);
				oprot.writeMessageEnd();
				oprot.
			} catch (TTransportExce
				if (e.getType() == TTransp
					throw (TApplicationException) writeApplicationException(ctx, opr
						t, TApplicationExceptionType.RESPONSE_TOO_LARGE, "use
						subdir_struct", "response too large: " + e.getMessage()).initCause(e);
				
				throw e
			
		}
			
				
				
				ate class SayHelloWi
				
				lic void process(FContext ctx
			ayHelloWith_args args = new sayHe
				y {
					gs.read(iprot);
							
							
				c
				prot.rea
			s
			
		
	



			sayHelloWith_result result = new sayHelloWith_result();
		
			try {
			

			} catch (TApplicationException e) {
				oprot
				oprot.writeMessageBegin(new TMessage("sayHelloWith", TMessageType.EXCE
				e.write(oprot);
		

				
	 * eturn;
	 * 
	 
			} catch (TException e) {
			

				}

			}
			synchronized (WRITE_LOCK) {
				try {
				
			

					
		 		oprot.getTransport().flush();
		 	}
					if (e.getType() == TTransportExceptionType.REQUE
						thr ow (TApplic
				}
				throw e;
				
			

		
		  ate c
		 * ass WhatDoYou
		 
		public void process(FContext ctx, FProtocol iprot, FProtoc
			whatDoYouSay_args args = new whatDoYouSay
			try {
				
				args.read(ipr
			

				s
		 		e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PR
		 	}
				throw e;
			}
		

			whatDoYouSay_result result = 
			try {

				result.setSuccessIsSet(true);
			} catch (TApplication
				oprot.writeResponseHea
			

				oprot.writeMessageEnd();
				oprot.getTranspo
			

				synchronized (WRITE_LOCK) {
					e = (TApplicatio
			
		

			synchronized (WRITE_L
				try {
		

				
	 			oprot.writeMessageEnd();
	 		
				} catch (TTransportException e) 
		

					}
					throw e;
		

		}
	}
	

	
		public void proc
			
		

			} catch (TException e) {
				iprot.readMess
			
					e = writeApplicationException(c
		

			}
	 * 
	 * 
	 
	
			iprot.readMessageEn
			sayAgain_result result = new sayAgain
			

				result.setSucc
			
				oprot.writeResponseHeader(ctx);
		

				oprot.
				oprot.getTransport().flush();
				return;
			} catch (TExc
				synchronized (WRITE_LOCK) {
					e = (TApplicationException)  writeA
				}
		

			synchronized (WRITE_LOCK) {
				try {
					oprot.write

					result.wr
		

				} catc
					if (e.getType() == 
						throw (TApplicationException) writeAppli

					throw e;
		

		}
	}
		
			
		

		rivate static final org

		
	p

		schemes.put(StandardScheme.class, new P
		schemes.put(TupleScheme.class, new Ping
	}

	/** The set of fields this struct contains, along with convenience methods for finding and manipul
		ublic enum _Fields implements org.apache.thrift.TFieldIdEnum 
		

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
		
		

				byName
			}
		}
		

		 * Find the _Fi
		 */
		

				default:
					return null;
			}
		

		/**
		 * Fi
			* if it is not found.
					
		 */
			ublic static _Fields findByThriftI
			
		

		}
		
			**
			// 
			* Find the _Fields constant that matches name, or nul
					l if its not found.
		 */
			ublic static _Fields findByName(St
			
		

		private final short _thriftId;
		private final String _fieldName;
			
		_
		

		}

		public short getThriftFieldId() {
				
			return _thriftId;
			
			
				blic String getFieldName() {
				eturn _fieldName;
					
				
				
				sset id 
					c Ping_args() {
				
				
			*
			 Performs a deep copy 

			blic Ping_args(Ping_args other) {
			// 
			
		

		return new Ping_args(this);
				
			

			verride
			blic void clear() {
			
		

		

	}
		
			blic Object getFieldValue(_Fields 
		s
		

	}

		** Return
		ublic boolean isSet(_Fields field) {
				
			f (field == null) {
			

		
		switch (field) {
				
			
		t

	

	

			return false;
		
		if (that instanceof Ping_args)
			

	}
	
		ublic boolean equals(Ping_args that) {
		if (that == null)
		

		re
	 * urn true;
	 * 
	 
	}
		

		ublic int hashCode() {

		
			eturn list.hashCode();
				
			
		O

		if 
		 return getClass().getName().compareTo(other.getClass().getName());
		 
		
			nt las tComparison
			
				urn 0;
			
		

		ret
		  
		 * 
		 bl
		schemes.get(iprot.getScheme()).getScheme().read(iprot, thi
			
			
				
			blic void writ
		s

		
		 verride
		 bl
		StringBuilder sb = new StringBuilder("Ping_args
			oolean first = true;
		

		return sb.toString();
		

		ublic void validate() throws org.apache.thr
			/ check for required 
			/ check for sub-struct 
		

		rivate void writeObject(java.io.O
			ry {
			

			throw new java.io.IOException
			
		
	

		try {
			// it doesn't seem l
		

			t
	 }
	 
	
	p

			return new Ping_argsStandardS
		}
	}

	private s
	
		

			iprot.readStructBegin();
			while (true) {
			
		

				}
				switch (scheme
			
						org.apache.thrift.protocol.TPr
		

			}
	 * 
	 * 
	 
			iprot.readStructEnd();
		
			// check for required fields of primi
			

		
		p
			struct.validate();
	

			oprot.w
			oprot.writeStructEnd();
		}
			
		
			 
		rivate static
		

		}
		
			

		
		

			TTupleP
		}
		

		public void read(org.ap
		

	
	}
		
			
		

		rivate static final org

		
	p

		schemes.put(StandardScheme.class, new P
		schemes.put(TupleScheme.class, new Ping
	}

	/** The set of fields this struct contains, along with convenience methods for finding and manipul
		ublic enum _Fields implements org.apache.thrift.TFieldIdEnum 
		

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
		
		

				byName
			}
		}
		

		 * Find the _Fi
		 */
		

				default:
					return null;
			}
		

		/**
		 * Fi
			* if it is not found.
					
		 */
			ublic static _Fields findByThriftI
			
		

		}
		
			**
			// 
			* Find the _Fields constant that matches name, or nul
					l if its not found.
		 */
			ublic static _Fields findByName(St
			
		

		private final short _thriftId;
		private final String _fieldName;
			
		_
		

		}

		public short getThriftFieldId() {
				
			return _thriftId;
			
			
				blic String getFieldName() {
				eturn _fieldName;
					
				
				
				sset id 
					c Ping_result() {
				
				
			*
			 Performs a deep copy 

			blic Ping_result(Ping_result other) {
			// 
			
		

		return new Ping_result(this);
				
			

			verride
			blic void clear() {
			
		

		

	}
		
			blic Object getFieldValue(_Fields fi
		s
		

	}

		** Return
		ublic boolean isSet(_Fields field) {
				
			f (field == null) {
			

		
		switch (field) {
				
			
		t

	

	

			return false;
		
		if (that instanceof Ping_result)
			

		return false;
			 
	}
			 
	
			 

		if (that == null)
			return
		
		return true;
	}

	@Override
	public int hashCod
		List<Object> list 

	
	 * 
	 * 
	 
		return list.hashCode();
		    Override u

			return getClass().getName().compareTo(other.getClass().getName());

		
			nt lastComparison = 0;
				
			e
		

		ubl
		 eturn _Fields.findByThriftId(fieldId);
		 
		
			blic v oid read(or
			hemes.get(ipro
				
			
				ic void wri
			hemes.get(oprot.
				
			
				rride
			b
		S

		
		 b.append(")"); urn s
		 * .toString();
		 
		
			blic void validate() throws org.apache.th
			/ check for require
				 fields
			/ check for su
		

		riv
		 ry {
		 wr
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOExce
		}

		
		rivate void readObject(java.io.O

			// it doesn't seem like you should have to
			read(new org.apache.t
			 catch (org.apache.thri
			

		
			
		r

			return new Ping_resultStandar
			
		
	

	
		public void read(org.apache.thrift.protocol
			org.apache.thrift.protocol.TFiel

			iprot.readStructBe
		

				if (schemeFiel			break 		} 		switch (sche
					defa
						org.apache.
				}
				iprot.readFie
			}
		

			/
	 	struct.validate();
	 }
	
		public void write(org.apache.thrift.protoc
			struct.validate();
		
			oprot.writeStructBegi
			
			oprot.writeStructEnd();
			
		
	}

	private static class Ping_res
		public Ping_resultTupleSche
		

	}
	
		rivate static class
		

		public void writ

		}

		

			TTupleProtocol ipro
		}
	

	
		
		
		blic static 
	p

	private static final org
		rivate static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new o
	p

	pri
	 * ate static final Map<Class<? extends IScheme>, SchemeFactory> schemes 
	 *  new Hash
	 ap
	static {
		schemes.put(StandardScheme.class, new blah_argsStandardSchemeFa
		

	
		ublic int num;
	p

	/** The set of fields th
		ublic enum _Fiel
		

		EVENT((short)3, "event")
		;
		
		

		static {
			for (_Fields fi
		

		}
	 * 
	 * 
	 
	
		/**
		

		public static _Fields findByThriftId(in
			switch(field
				case 1: // NUM
			
		

				case 3: // EVENT
					return EVENT;
		

			}
		}
		
		

		 * if it is not found.
		 */
		

			i
	 *  (fields == null) throw new IllegalArgumentException("Field " + fieldId 
	 *  " doesn'
	  e
			return fields;
		}
	

		 * Find the _Fields constant that matches
		 */
			ublic static _Fiel
			
		

		private final short _thriftId;
		private final St
		
			Fields(short thriftI
				thriftId = 
			_fieldNa
				 
			
			ublic 

		}
			
				blic String
			return _
				 
			
			

		rivate stat
			ivate byte __isset_b
				lic blah_args
			
				 
			b
			nt num

		E
		

		setNumIsSet(true);
		this.Str = Str;
		this.even
			

		**
			 Performs a deep

		ublic blah_
			_isset_bitfield = 

		i
			this.Str = other.Str;
		

			t
	 * is.event = new Event(other.event);
	 * 
	 
		}
		
			
		u

		
		
			verride
		ublic voi
			etNumIsSet(false);
		this.num = 
			
		t
		
		

	}
	
		ublic int getNum(
			eturn this.nu
		
			 
		ublic blah_ar
		

		return this;
		
			

		__isset_bitfield = EncodingUtils
		
		
			* Returns true if field num is set (has been
				lic boolean i
			eturn EncodingUtils.testB
				
		

		__isset_bitfield = EncodingUtils.setBit(__isset_bit
		
		
			blic String getStr() {
				turn this.Str
			
				
		u

		return this;
		
		
			blic void unsetStr() {
				is.Str = null
			
				
		*

		return this.
	}

	public vo
		if (!value) {
			this.Str = null;

		
		
		ublic Event getE
			eturn this.eve

		
		ublic blah_args setEve
		this.event = eve
			eturn this;

		
		ublic void unsetEvent() 
		this.event = null;
			

		** Returns true if fiel
	p

	}
	
		ublic void setEventIsSet(boolean value) {
			f (!value) {
			

		

		ublic void setFieldValue(_Fields field, Object value) {
		switch (field) {
			ase NUM:
			
				unsetNum();
			} else {
				setNum((Integer)value);
				
			b
		
		case STR:
			if (value == null) {
				unsetStr();
			
				setStr((String)
			}
			break;
				
			a
			
				unsetEvent();
			} else {
				setEvent((Event)value
			
			break;
			
			
				
			
		u
		switch (f
		

	
		case STR:
		

		case EVENT:
			return getEvent();
	

		throw new IllegalStateException();
		
	

	public bo
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case NUM:
			return isSetN
		case STR:
			
			return isSetStr()
		case EVENT:
			return isSetEvent(
		}
			hrow new IllegalStat
		
		
		Override
			
		ublic boolean equals
		if (that == null)
			return false;
		if (that
			return this.equals((bl
		r
		
		
		ublic boolean equals(
		

	
		boolean this_present_num = t
		boolean that_present_num = true;
		if (this_present_num
			if (!(this_presen
			
		

		}
		
			oolean this_present_Str = true && this.isSetStr();
					
		boolean that_present_Str = true && that.isS
			f (this_present_Str || that_presen
			
		

				return false;
		}
			
			// 
			oolean this_present_e
			oolean that_present_event = true && that.isSetEvent()
					;
		if (this_present_event || that_present_even
			if (!(this_present_event && that_p
			
		

		}
		
			eturn true;
		
	

	public int hashCode() {

		
				
			oolean present_num = true;
			ist.add(present_num);
			f (present_num
				ist.add(num);
				
					lean p
				s
				 (present_Str)
				st.add(Str);
					
						an present_event = true && (i
						add(present_event);
					present_
						.add(event);
					
					rn lis
				
					
						ide
						 int compareTo(blah_args 
					!getClas
						rn getClass().getName().compareTo(other.getClass().getName());
					
					
				 lastComparison 
					
						omparison = Boolean.valueOf
						astComparison != 0) {
						rn lastComparison;
					
						sSetNum()) {
					t
					(lastC
				eturn la
					
				
				stComparison = Boolea
			f
			return lastComparison;

			f (isSetStr()) {
			// 
			lastComparison = o
			

			}
				
			

			f (lastComparison != 0) {
			return lastComparison;
			
			f (isSetEvent()) {
			lastComparison = org.a
			if (lastComparison != 0) 
				return lastComparison;
				
				
				turn 0;
			
			
				lic _Fields fieldForId(int fieldId) {
				turn _Fields.findByThriftI
				
			
			blic void read(org.apac
			chemes.get(iprot.getSch
		

	p

	}
		
			verride
		u
		

	

		sb.append
		first = false;
				
			f (!first) sb.append(", ");
			b.append("Str:");
			f (this.Str == null) {
				b.append("null");
			 
			sb.append(this.Str);
				
			i
			f (!first) sb.append(", ")
				.append("event:")
			f
			sb.append("null");
			 else {
				b.append(this.event);
				
			i
			b.append(")");
				turn sb.toString();
				
			
			blic void validate() throw
				 check for required fields
			/
		i

		}
		
				
			
			ivate void writeObject(java.io.ObjectO
			ry {
				rite(new org.apache.thrift.pr
				catch (org.apache.thrift.
			t
			
				
				
			i
			ry {
				/ it doesn't seem like you 
				_isset_bitfield = 0;
				ead(new org.apache.thrift.p
			 
			

	}

	

			return new blah_argsStandardScheme();
		
		}
			

	
			 
	private static class blah_argsStandardScheme extends StandardScheme<blah_args> {
			 
	
			 

			org.apache.thrift.protocol.TField schemeField;
			iprot.
			while (true) {
				schemeField = iprot.readFieldBegin();
		

				}
				switch (schemeField.id) {
					case 1: // NUM

				
	 * 	if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
	 * 
	 
							struct.num = iprot.readI32();
							struct.set NumIsSet(true) 				} else  { 					org.ap ache.thri	

					case 2: // STR

							str
							struct.setStrIsSet(true);
						} else {
				
			

					
		 			if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
		 		
							struct.event.read(iprot);
							st ruct.setEve
					} else {
						org.apache.th
					}
					break;
				default:
					org.apache
			}
				prot.readFie
			}
			

			//
		 struct.validate(); 
		 * 
		 
		public void write(org.apache.thrift.protocol.TProtocol opr
			struct.validate();
			
				
			oprot.writeStr
			

			op
		 oprot.writeFieldEnd();
		 if
				oprot.writeFieldBegin(STR_FIELD_DESC);
				String elem258 = struct
			

			}
			if (struct.event != null) {

				struct.event.write(oprot);
				oprot.writeFieldEnd(
			}
			

		}
			
		

		rivate static class blah_argsT
			ublic blah_argsTup
			
		

	
	private static class blah_argsTupleScheme extend
	

		@Override
		

			BitSet optionals 	if (struct.i 		optionals.set(0); 	}
			if (st
				optionals.set(1);
			}
			if (struct.isS
				optionals.set
		

			i
	 		int elem259 = struct.num;
	 		
			}
			if (struct.isSetStr()) {
				String elem260 = struct.Str
				oprot.writeString(ele
			}
			
				struct.event.write(op
			}
		}
	

		public void read(org.apache.th
			TTupleProtocol iprot = (TTup
		

				struct
				struct.setNumIsSet
			}
			if (incoming.get(

				struct.setStrI

			if (incoming.ge

		

			}
		}
	

	
		
		
		blic static 
	p

	private static final org.apa
		rivate static final org.apache.thrift.protocol.TField AWE_FIELD_DESC = new org.a
	p

	pri
	 * ate static final Map<Class<? extends IScheme>, SchemeFactory> schemes = ne
	 *  HashMap<
	 la
	static {
		schemes.put(StandardScheme.class, new blah_resultStandardSchemeFact
		

	
		ublic long success;
	p

	/** The set of fields this struct 
		ublic enum _Fiel
		

		API((short)2, "api")
		;
		
		

		static {
			for (_Fields fi
		

		}
	 * 
	 * 
	 
	
		/**
		

		public static _Fields findByThriftId(in
			switch(field
				case 0: // SUCC
			
		

				case 2: // API
					return API;
		

			}
		}
		
		

		 * if it is not found.
		 */
		

			i
	 *  (fields == null) throw new IllegalArgumentException("Field " + fieldI
	 *  + " does
	 't
			return fields;
		}
	

		 * Find the _Fields constant that match
		 */
			ublic static _Fi
			
		

		private final short _thriftId;
		private final St
		
			Fields(short thriftI
				thriftId = thri
			_fieldNa
				 
			
			ublic 

		}
			
				blic String
			return _
				 
			
			

		rivate st
			ivate byte __isset_b
				lic blah_re
			
				 
			b
			ong su

		a
		

		setSuccessIsSet(true);
		this.awe = awe;
		this.api = ap
			

		**
			 Performs a deep

		ublic bla
			_isset_bitfield 

		i
			this.awe = new AwesomeException(o
		

			t
	 * is.api = new actual_base.java.api_exception(other.api);
	 * 
	 
		}
		
			
		u

		
		
			verride
		ublic voi
			etSuccessIsSet(fal
		this.succ
			
		t
		
		

	}
	
		ublic long getSuc
			eturn this.su
		
			 
		ublic blah_re
		

		return this;
		
			

		__isset_bitfield = EncodingUtils.cle
		
		
			* Returns true if field success is set (has been ass
				lic boolean i
			eturn EncodingUtils.testBit(__iss
				
		

		__isset_bitfield = EncodingUtils.setBit(__isset_bit
		
		
			blic AwesomeException getAwe() {
				turn this.awe
			
				
		u

		return this;
		
		
			blic void unsetAwe() {
				is.awe = null
			
				
		*

		return this.
	}

	public vo
		if (!value) {
			this.awe = null;

		
		
		ublic actual_base.ja
			eturn this.api;

		
		ublic blah_result setA
		this.api = api;
			eturn this;

		
		ublic void unsetApi() 
		this.api = null;
			

		** Returns true if fiel
	p

	}
	
		ublic void setApiIsSet(boolean value) {
			f (!value) {
			

		

		ublic void setFieldValue(_Fields field, Object value) {
		switch (field) {
			ase SUCCESS:
			
				unsetSuccess();
			} else {
				setSuccess((Long)value);
				
			b
		
		case AWE:
			if (value == null) {
				unsetAwe();
			
				setAwe((Awesome
			}
			break;
				
			a
			
				unsetApi();
			} else {
				setApi((actual_base.j
			
			break;
			
			
				
			
		u
		switch (f
		

	
		case AWE:
		

		case API:
			return getApi();
	

		throw new IllegalStateException();
		
	

	public bo
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case SUCCESS:
			return isSetS
		case AWE:
			
			return isSetAwe()
		case API:
			return isSetApi();
		}
			hrow new IllegalStat
		
		
		Override
			
		ublic boolean equa
		if (that == null)
			return false;
		if (that
			return this.equals((
		r
		
		
		ublic boolean equals(
		

	
		boolean this_present_success
		boolean that_present_success = t
		if (this_present_s
			if (!(this_pres
			
			if (this.success 
				return false;
		}
	

		boolean that_present_awe = true && that.isSetAwe();
		if (t
			if (!(this_present_awe && that_present_awe))
					
				return false;
			if (!this.awe.equals(that.awe))
			
		

		boolean this_present_api = true && this.isSetApi();
		boole
			f (this_present_api || that_present_api) {
			// 
			if (!(this_present_ap
				return false;
					
			if (!this.api.equals(that.api))
				return false;
		}
	

	}
		
			verride
		u
		

		boolean present_success = true;

		if (present_success)
				
			list.add(success);
			
			oolean present
				st.add(present_awe);
				 (present_awe)
					st.add
				
				olean present_api = true 
				t.add(present_api)
					present_api)
						.add(api);
						
					rn list.
						
					
					ride
				ic int compare
					!getClass().equals(other.getClass())) {
						rn getClass().getName().compareTo(ot
						
						
					lastComp
						
					C
					lastCo
				turn lastCompa
					
						sSetSuccess()) {
						Comparison = org.apache
						lastComparison != 0) {
					turn las
						
					
					Compar
				(lastCom
					urn lastComparison;
				
				 (isSetAwe()) {
			l
			if (lastComparison != 

			}
			// 
			
		l

			return lastComparison;
				
			

			lastComparison = org.apache.thrift.T
			if (lastComparison != 0) {
				return lastComparison;
				
				
				turn 0;
			
			
				lic _Fields fieldForId(int fieldId) {
				turn _Fields.findByThrif
				
			
			blic void read(org.apache
				hemes.get(iprot.getScheme()).getScheme
				
				
			b
			chemes.get(oprot.getSch
			
		

	p

		boolean first = true;
		
			b.append("success:");
		s
		

		sb.append("awe:");

			sb.appen
		} else {
				
			sb.append(this.awe);
			
			irst = false;
				 (!first) sb.appe
			b
			f (this.api == null) {
				b.append("null");
			 
			sb.append(this.api);
				
			i
			b.append(")");
			eturn sb.toString();
				
				
			b
			/ check for required fie
				 check for sub-struct va
			f
			awe.validate();
				
			f
			

		
		
				
			ivate void writeObject(java.io.ObjectOutputSt
			ry {
			write(new org.apache.t
				catch (org.apache.thrift.TExcepti
				hrow new java.io.IOException(
			
			
				
				vate void readObject(ja
				y {
			/
			__isset_bitfield = 0;
				ead(new org.apache.thrift.protocol.TCompactProtoco
				catch (org.apache.thrif
				hrow new java.io.IOExcept
			
		

	p

	

	}
		
	
			

	
			 
		public void read(org.apache.thrift.protocol.TProtocol iprot, blah_result struct) throws org.apache.thrift.TExceptio
			 { 

			iprot.readStructBegin();
			while 
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
		

				switch (sche
					case 0: // SUCCESS

				
	 * 	if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
	 * 
	 
							struct.success = iprot.readI64();
							struc t.setSucc 				} else  {	

						break;

						if (
							struct.awe = new AwesomeException();
							struct.awe.read(iprot);
				
			

					
		 			break;
		 		
						if (schemeField.type == org.apache.thrift.proto
							st ruct.api = 
						struct.api
						struct.s
					} else {
						org.apach
					}
					break;
				
			

				i
		 } rot.r
		 * adStructEnd()
		 
			// check for required fields of primitive type, which can
			struct.validate();
			
				
			
		p

		
		 oprot.writeStructBegin(STRUCT_DESC);
		 if
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				long elem261 = struct.s
			

			}
			if (struct.awe != null) {

				struct.awe.write(oprot);
				oprot.writeFieldEnd(
			}
			

				struct.api.write(oprot);
				oprot.writeField
			

			oprot.writeStructEnd();
			
		
	}

	private static class bl
		public blah_resultTupleScheme getScheme() 
			return new blah_resultTupleSchem

		}
	}

	private static clas @Override
		public 
			TTupleProtoc
			BitSet optionals
			if (struct.isS
		

			i
	 		optionals.set(1);
	 	}
			if (struct.isSetApi()) {
				optionals.set(2);
			}
			oprot.writeBitSet(opti
			if (struct.isSetSuccess()) { 
			
		

			if (struct.isSetAwe()) {
				struct.awe.write(oprot);
		

				struct
			}
		}
		

		public void read

		

				struct.success = i
				struct.setSuc
		

				struct.awe = new AwesomeExceptio
				struct.awe.
				struct.setAweIs
			}
		

				struct.api.read(ipro
				struct.setApiIsSet(true);
		

	
	 * 
	 * 
	 
	}
		
	

	ublic static class oneWay_args implemen
		rivate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apa
	

	private static final org.
		
	p

		schemes.put(StandardScheme.class, new oneW
		schemes.put(TupleScheme
			 
		
		ublic long id;
	p

	public enum _Fields implements org.apache.thrift
		ID((short)1, "id
		

	
		private static 
		
		

				byName.put(field.getF
			}
		

		/*
	 * 
	 * 
	 
		 * Find the _Fields consta
		 */
		

				case 1: // ID
					return ID;
				case 2: // REQ
			
		

			}
		}
		
			**
				 Find the 
			* if it 
				/ 
			u
			_Field

			return f
			
				
			**
				 Find the _Fields constant that matches  name, 
			*
			ublic 

		}
	

		private final String _fieldName;
		
		_Fields(
			_thriftId = thr

		}
			

			
		}
	

			r
	 * turn _fieldName;
	 * 
	 
		}
		
			
		/

		rivate byte __is
		ublic on
			
		
			blic oneWay_args(
		l
		java.util.Map<Integer, String> req
		

		setIdIsS
		this.req = req;
		
			
		**
			 Performs a deep copy on <i>othe r</i>.
		*/
	p

		this.id = other.id;
		if (other.isSetRe
			this.req = ne

		
		
		ublic oneWay_args deepCopy() {
			eturn new oneWay_args(this);
				
			
				erride
		u

		this.id = 0L;
		
		this.req = null;
			
				
			
				lic long getI
		r

		
	p

		setIdIsS
		return this;
		

		ublic void unsetId() {
		__isset_bitfield = En
		
			

		ublic boolean isSetId() {
		return EncodingUtils.t
		
			

		__isset_bitfield = Enco
	}

	public in
		return (this.req == null) ? 0 : this.req
		
			
		u

			this.req = new HashMap

		this.req.put(key, val);
		
			
		u
		return this.req;
			
			
				lic oneWay_args setReq
			h
		r
		
		
			blic void unsetReq() {
		t
		
			
			* Returns true if field re
				lic boolean isSetReq()
			e
		
		
	p

			this.req = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		

				unsetId();
			} else {
		

			break;
	
		case REQ:
			if (value == null) {

			} else {
				setReq((java.util
			}
			break;
			
		
		}
			
		
			blic Object getField
		s
		case ID:
			return getId()
		
		

	
		}
		throw new IllegalStateException(
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value)
		ublic
			f (field == null) {
					
			throw new IllegalArgumentException();
			
		
		

			return isSetId();
		case 
			return isSetReq();
			// 
			
			hrow new IllegalStateException();
					
		
			
		O
	p

			return false;
		if (that instanceof oneWay_args)
			return this.equals((oneWay_args)that);
		r
	}

	public boolean equals(oneWay_args that) {

			return false;
				
			
			oolean this_present_id =
			oolean that_pr
				 (this_present_id || that_present_id)
				f (!(this_present_id && that_present_id))
					eturn 
				f
				return false;
				
					
						an this_present_req = true &
						an that_present_req = tr
					this_pre
						!(this_present_req && that_present_req))
					t
					(!this
				eturn false;
					
						
						n true;   
						
							
							de
							int hashCode() {
						O
						
						an present_id = true;
					.add(pre
						resent_id)
					t
					
				lean pre
					.add(present_req);
				 
				ist.add(req);
			
			eturn list.hashCode();

			
			// 
			verride
		u

			return getClass().getName().compareTo(other.getClass().getName());
				
			

			nt lastComparison = 0;
			
			astComparison = Boolean.v
			f (lastComparison != 0) 
			return lastComparison;
			
				 (isSetId()) {
				astComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
						
				f (lastComparison != 0) {
					eturn lastComparison;
					
					
					tComparison = Boolean.value
				 
				eturn lastComparison
				
			f
			lastComparison = org.ap
			if (lastComparison != 0
			

		

	}
		
			blic _Fields fieldForId(int fieldId)
		r
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache

		
		
				
			blic void write(org.apache.thrift.protocol.TP
			chemes.get(oprot.getScheme()).ge
			
				
			v
			blic String toString() {
				ringBuilder sb = 
			o
			
			b.append("id:");
				.append(this.id);
				rst = false;
			f
			b.append("req:");
				 (this.req == null) {
				b.append("null");
					lse {
					.append(this.req);
					
					st = false;
				.
			e
		

		ublic voi
		// check for required fields
				
			/ check for sub-struct validity
			
			
				vate void writeObject(java.i
				y {
			w
			 catch (org.apache.thr
				hrow new java.io.IOException(te);
						
				   
				
					
					ate void readObject(java.io.ObjectIn
					 {
				/
				_isset_bitfield = 0;
			r
		}

		



		public oneWay_argsStandardScheme getScheme() {
		
			return new oneWay_argsStandardScheme();
			

	}
			 
	
			 

	
		public 
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
		

				if (schemeField.type == org.
					break;

				
	 * 
	 * 
	 
				switch (schemeField.id) {
					case 1:  // ID 				if (sch emeField.	

						} else {

						}
						break;
					case 2: // REQ
				
			

					
		 					int elem268 = iprot.readI32();
		 		
								struct.req.put(elem268, elem267);
							} 
						iprot.readM
						struct.se
					} else {
						org.apach
					}
					break;
				
			

				i
		 } rot.r
		 * adStructEnd()
		 
			// check for required fields of primitive type, which can
			struct.validate();
			
				
			
		p

		
		 oprot.writeStructBegin(STRUCT_DESC);
		 op
			long elem269 = struct.id;
			oprot.writeI64(elem269);
			

				oprot.writeFieldBegin(REQ_FI
				oprot.writeMapBegin(new org.ap

					int elem271 = elem270.getKey();
					oprot.writeI32(elem
					String elem272 = elem
			

				oprot.writeMapEnd();
				oprot.writeField
			

			oprot.writeStructEnd();
			
		
	}

	private static class on
		public oneWay_argsTupleSc
		

	} rivate static
		
		@Override
		public void wri
		

			i
	 		optionals.set(0);
	 	}
			if (struct.isSetReq()) {
				optionals.set(1);
			}
			
			if (struct.isSetId()) 
				long elem273 = struc
			
		

				oprot.writeI32(struct.req.size()
				for (Map.Entry<Integer, String>
		

					Strin
					oprot.writeString
				}

		}

		

			TTupleProtocol iprot =
			BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0)) {
		

			}
			if (incoming.get(1)) {
		

				for (int elem278 = 0; elem278 < elem277.
					int elem280 = iprot.readI32(); 
					String el
		

				struct.setReqIsSet(true);
			}
		}
	

	
		
	

	pri
	 * ate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new 
	 * rg.apache
	 th
	
		rivate static final org.
	p

	private static final Map<Class<? extends
		tatic {
			chemes.put(Stand
		s
	}

	public java.nio.ByteBuff
		ublic String Str
	/

		BIN((short)1, "bin"),
		STR((short)2, "
		;
	

	
		static {
		

			}
	 * 
	 * 
	 
		}
		
		

		 */
		public static
			switch(fieldId) 
			
		

					return STR;
				default:
					return
			}
				
			
				* 
			*
			* if i

		public st
			_Fields fields = fin
				f (fields =
			return f
				 
			
			**

		 
		

		}
		
		private f
			rivate final Str

		_Fields(s
			_thriftId = thri

		}
		
		

		}
	 * 
	 * 
	 
	
		public String getFie
			return _fieldName;
		}

		
		/ isset i
			blic bin_method_ar
		
			
		u
		java.nio.ByteBuffer bin,
		

		this.bin
		this.Str = Str;
		
			
		**
			 Performs a deep copy on <i>other</i >.
		*/
	p

			this.bin = org.apache.thrift.TBaseHelper.co
		}
			f (other.isSe

		}
		
		
			blic bin_method_args deepCopy() {
				turn new bin_
			
				
		O

		this.bin = null;
		
		this.Str = null;
			
				
			
				lic byte[] ge
		s

		
	

		return o
	}
		

		this.bin = bin == null ? (java.nio.ByteBuff
		return this;
		
			

		this.bin = org.apache.thrift.TBaseHelper.co
		return this;
		
			

		this.bin = null;
	}

	/** Retur
	public boolean isSetBin() {
		return this.bin != null;
			
		

		if (!value) {

		}
		
			
		u
		return this.Str;
			
			
				lic bin_method_args se
			h
		r
		
		
			blic void unsetStr() {
		t
		
			
			* Returns true if field St
				lic boolean isSetStr()
			e
		
		
	p

			this.Str = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		

				unsetBin();
			} else {
		

			break;
	
		case STR:
			if (value == null) {

			} else {
				setStr((String)value)
			}
			break;
			
		}
		
		
			
		ublic Object getFi
		switch (field) {
			ase BIN:
			return 
			
		c
			return getStr
		
		}
		

	
		** Returns true if field cor
		ublic boolean isSet(_Fields fiel
		

		}
		
			witch (field) {
					
		case BIN:
			return isSetBin();
		c
		

		throw new IllegalStateException();
		
			
			// 
			verride
					
		ublic boolean equals(Object that) {
			f (that == null)
			
		

		return false;
		
			
		u
		

	

		boolean that_present_bin = true && that.isSetBin();
				
			f (this_present_bin || that_present_bin) {
			if (!(this_present_bin &
				return false;
				f (!this.bin.equals(that.bin))
				return false;
					
				
				olean this_present_Str = 
				lean that_pres
					this_present_Str || that_present_Str) {
						!(this_present_Str && that_prese
						urn false;
					(!this.S
						urn false;
					
					
				urn true;
					
						
						ide
					c int ha
						Object> list = new ArrayList<Object>();
					
					ean pr
				t.add(pr
					present_bin)
				i
				
			o
			ist.add(present_Str);

			list.add(Str);
			// 
			
		r

		
				
			verride

			f (!getClass().equals(other.getClass
			return getClass().getName
				
				
				t lastComparison = 0;
				
			a
			f (lastComparison != 0) {
				eturn lastComparison;
				
				 (isSetBin()) {
				astComparison = org.ap
			i
				return lastComparison;
			}
		}

		

		}
		if (isSetStr()) {
			lastComparison = org.apache.thrift.TBase
			
		

		}

		
		
				
			blic _Fields fieldForId(int fieldId) {
			eturn _Fields.findByThriftId(fie
			
				
			b
			chemes.get(iprot.getSche
				
			
			blic void write(org.apache.thrif
			chemes.get(oprot.getSche
				
				
			v
			blic String toString() {
				ringBuilder sb = new StringB
				olean first = true;
			
		s

			sb.appen
		} else {
				
			org.apache.thrift.TBaseHelper.toString(this.b
			
			irst = false;
				 (!first) sb.append(", ");
				.append("Str:");
			f
			sb.append("null");
				else {
				b.append(this.Str);
			
		f

		



		// check for required fields
		
		// check for sub-struct validity
			

	
			 
	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			 

			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.Obj
		try {

			/
	 *  it doesn't seem like you should have to do this, but java serialization i
	 *  wacky, and doesn't call the d
	 fa
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.
		} catch (org.ap ache.thrift.TE 	throw new  java.io.I}

		

		public b
			return new bin_method_argsStandardScheme();
				
			
		

		
		 ublic void read(org.apache.thrift.protocol.TProtocol iprot, bin_method_args
		 or
			iprot.readStructBegin();
			while  (true) {
			schemeField = ipro
				f (schemeField.
				break;
				
			switch (
				case 1: // B
				
			

					
		 				org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.ty 	}
		 * 
		 		
					case 2: // STR
						if (schemeField.type == org.apache.thr
							struct.Str = ip
				ot.readString();
							struct.set
			

					
		 			break;
		 		
						org.apache.thrift.protocol.TProtocolUtil.sk
				}
			

			iprot.readStructEnd();
		

			struct.validate();
			
			
		p

		
			oprot.writeStruct
			

				java.nio.ByteBuffer elem281 
				oprot.writeBinary
			
		

				oprot.writeFieldBegi
				String elem282 = struct.S
		

			}	oprot.writeFieldStop(); 	oprot.writeStructEnd();
		}
		
		
	

		pu
	 	return new bin_method_argsTupleScheme(
	 }
	}
		
			ivate static class bin_method_argsTupleScheme extends TupleScheme<bin_m
		
		@Override
			ublic void write(org.apache.thrift.protocol.TProtocol pro
			
		

				optionals.set(0);
			}
		

			}
			oprot.writeBitSet(o
			if (struct.isSetBin

				oprot.writeBin

		

				oprot.writeString(elem284
			}
		}
	

		public void read(org.apache.thrift.protocol.TP
			TTupleProtocol iprot = (TTupleProtocol) prot;
		

				struct.bin = iprot.readBinary();
				struct.setBinIsSet(true); 
				
			}
		

				struct.setStrIsSet(true);
			}
		}
	

	
		
	

	pri
	 * ate static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.
	 * pache.thr
	 ft
	
		rivate static final org.apac
	p

	private static final Map<Class<? extends ISc
		tatic {
			chemes.put(StandardS
		s
	}

	public java.nio.ByteBuffer success;
		ublic actual_bas
	/

		SUCCESS((short)0, "success"),
		API((short)1, "
		;
	

	
		static {
		

			}
	 * 
	 * 
	 
		}
		
		

		 */
		public static
			switch(fieldId) 
			
		

					return API;
				default:
					return nul
			}
				
			
				* 
			*
			* if i

		public st
			_Fields fields = fin
				f (fields =
			return f
				 
			
			**

		 
		

		}
		
		private final
			rivate final String 

		_Fields(s
			_thriftId = thri

		}
		
		

		}
	 * 
	 * 
	 
	
		public String getFie
			return _fieldName;
		}

		
		/ isset id as
			blic bin_method_result
		
			
		u
		java.nio.ByteBuffer success,
		

		this.suc
		this.api = api;
		
			
		**
			 Performs a deep copy on <i>other</i>. 
		*/
	p

			this.success = org.apache.thrift.TBaseHelper.
		}
			f (other.isSe

		}
		
		
			blic bin_method_result deepCopy() {
				turn new bin_
			
				
		O

		this.success = null;
		
		this.api = null;
			
				
			
				lic byte[] ge
		s

		
	

		return o
	}
		

		this.success = success == null ? (java.nio.ByteBuff
		return this;
		
			

		this.success = org.apache.thrift.TBaseHelpe
		return this;
		
			

		this.success = null;
	}

	/** Retur
	public boolean isSetSuccess() {
		return this.success != null;
			
		

		if (!value) {

		}
		
			
		u
		return this.api;
			
			
				lic bin_method_result 
			h
		r
		
		
			blic void unsetApi() {
		t
		
			
			* Returns true if field ap
				lic boolean isSetApi()
			e
		
		
	p

			this.api = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		

				unsetSuccess();
			} else {
		

			break;
	
		case API:
			if (value == null) {

			} else {
				setApi((actual_base.java.
			}
			break;
			
		}
		
		
			
		ublic Object getFi
		switch (field) {
			ase SUCCESS:
			return 
			
		c
			return getApi
		
		}
		

	
		** Returns true if field cor
		ublic boolean isSet(_Fields fiel
		if (field == null)
			throw new Illeg
		}
	

		case SUCCESS:
			retu
			ase API:
					
			return isSetApi();
			
		t
	}

	@Override
		ublic
			f (that == null)
			// 
			return false;
					
		if (that instanceof bin_method_result)
			return this.equals((bin_method_res
		r
	}

	public boolean equals(bin_method_result that) {
		if (that == null)
			return false;
		
		

		if (this_present_success || that_present_success) {

				return false;
				
			if (!this.success.equals(that.success))
				return false;
			
				
				olean this_present_api = true && this.isSetApi();
					lean t
				 
				f (!(this_present_api && 
				eturn false;
					(!this.api.equals(that.api))
						urn false;
						
					
						n true;
					
					
				rride
					c int hashCode() {
						Object> list = new ArrayList<Object>();
						
						an present_success = true
					.add(pre
						resent_success)
					t
					
				lean pre
					.add(present_api);
				 
				ist.add(api);
			
			eturn list.hashCode();

			
			// 
			verride
		u

			return getClass().getName().compareTo(other.getClass().getName());
				
			

			nt lastComparison = 0;
			
				stComparison = Boolean.valueOf(isSetSucces
				 (lastComparison != 0) {
				eturn lastComparison;
				
			f
			lastComparison = org.apac
				f (lastComparison != 0) {
				return lastComparison;
				
			
			astComparison = Boolean
			f (lastComparison != 0)
			

		

			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		

	

		return _F
		
				
			
			blic void read(org.apache.thrift
			chemes.get(iprot.getScheme()
				
			
			blic void write(org.apac
				hemes.get(oprot.g
			
			
			verride
				lic String toString() {
				ringBuilder sb = new String
			o
			
				.append("success:");
			f
			

			org.apac
		}
				
			irst = false;
			f (!first) sb.append(", ");
			b.append("api:");
				 (this.api == null) {
				b.append("null");
			 
			sb.append(this.api);
				
				rst = false;
				.append(")");
			e
		

	p

	

			api.validate();
		
		
		}
			

	
			 
	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			 
		try {
			 

		} catch (org.apache.thrift.TException te) {
			throw 
		}
		
	

		try {
			// it doesn't seem li
			read(new org.apache.thrift.pr

		} 
	 * atch (org.apache.thrift.TException te) {
	 * 
	 
			throw new java.io.IOException(te);
		}     r

			return new bin_method_resultStandardScheme();

		
			
				vate static class bin_method_resultStand
			
		p

			ip
		 while (true) {
		 	s
				if (schemeField.type == org.apache.thrift.protoco
					brea k;
			}
				witch (schemeFi
				case 0: // SUCCESS
					if (schemeField.ty
						struct.success 
						struct.setSuc
					} else
						org.apache
				
			

					
		 				struct.api = new actual_base.java.api_exception(); 		str
		 * ct.api.read(i
		 		
						} else {
							org.apache.thrift.protocol.TProtocolU
						}
				
						break;
			

				}
		 	iprot.readFieldEnd();
		 }
			iprot.readStructEnd();
			
			

		}
		

			struct.validate();
			
			oprot.writeStructBegin(
			

				java.nio.ByteBuffer elem285 = s
				oprot.writeBinar
			

			if (struct.api != null) {
				oprot.writeFieldB
			
		

			oprot.writeFieldStop(
			oprot.writeStructEnd();
		}
	
	}

	
	p

			return new bin_method_resu}  
		rivate 
		
		@Override
		public void write(org.apache.th
			TTupleProtocol oprot = (T
			BitSet optionals = new
			if (struct.isSetSucce
		

			i
	 		optionals.set(1);
	 	}
			oprot.writeBitSet(optionals, 2);
			if (struct.isSetSuccess()) {
				java.nio.ByteBuffer elem286
				oprot.writeBinary(elem286);
			}
		

			}
		}
	

		public v
			TTupleProtocol ipro
			BitSet incoming = ipro
			if (incoming.get

				struct.setSuccessIsSet(tr
			}

				struct.api = new actu
				struct.api.read

		

	
		
	

	
		blic static class param
		rivate static final or
		
	p

	private static final org.apa
		
	p

		sc
	 * emes.put(StandardScheme.class, new param_modifiers_argsStandardSchemeFacto
	 * y());
	 
		schemes.put(TupleScheme.class,
		
	

	public int default_num;
		ublic int req_num; // required
	/

		OPT_NUM((short)1, "opt_num")
		DEFAULT_NUM((short)2, "d
		

	
		private static final Map<String
		
		static {
		

			}
		}
	

		 *
	 * Find the _Fields constant that matches fieldId, or null if its not found
	 * 
	 
		 */
		public static _Fields findByThriftId(int fieldId) {
		

					return OPT_NUM;
				case 2: // DEFAULT_NUM
		

					return REQ_NUM;
				default:
		

		}
		
		/**
		 * Find the 
		

		public static _Fields findB
			_Fields fields = findByThriftId(fieldId);
		

		}
	 * 
	 * 
	 
	
		/**
		

		public static _Fields findByName(String nam
			return byName.get(name);
		

		private final short _thriftId;
		private final St
		
			Fields(short thriftI
				thriftId = thri
			_fieldNa
				 
			
			ublic 

		}
			
				blic String getFiel
			return _
				 
			
			

		rivate static
			ivate static final i
				vate static fin
			ivate by
				lic param_modifiers_ args() 
			
			

		i
		

		this();
		this.opt_num = o
		setOpt_numIsS
			his.default_num = de

		this.req_num = re
			etReq_numIsSet(true);

		
			*

		*
		ublic param_modifiers_args(param_m
		

		th
	 * s.default_num = other.default_num;
	 * 
	 
		this.req_num = other.req_num;
		
			
		u

		
		
			verride
		ublic void clear(
			etOpt_numIsSet(false);
		this.opt_num 
			
		s
		this.default_num = 0;
	

		this.req
	
		
			
		ublic int getOpt_num() {
			eturn this.opt_num; 
		
	

		this.opt_num = opt_num;
		setOpt_numIsSet(t
			eturn this;

		
		ublic void unsetOpt_num() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_b
			
				
			* Returns true if field opt_num i
				lic boolean i
		r

		
		ublic void setOpt_numIsSet(boolean value
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, _
			
				
			blic int getDefault_num() {
				turn this.def
		

		ublic param_modifiers_args setDefaul
		this.default_num = default_num;
		setDefault_numIsSet(true);
			eturn this;
				
			
				lic void unse
		_

		
	/

		return E
	}
		

		__isset_bitfield = EncodingUtil
		
		
			blic int getReq_nu

		
		
		ublic param_modifiers_ar
			his.req_num = req_num;

		return this;
		
		
			blic void unsetReq

		
	

	public bo
		return EncodingUtils.testBit(__isset_bitfield, __
		
			
		u

		

		ublic void setFieldValue(_Fields field, Object value) {
		switch (field) {
			ase OPT_NUM:
			
				unsetOpt_num();
			} else {
				setOpt_num((Integer)value
				
			b
		
		case DEFAULT_NUM:
			if (value == null) {
				unsetDefault_num();
			
				setDefault_num((Integer
			}
			break;
				
			a
			
				unsetReq_num();
			} else {
				setReq_num((Integer)v
			
			break;
			
			
				
			
		u
		switch (f
		

	
		case DEFAULT_NUM:
		

		case REQ_NUM:
			return getReq_num();
	

		throw new IllegalStateException();
		
	

	public bo
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case OPT_NUM:
			return isSetO
		case DEFAUL
			_NUM:
			return isSetDefault_num()
		case REQ_NUM:
			return isSetR
		}
			
		throw new IllegalState
		
		
		Override
		ublic boolean equals(
		

		if (that instanceof param_modifiers_args)
			return this.equals((param_m
		return false;
	}

	public boolean equals(param_modifiers_args that) {
		if (t
			return false;
					
		
			oolean this_present_opt_num = true
		b
		

				return false;
			if (
				return false;
			// 
			
			
					
		boolean this_present_default_num = true;
			oolean that_present_default_num = 
		i
		

			if (this.default_num != that.default_num)
				return false;
			
		
		

		if (this_present_req_num || that_present_req_num) {

				return false;
				
			if (this.req_num != that.req_num)
				return false;
			
				
				turn true;
					
				
				erride
				ic int hashCode() 
					<Object> list = new ArrayList<Object>();
						
						an present_opt_num = true;
					.add(pre
						resent_opt_num)
					t
					
				lean present_default_n
					.add(present_default_num);
						resent_default_num)
						.add(default_num);
					
						an present_req_num = true;
					.
					presen
				st.add(req_num);
					
						n list.hashCode();
						
					
						ide
					c
					!getCl
				turn get
					
				
				t lastComparison = 0;
			
			astComparison = Boolea

			return lastComparison;
			// 
			
				 (isSetOpt_num()) {
						
			l
			if (lastComparison
			

		}
				
			astComparison = Bo

			return lastComparison;
			
			f (isSetDefault_num()) {
			lastComparison = org.apa
			if (lastComparison != 
				return lastComparison;
			}
			
			astComparison = Boolea
			f (lastComparison != 0) {
			return lastComparison;
			
			f (isSetReq_num()) {
			lastComparison = org.ap
			if (lastComparison != 0
			

		

	}
		
			blic _Fields fieldForId(int fieldId) {
		r
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException

		
		
				
			blic void write(org.apache.thrift.protocol.TP
			chemes.get(oprot.getScheme())
			
			
			verride
				lic String toStri
			t
			oolean first = true;
				
			b
			b.append(this.opt_num);
			irst = false;
				 (!first) sb.append(", ");
				.append("default_num:");
			b
			irst = false;
				 (!first) sb.append(", ");
				.append("req_num:");
			b
		f

		return sb
		
				
			
			blic void validate() throws org.a
			/ check for required fields
			/ check for sub-struct validity
			
				
				vate void writeObject(java.io
			r
			write(new org.apache.t
				catch (org.apache.thrift.TException t
				hrow new java.io.IOException(te);
			
		

	p

	

			read(new org.apache.thrift.protocol.TCo
		pactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		
		} catch (org.apache.thrift.TException te) {
			

		}
			 

	
	private 
		public param_modifiers_argsStandardScheme getScheme() {
			return new param_modifiers_argsStandardScheme();
		

	

	pri
	 * ate static class param_modifiers_argsStandardScheme extends StandardScheme
	 * param_modifiers_args> {
	 
	
		public void rea d(org.apache.	

			while (true) {

				if (sc
					break;
				}
				
			

					
		 				struct.setOpt_numIsSet(true);
		 		
							org.apache.thrift.protocol.TProtocolUtil.skip(
						} 
					break;
				case 2: // DEFA
					if (sc
						struct.def
				
			

					
		 			break; case 
		 * : // REQ_NUM
		 		
							struct.req_num = iprot.readI32();
							struct.setReq_numIsSet(true);
						} else {
				
							org.apache
			

					
		 			org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type
		 	}
				iprot.readFieldEnd();
			}
			

			// check for required fields 
			if (!struct.isSetReq_num()) {

			}
			struct.validate();
			
		

			struct.validate();
			
			

			int elem287 = struct.opt_num;
			oprot.writeI32(ele
			
		

			oprot.writeI32(elem28
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(REQ_NUM_FI

			int elem289 = struct.req_num;
		

			oprot.writeFieldStop();	oprot.writeStr
		}
		
		
	

		pu
	 	return new param_modifiers_argsTupleSc
	 }
	}
		
		rivate static class param_mod
	

		public void write(org.apache.thrift.proto
			TTupleProtocol oprot = (TTupleProtocol)
		

			BitSet 
			if (struct.isSetOpt
				optionals.set(0);
			}

		

			oprot.writeBitSet(option
			if (struct.isSetOpt
		

			}
			if (struct.isSetDefaul
				int elem292 = struct
				oprot.writ
		

	
		@Override
		

			s
	 * ruct.req_num = iprot.readI32();
	 * 
	 
			struct.setReq_numIsSet(true);
			BitSet incoming = iprot.readBitSet(2);
		

				struct.setOpt_numIsSet(true);
			}
		

				struct.setDefault_numIsSet(true);
			}
		}
			
				
			
				 
			
			lic st

		
	p

	private static final Map<Class<? extends ISc
		tatic {
		schemes.put(S
			chemes.put(TupleSche

		
		ublic long success;
	/

		SU
	 * CESS((short)0, "success")
	 * 
	 
		;
		
			rivate static final Map<String, _Fiel
		

			for (_Fields fi
				byName.put(
			}
		}
		
		

		 */
		public static _Fields findByThriftI
			switch(fieldId) 
				case 0: // S
					return SUCCESS;
				default: 
					return nul
		

	
		/**
			* Find the _F

		 */
		public static _Fields findByThriftId
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentExcepti
				eturn fields;
			
				
		/

		 */
		

		}
	
		private final short _thriftId;

		
		_Fields(short thriftId, St
			_thriftId = thriftI
			_fieldName = field

		
		

		}
	
		public String getFieldName() {
			return _fieldName;
		}

		

		rivate static final int __SUCCESS_ISSET_ID = 0;
		rivate byte __isset_bitfie
			blic param_modifiers_r
		
		
			blic param_modifiers_result(
			ong success) {
				is();
			h
		s
		
	

	 * Performs a deep copy on <i>other</i>.
		*/
	p

		this.success = other.success;
		
	

		return new param_modifiers_result(this);
		
	

	public vo
		setSuccessIsSet(false);
		this.success = 0L;
		

		
		ublic long getSuccess() 
		return this.su
		
		
	p

		setSuccessIsSet(true);
		return this;
		
	

		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		
			
					
		** Returns true if field success is set (ha
			blic boolean isSetSuccess() {
		r
	}

	public void setSuccessIsSet(boolean value) {
		__iss
			
			// 
			
			blic void setFieldValue(_Fields field, Object value) 
					{
		switch (field) {
			ase SUCCESS:
			
		

				setSuccess((Long)value);
			}
			break;
		
		

	

		switch (field) {
				
			ase SUCCESS:
			return getSuccess();
			
				
				row new IllegalStateException();
					
				
				 Returns true if field co
				ic boolean isSet(_
					field == null) {
						w new IllegalArgumentException();
						
					
						h (field) {
					 
					urn is
				
					w new IllegalStateException();
				
				
			v
			blic boolean equals(Ob

			return false;
			// 
			f (that instanceof
			

		
				
			

			f (that == null)
			return false;
				
				olean this_present_success = t
				olean that_present_succe
				 (this_present_success
			i
				return false;
			if (this.success != tha
			

	

	}
		
			verride
		u
		

		boolean present_success = true;

		if (prese
			list.add(success);
				
			
			eturn list.hashCode();
			
				
			v
			blic int compareTo(param_modifie
			f (!getClass().equals(other.
				eturn getClass().getName().com
				
			
		i

		lastCompa
		if (lastComparison != 0) {
				
			return lastComparison;
			
			f (isSetSuccess()) {
				astComparison = org.apache.thrift
				f (lastComparison != 0) {
				
			

		



		return _Fields.findByThriftId(fieldId);
		
		
	}
			

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			 
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
			 

	
	public v
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		
	

	public String toString() {
		StringBuilder sb = new StringBuilde

		bo
	 * lean first = true;
	 * 
	 
	
		sb.append("succes s:"); sb.append(this.s uccess);f

		return sb.toString();

		
			blic void validate() throws org.apache.thrift.TExcep
				 check for required fields
			/
		

		riv
		 ry {
		 wr
		} catch (org.apache.thrift.TException te) {
			throw  new java.io
			
				
			
				ate void readObj
			y {
				 it doesn't 
			_
			

			th
		  
		 * 
		 
		rivate static class param_modifiers_resultStandardSchemeFa
			ublic param_modifiers_resultStandardSchem
			return new param_mo
				ifiers_resultStandardScheme();
			
		

		riv
		 
		 ub
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			

				if (schemeField.type == org.
					break;

				switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type
			

						} else {
							org.apache.th
			

					default:
						org.apache.thri
			
		

			iprot.readStructEnd()
	
		

		} public void write(org.apache.th
			struct
		
			oprot.writeStructBegin(S
		

				
	 		oprot.writeI64(elem293);
	 		
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
			
				
				
			
		r
		public param_modifiers_resul
			return new param_modifiers_resultTupleScheme();
			
				
				
			i
		
		

			TTupleProtocol oprot = (TTupleProtocol) prot
			BitSet optionals = new BitSet();
		

			}
			oprot.writeBitSet(o
			if (struct.isSetSucce

				oprot.writeI64(elem

		

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, 
		

			if (incoming.get(0)) {
				struct.success = iprot.readI64();
		

		}
		
			
		
		
	

	private static final org.apache.thrift.proto
		
	p

	
		rivate static final Map<Cla
		tatic {
		

	}
		
	p

	/**
	 * The set of fields this struct contains, along with convenience methods for f
	 * nding and
	 ma
	public enum _Fields implements or
		LIST_TYPE((short)1, "list_type
		

	
		private stati
			
		s
		

			}
		}
	

		 * Find the _Fields constant that matches fieldId, or 
		 */
		

				case 1: // LIST_TYPE
					return LIST_TYPE;
				case 2: // SET_TYPE
			
				default:
		

		}
		
		

		 * if it is not found.
		 */
		public stati
		

			return fields;
		}
	

		 *
	 * Find the _Fields constant that matches name, or null if its not found.
	 * 
	 
		 */
		public static _Fields findByN
		

	
		private final
			rivate final String _
		
		

			_fieldName = fieldName;
		}
		
			ublic short getThrif
				eturn _thriftId;
			
				 
			u
			return

		
			
				isset id assignm
			blic und
				 
			
			blic u

		j
		

		this.set_type = set_type;
		
		
			*

		*/
			blic underlying_types

			
			for (long elem295 : other.list_ty
		

			}
	 * 
	 * 
	 
		}
		if (other.isSetSet_t
			this.set_type = new HashSet<Long>(oth
			

				this.set_type.
			}
			
		
			
		u
		return new underlying_types_test_a
	}

	@Override
	public void clear() {
		this.list_type = 
			
		this.set_type = null;
			 
		
	

		return (this.list_type == null) ? 0 : this.list_type.si
		
			

		return (this.list_type == null) ? null : this.list_type.iterato
		
		
			blic void addToList_type(long elem) {
				 (this.list_t
			this.list_type = new ArrayList<Long>();
				
		t

		
		ublic java.util.List<Long> getList_type() {
		return this.list_type;
			
				
			blic underlying_types_test_args setList_t
				is.list_type 
		r

		
	p

	}
	
		** Returns true if field list_type is set (h

		return this.list_type != null;
		
		
			blic void setList_ty

			this.list_type = null;
		}
		
			

		return (this.set_type =
	}

	public ja
		return (this.set_type == null) ? null : this.set_type.i
		
			
		u

			this.set_type = new Ha

		this.set_type.add(elem);
		
			
		u
		return this.set_type;
			
			
				lic underlying_types_t
			h
		r
		
		
			blic void unsetSet_typ
		t
		
			
			* Returns true if field se
				lic boolean isSetSet_t
			e
		
		
	p

			this.set_type = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		

				unsetList_type();
			} else {
		

			break;
	
		case SET_TYPE:
			if (value == null) {

			} else {
				setSet_type((java.util.Set<
			}
			break;
			
		}
		
		
			
		ublic Object getFieldVa
		switch (field) {
			ase LIST_TYPE:
			return 
			
		c
			return getSet
		
		}
		

	
		** Returns true if field cor
		ublic boolean isSet(_Fields fiel
		

		}
		
			witch (field) {
					
		case LIST_TYPE:
			return isSetList_type();
		c
		

		throw new IllegalStateException();
		
			
			// 
			verride
					
		ublic boolean equals(Object that) {
			f (that == null)
			
		

		return false;
		
			
		u
		

	

		boolean that_present_list_type = true && that.isSetList_type();
				
			f (this_present_list_type || that_present_list
			if (!(this_present_list_
				return false;
				f (!this.list_type.equals(that.list_t
				return false;
					
				
				olean this_present_set_ty
				lean that_present_se
					this_present_set_type || that_present_set_type) {
						!(this_present_set_type && that_present_set_type))
						urn false;
						!this.set_type.equals(that.set_type))
							rn false;
							
						
						n true;
						
					
						ide
					c
					<Objec
				
					ean present_list_type = true && (isSetList_type());
						add(present_list_type);
						resent_list_type)  
						.add(list_type);
							
							n present_set_type = true && 
						a
						resent_set_type)
						.add(set_type);
					
						n list.hashCode();
					
					
				rride
					c int compareTo(underlying_types_test_args other) {
				 
				eturn getClass().getN
			
			

			
			// 
			astComparison = Bo
		i

		}
				
			f (isSetList_type(

			if (lastComparison != 0) {
				return lastComparison;
				
				
						
				stComparison = Boolean.valueOf(isSetSet
					(lastComparison != 0) {
					turn lastComparison;
				
				 (isSetSet_type()) {
				astComparison = org.ap
			i
				return lastComparison;
				
				
						
				turn 0;
					
					
				l
				turn _Fields.findByT
				
			
			blic void read(org.apac
			chemes.get(iprot.getSch
		

	p

	}
		
			verride
		u
		

	

		if (this.
			sb.append("null");
				
			 else {
			sb.append(this.list_type);
			
				rst = false;
			f
			b.append("set_type:");
				 (this.set_type =
			s
			 else {
			sb.append(this.set_type);
				
				rst = false;
					append(")");
					urn sb.toString();
				
			
			blic void validate() throws o
				 check for required fields
				 check for sub-struct validity
					
					
				v
			r
			

			throw ne
		}
				
			
			
			ivate void readObject(
				y {
						
				/ it doesn't seem like you should have to do this, bu
				ead(new org.apache.thrift.protocol.TCompactProtocol(new or
					atch (org.apache.thrift.TExcept
					row new java.io.IOException(te
				
				
			
			ivate static class und
				blic underlying_types_test_argsStandardScheme getScheme() {
						
				eturn new underlying_types_test_argsS t andardScheme()
				
					
					
				v
				
			u
			

		

	

				}
		
		
				switch (schemeField.id) {
			

						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
			 

							struct.list_type = new ArrayList<Long>(elem299.size);
							fo
								long elem301 = iprot.readI64();
								struct.list_type.add(elem301);
		

							struct.setList_typeIsSet(true)

				
	 * 	} else {
	 * 
	 
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, sche
						} 	

						if (schemeField.type == org.apache.thrift.protocol.TType.SET) {

							str
							for (int elem303 = 0; elem303 < elem302.size; ++
								long elem304 = iprot.readI64();
				
			

					
		 			} else {
		 		
						}
						bre ak;
				default:
					org.apache.thr
			}
				prot.readFie
			}
			

			//
		 struct.validate(); 
		 * 
		 
		public void write(org.apache.thrift.protocol.TProtocol opr
			struct.validate();
			
				
			oprot.writeStr
			

				o
		 	for (long elem305 : struct.list_type) {
		 		
					oprot.writeI64(elem306);
				}
			

			}
			if (struct.set_type != null) {

				oprot.writeSetBegin(new org.apache.thrift
				for (long elem307 : 
					long elem308 = elem30
			

				oprot.writeSetEnd();
				oprot.writeField
			

			oprot.writeStructEnd();
			
		
	}

	private static class un
		public underlying_types_test_argsTuple
		

	}
		rivate 
		
		

			T
	 	BitSet optionals = new BitSet();
	 	i
				optionals.set(0);
			}
			if (struct.isSetSet_type()) {
				optionals.set(1);
				
				prot.writeBitSet(optionals
			i
			
		

					oprot.writeI64(elem310);
				}
		

				oprot.
				for (long elem311 
					long elem312 = el

		

		}
		
		

			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(2);
		

				struct.list_type = new ArrayList<L
				for (int elem314 = 0; ele
					long elem315 = iprot.readI64();
			
				}
		

			if (incoming.get(1)) {
				org.apache.thrift.
		

					long elem318 = iprot.readI64();
					struct.set_type.add(
				}
		

		}
		
	}

	
	 * 
	 * 
	 
	
		blic static class underlying
	p

	private static final org.apache.thrift.proto
		
			ivate static final M
		t
		

	}
		
		ublic java.ut
			* The set of fields 
				lic enum _Field
			UCCESS((
				 
			
			rivate

		s
		

			}
		}
		
			**

		 
		public static _Fields findByThrift
		

				
	 * return SUCCESS;
	 * 
	 
				default:
					return null;
			}
		}

		/**
		 * Find the _
			* if it is not found.
		 
		public static _Fields findByThrift
		

			return 
		}
		
			**
		 * Find the _Fields constant that matches name, o
			*/ 
		public static
		

	
		private final sho
			rivate final 

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
			
				
			ublic short getThriftFieldId() {
				eturn _thrift
		}

		public Strin
		

	}
	
		/ isset id assignments

		
		
		ublic underlying_typ
			ava.util.List<Long

		this.success = success;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
		*/
			blic underlying_types_test_result(underlying_types_test_result oth
		i

			for (long elem319 : ot

				this.success.add(elem320);
			}
			
		
		
			blic underlying_types_test_result deepCopy() {
			eturn new underlying_types
				
			
		O
		ublic voi
		

	}
		
	p

	}
		
	p

	}
		
	p

			this.su
		}
		this.success.add(elem);
		

		ublic java.util.List<L
		return this.success;
			
		
			blic underlying_types_te
		t
		return this;
		
		
	p

	}
		
		** Returns true if field success
	p

	}
		
			blic void setSuccessIsSet(boolean value) {
					
		if (!value) {
			this.success = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switc
			ase SUCCESS:
			// 
			if (value == null) {
					
				unsetSuccess();
			} else {
			
		

	
		}
			
		
	p

		case SUCCESS:
			

		
				
			
			hrow new IllegalStateExc
			
				
				 Returns true if field corresponding to fieldID is set (has been
					ic boo
				 
				hrow new IllegalArgumentE
				
					
						h (field) {
						SUCCESS:
						rn isSetSuccess();
							
							new IllegalStateException();
						
						
						ide
					c boolea
						hat == null)
					u
					that i
				turn thi
					rn false;
				
				
			b
			f (that == null)

			
			// 
			oolean this_presen
		b

			if (!(this_present_success && that_present_success))
				
				return false;

				return false;
			
				
				turn true;
						
				
					
					rride
				l
				st<Object> list = new
				
			o
			ist.add(present_success
			f (present_success)
			

		

	
		Override
			blic int compareTo(underlying_types_test_result other
		i
		

	

		
		lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
				
			f (lastComparison != 0) {
			return lastComparison;
			
				 (isSetSuccess())
			l
			if (lastComparison != 0) {
				return lastComparison;
				
				
					urn 0;
					
				
			b
		r

		
		ublic void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException 
				
			chemes.get(iprot.getScheme()).getScheme().rea
			
			
				lic void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thr
						ift.TException {
				hemes.get(oprot.getScheme()).getScheme().write(opro
				
					
					rride
				l
				ringBuilder sb = new StringBu
			o
		

		

	

		}
		
		first = false;
			

	}
	
		ublic void validate() throws org.apache.thrift.TException {
		// check for required fields
		

	
	 * 
	 * 
	 
	private void writeObject(java.io.ObjectOutputStream out) throws
		t

		} catch (org.apache.thrift.TException te) {

		}
			
				
			i
		t

			re
		  catch (org.apache.thrift.TException te) {
		 th
		}
			 
			
				ate static c
			u
			

		
		  ate s
		 * atic class un
		 
		public void read(org.apache.thrift.protocol.TProtocol ipro
			org.apache.thrift.protocol.TField schemeF
			iprot.readStructBeg
				n();
			while (true) {
			

					
		 	}
		 	s
					case 0: // SUCCESS
						if (schemeField.type 
			

							for (int elem322 = 0; ele
								long elem323 = iprot.readI

							}
							iprot.readListEnd
							struct.setSuccessIs
			

						}
						break;
			

				}
				iprot.readFieldEn
			
		

			// check for required
			struct.validate();
		

		pu
	 	struct.validate();
	 
			oprot.writeStructBegin(STRUCT_DESC);
		

				oprot.writeListBegin(new org.a
				for (long elem324 : struct.su
		

				}
				oprot.writeListEnd
		

			oprot.writeFieldStop();
			oprot.writeStru
		}
	

	
		rivate static cl
		p
			return new underlying_types_test_
		

	
	 * 
	 * 
	 
	private static class underlying_types
		
			Override
		p

			BitSet optional
			
				optionals.set(0);
		

			if (str
				oprot.writeI32(struct.success.siz
				for (long elem3
					long elem32
					oprot.writeI64(elem327);
				} 
			}
		

		@Override
		public void read(
			TTupleProtoco

			if (incomin
		

				for (i
					long elem330 = ipro
					struct.success.add(elem330);

				struct.setSuccessIsSe
		

	
	}
		
			
		

		rivate static final org

		
	p

		schemes.put(StandardScheme.class, new g
		schemes.put(TupleScheme.class, new getT
	}

	/** The set of fields this struct contains, along with convenience methods for finding and manipul
		ublic enum _Fields implements org.apache.thrift.TFieldIdEnum 
		

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
		
		

				byName
			}
		}
		

		 * Find the _Fi
		 */
		

				default:
					return null;
			}
		

		/**
		 * Fi
			* if it is not found.
					
		 */
			ublic static _Fields findByThriftI
			
		

		}
		
			**
			// 
			* Find the _Fields constant that matches name, or nul
					l if its not found.
		 */
			ublic static _Fields findByName(St
			
		

		private final short _thriftId;
		private final String _fieldName;
			
		_
		

		}

		public short getThriftFieldId() {
				
			return _thriftId;
			
			
				blic String getFieldName() {
				eturn _fieldName;
					
				
				
				sset id 
					c getThing_args() {
				
				
			*
			 Performs a deep copy 

			blic getThing_args(getThing_args other) {
			// 
			
		

		return new getThing_args(this);
				
			

			verride
			blic void clear() {
			
		

		

	}
		
			blic Object getFieldValue(_Fields fiel
		s
		

	}

		** Return
		ublic boolean isSet(_Fields field) {
				
			f (field == null) {
			

		
		switch (field) {
				
			
		t

	

	

			return false;
		
		if (that instanceof getThing_args)
			

		return false;
			 

	
	public b
		if (that == null)
			return false;
	

	}

	
	 * 
	 * 
	 
	@Override
		ublic int hashC ode() {L

		return list.hashCode();

		
			verride
				lic int compareTo(getThing_args other) {
			f
			

		
		 nt lastComparison = 0;
		 
		return 0;
			 
			
				ic _Fields fiel
			turn _Fi
				
			
		u

		
		  ic vo
		 * d write(org.a
		 ch
		
			
			verride
				
			blic String to
		S

		
		 b.append(")");
		 et
		
			
		u

		// check for sub-struct validi
		

		rivate void writeObject(java.io.ObjectOutpu
			ry {
			write(new org.apache.th
		}

		}
			
		

		try {
			// it doesn't seem
			
		

		}
	}
	

		public getThing_argsSt	return new getT
		}
		
	

	
	 public void read(org.apache.thrift.prot
	 	o
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
			
		

				switch (schemeField.id) {
					default:
		

				iprot.
			}
			iprot.readStructEnd

		

		}
		
		

	
			oprot.writeStructBegin
			oprot.write
		

	
		
	

		pu
	 * lic getThing_argsTupleScheme getScheme() {
	 * 
	 
			return new getThing_argsTuple
		}
	}

	private static class getThing_argsTupleSchem
		
			Override
		p
		

	
		@Override
		public void r
			TTupleProtocol iprot
				
			
				 
			
			

		b
	p

	private static final org.apache.thrift.proto
		
		rivate static
			atic {

		s
		
	

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating t
	 em
	public enum _Fields implements org.ap
		SUCCESS((short)0, "s
			
		

		
		static {
			for (_Fields field : E
			
			}
		

		/**
		 * Find the _Fields constant that m
		 */
			ublic static 
			switch(fieldId) {
				case 0: // SUCCESS 
					return SUC
		

			}
		}
			

		 * Find the _Fields constant that matches fieldId, throwing
		 * if it is not found.
		 */
			ublic static _Fields findByThriftIdOrThrow(int field
				Fields fields
			if (fields == null) throw new IllegalAr
				eturn fields;
		}

		/**
		

		public s
			return byName.get(nam
		}

		private final short _thriftId;
		private final String _fiel
		
			Fields(short thrif

			_fieldName = fieldName
		

		public s
			return _thriftId;
		}
			
		p

		}

		
		/ isset id assignments
			blic getThing_result()
		
		
			blic getThing_result(
			hing success) {
				is();
			h
		
		
	/

	 */
		ublic getThing_result(getThing_result o
		

		}
		
	

		return new getThing_result(this);
		
	

	public vo
		this.success = null;
		
		

		ublic Thing getSuccess
		return this.success;
			
		
			blic getThing_result set
		t
		return this;
		
		
	p

	}
		
		** Returns true if field success
		ublic boolean isSetSuc
			eturn this.success 
		
	

		if (!value) {
			this
			
					
		
			
		u
		

			if (value == null) {
				uns
			} else {
			// 
				setSuccess((Thing)value);
					
			}
			break;
		
		

	
		ublic Object getFieldValue(_Fields field) {
			witch (field) {
		c
		

		}

		
				
			
			* Returns true if field 
			blic boolean i
				 (field == null) {
				hrow new IllegalArgumentException();
					
				
				itch (field) {
				e SUCCESS:
					urn isSetSuccess();
						
						 new IllegalStateException(
						
					
						ide
					c
					that =
				turn fal
					that instanceof getThing_result)
				e
				turn false;
			
			

			f (that == null)
			// 
			return false;
		

		boolean that_present_success = true && that.isSetSuccess();
				
			f (this_present_su

				return false;
			if (!this.success.equals(that
				return false;
				
				
			e
			
			
		O

		

		boolean present_success = true && (isSetSuccess());
		list.add(present_success);
			f (present_success)
			
	

	}

		Override
		ublic int compareTo(getThing_result other) {
				
			f (!getClass().equals(other.getClass())) {
			return getClass().getName().comp
			
				
			n
			
			astComparison = Boolean.valu
				 (lastComparison != 0) {
			r
		}

			lastComp
			if (lastComparison != 0) {
				
				return lastComparison;
			}
			
				turn 0;
				
				
			b
		r

	

	


		
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			

	
	@Overrid
		ublic String toString() {
		StringBuilder sb = new StringBuilder("getThing_result(");
		

		sb
	 * append("success:");
	 * 
	 
		if (this.success == null) {
			

			sb.append(this.success);

		first = 
			b.append(")");
				turn sb.toString();
			
		

		// 
		 / check for sub-struct validity
		 f 
			success.validate();
			 
			
				
			i
		t

		} c
		 throw new java.io.IOException(te); 
		 * 
		 
		
			ivate void readObject(java.io.ObjectInput
			ry {
				
			// it doesn't 
			

			th
		 
		 
		
			ivate static class getTh
		p

		}
		

		rivate static class getThing_resultStandard
			
			ublic void read(org.apa
			

			while (true) {
				schemeField = ip
			

				}
				switch (schemeFie
			
		

							struct.success.re
							struct.setSuccessI
		

				
	 				break;
	 		
						org.apache.thrift.protocol.TProtocolUt
		

			}
			iprot.readStructEnd();
	

			struct.
		}
	

			struct.validate();
		
			
		

				struct.success.write(oprot);
				oprot.writeFie
			
			oprot.writeFieldStop();
		

	
	 * 
	 * 
	 
	}
		
			ivate static class getThing_resultTup
		p

		}
		
		
	p

		@Overrid
		public void write(org.apache.thrift
			TTupleProtocol o
			BitSet option
			if (struct.isSetSuccess()) {
				optionals.set(0); 
			}
		

				struct.success.write(oprot);
			}
			

		@Override
		

			BitSet 
			if (incoming.get(0)) 
				struct.success = new Thing();

				struct.setSuccessIsSe
		

	
	}
		
			
		

		rivate static final org

		
	p

		schemes.put(StandardScheme.class, new g
		schemes.put(TupleScheme.class, new getM
	}

	/** The set of fields this struct contains, along with convenience methods for finding and manipul
		ublic enum _Fields implements org.apache.thrift.TFieldIdEnum 
		

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
		
		

				byName
			}
		}
		

		 * Find the _Fi
		 */
		

				default:
					return null;
			}
		

		/**
		 * Fi
			* if it is not found.
					
		 */
			ublic static _Fields findByThriftI
			
		

		}
		
			**
			// 
			* Find the _Fields constant that matches name, or nul
					l if its not found.
		 */
			ublic static _Fields findByName(St
			
		

		private final short _thriftId;
		private final String _fieldName;
			
		_
		

		}

		public short getThriftFieldId() {
				
			return _thriftId;
			
			
				blic String getFieldName() {
				eturn _fieldName;
					
				
				
				sset id 
					c getMyInt_args() {
				
				
			*
			 Performs a deep copy 

			blic getMyInt_args(getMyInt_args other) {
			// 
			
		

		return new getMyInt_args(this);
				
			

			verride
			blic void clear() {
			
		

		

	}
		
			blic Object getFieldValue(_Fields fiel
		s
		

	}

		** Return
		ublic boolean isSet(_Fields field) {
				
			f (field == null) {
			

		
		switch (field) {
				
			
		t

	

	

			return false;
		
		if (that instanceof getMyInt_args)
			

		return false;
			 

	
	public b
		if (that == null)
			return false;
	

	}

	
	 * 
	 * 
	 
	@Override
		ublic int hashC ode() {L

		return list.hashCode();

		
			verride
				lic int compareTo(getMyInt_args other) {
			f
			

		
		 nt lastComparison = 0;
		 
		return 0;
			 
			
				ic _Fields fiel
			turn _Fi
				
			
		u

		
		  ic vo
		 * d write(org.a
		 ch
		
			
			verride
				
			blic String to
		S

		
		 b.append(")");
		 et
		
			
		u

		// check for sub-struct validi
		

		rivate void writeObject(java.io.ObjectOutpu
			ry {
			write(new org.apache.th
		}

		}
			
		

		try {
			// it doesn't seem
			
		

		}
	}
	

	private static class getMy
		

		}
		
		rivate static class get
		
		

			i
	 	while (true) {
	 		
				if (schemeField.type == org.apache.thrift.pr
					break;
				}
		

						org.apache.thrift.protocol.TPr
				}
		

			iprot.r
	
			// check for required 
			struct.validate(

	

			struct.validate();
		
		

			oprot.writeStructEnd();
		}
		
		
	

		public getMyInt_argsTupleSc
			return new getMyInt_argsTupleScheme();
		

	
	 * 
	 * 
	 
	private static class getMyInt_a
		
		

			TTupleProtocol oprot = (TTupleProtocol) pr
		}
	

		public void read(org.apache.thrift.protocol.TProtocol p
			TTupleProtocol 
		}
			
				
			
				 
			
			lic st

		
	p

	private static final Map<Class<? extends ISc
		tatic {
		schemes.put(S
			chemes.put(TupleSche

		
		ublic int success;
	/

		SU
	 * CESS((short)0, "success")
	 * 
	 
		;
		
			rivate static final Map<String, _Fiel
		

			for (_Fields fi
				byName.put(
			}
		}
		
		

		 */
		public static _Fields findByThriftI
			switch(fieldId) 
				case 0: // S
					return SUCCESS;
				default: 
					return nul
		

	
		/**
			* Find the _F

		 */
		public static _Fields findByThriftId
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentExcepti
				eturn fields;
			
				
		/

		 */
		

		}
	
		private final short _thriftId;

		
		_Fields(short thriftId, St
			_thriftId = thriftI
			_fieldName = field

		
		

		}
	
		public String getFieldName() {
			return _fieldName;
		}

		

		rivate static final int __SUCCESS_ISSET_ID = 0;
		rivate byte __isset_bitfie
			blic getMyInt_result()
		
		
			blic getMyInt_result(
			nt success) {
				is();
			h
		s
		
	

	 * Performs a deep copy on <i>other</i>.
		*/
	p

		this.success = other.success;
		
	

		return new getMyInt_result(this);
		
	

	public vo
		setSuccessIsSet(false);
		this.success = 0;
		

		
		ublic int getSuccess() {
		return this.su
		
		
	p

		setSuccessIsSet(true);
		return this;
		
	

		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		
			
					
		** Returns true if field success is set (ha
			blic boolean isSetSuccess() {
		r
	}

	public void setSuccessIsSet(boolean value) {
		__iss
			
			// 
			
			blic void setFieldValue(_Fields field, Object value) 
					{
		switch (field) {
			ase SUCCESS:
			
		

				setSuccess((Integer)value);
			}
			break;
		
		

	

		switch (field) {
				
			ase SUCCESS:
			return getSuccess();
			
				
				row new IllegalStateException();
					
				
				 Returns true if field co
				ic boolean isSet(_
					field == null) {
						w new IllegalArgumentException();
						
					
						h (field) {
					 
					urn is
				
					w new IllegalStateException();
				
				
			v
			blic boolean equals(Ob

			return false;
			// 
			f (that instanceof
			

		
				
			

			f (that == null)
			return false;
				
				olean this_present_success = 
				olean that_present_succe
				 (this_present_success
			i
				return false;
			if (this.success != tha
			

	

	}
		
			verride
		u
		

		boolean present_success = true;

		if (prese
			list.add(success);
				
			
			eturn list.hashCode();
			
				
			v
			blic int compareTo(getMyInt_resu
			f (!getClass().equals(other.
				eturn getClass().getName().co
				
			
		i

		lastCompa
		if (lastComparison != 0) {
				
			return lastComparison;
			
			f (isSetSuccess()) {
				astComparison = org.apache.thrift
				f (lastComparison != 0) {
				
			

		



		return _Fields.findByThriftId(fieldId);
		
		
	}
			

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			 

	}
	
		ublic void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override

	pub
	 * ic String toString() {
	 * 
	 
		StringBuilder sb = new StringBuilder("getMyInt_result(");
		boolean f irst = 

		sb.append(this.success);

		sb.appen
			eturn sb.toString();
				
			
		u

		// 
		 
		 
		rivate void writeObject(java.io.ObjectOutputStream 
			ry { 
			rite(new org
				atch (org
			hrow new
				
			
		

		try
		 // it doesn't seem like you should have to do this, but java serializat isset
		 * bitfield = 0;
		 re
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
			
				
			
		

		pub
		 return new getMyInt_resultStandardScheme();
		 
		
			
		r

		public void read(org.apache.th
			org.apache.thrift.protocol.TFie

			while (true) {
				schemeField = iprot.
				if (schemeField.type =
			

				switch (schemeField.id) {
					case 0: // SUCC
			

							struct.setSuccessIsSet(tr
						} else {
			
		

					default:
						org.apache.thrift.protocol.T
		

			}	iprot
		
			// check f
		

	
	 public void write(org.apache.thrift.pro
	 	s
	
			oprot.writeStructBeg
			if (struct.isSetSuccess(
			
		

				oprot.writeFieldEnd();
			}
		

		}
	
		

	p

			return new getM
		}
	}

	private static class getMyInt_resultTuple
		
		@Override
		

			BitSet optionals = n
			if (struct.is
		

			o
	 * rot.writeBitSet(optionals, 1);
	 * 
	 
			if (struct.isSetSuccess
				int elem332 = struct
		

		}
		
			Override
		p
		

			if (incoming.get(0)) {
				struct.success
				struc
			}
				
			
				 
			
			

		b
	p

	private static final org.apache.thrift.proto
		
		rivate 
			atic {

		s
		
	

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating t
	 em
	public enum _Fields implements org.ap
		A((short)1, "a")
			
		

		
		static 
			for (_Fields fie
			
			}
		

		/**
		 * Find the _Fields constant that m
		 */
			ublic static 
			switch(fieldId) {
				case 1: // A 
					return A;
		

			}
		}
			

		 * Find the _Fields constant that matches field
		 * if it is not found.
		 */
			ublic static _Fields findByThriftIdOrThr
				Fields fields
			if (fields == null) throw n
				eturn fields;
		}

		/**
		

		public s
			return byName.get(nam
		}

		private final short _thriftId;
		private final String
		
			Fields(short

			_fieldName = fieldName
		

		public s
			return _thriftId;
		}
			
		p

		}

		
		/ isset id assignments
			blic use_subdir_struct
		
		
			blic use_subdir_struct_args(
			 a) {
				is();
			h
		
		
	/

	 */
		ublic use_subdir_struct_args(use_subdir
		

		}
		
	

		return new use_subdir_struct_args(this);
		
	

	public vo
		this.a = null;
		
		

		ublic A getA() {
		return this.a;
			
		
			blic use_subdir_st
		t
		return this;
		
		
	p

	}
		
		** Returns true if field a is se
		ublic boolean is
			eturn this.a 
		
	

		if (!value) {
			this
			
					
		
			
		u
		

			if (value == null) {
				uns
			} else {
			// 
				setA((A)value);
					
			}
			break;
		
		

	
		ublic Object getFieldValue(_Fields field) {
			witch (field) {
		c
		

		}

		
				
			
			* Returns true if field 
			blic boolean i
				 (field == null) {
				hrow new IllegalArgumentException();
					
				
				itch (field) {
				e A:
					urn isSetA();
						
						 new IllegalStateExce
						
					
						ide
					c
					that =
				turn fal
					that instanceof use_subdir_struct_args)
				e
				turn false;
			
			

			f (that == null)
			// 
			return false;
		

		boolean that_present_a = true && that.isSetA();
				
			f (this_present_a 

				return false;
			if (!this.a.equals(that
				return false;
				
				
			e
			
			
		O

		

		boolean present_a = true && (isSetA());
		list.add(present_a);
			f (present_a)
			
	

	}

		Override
		ublic int compareTo(use_subdir_struct_args other) {
				
			f (!getClass().equals(other.getClass())) {
			return getClass().getName().comp
			
				
			n
			
			astComparison = Boolea
				 (lastComparison != 0)
			r
		}

			lastComp
			if (lastComparison != 0) {
				
				return lastComparison;
			}
			
				turn 0;
				
				
			b
		r

	

	


		
		
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			

	}
			 

	@Override
	public S
		StringBuilder sb = new StringBuilder("use_subdir_struct_args(");
		boolean first = true;
	

		if (this.a == nu

			s
	 * .append("null");
	 * 
	 
		} else {
			sb.append(this .a);}

		sb.append(")");

		
			
				lic void validate() throws org.apache.th
			/
		/

			a.
		 
		 
		
			ivate  void writeO
			y {
				ite(new org.apa
			catch (o
				row new java
			
		

		riv
		 ry {  it d
		 * esn't seem li
		 re
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
			
				
			
		

		pub
		 return new use_subdir_struct_argsStandardScheme();
		 
		
			
		r

		public void read(org.apache.th
			org.apache.thrift.protocol.TFie

			while (true) {
				schemeField = iprot.
				if (schemeField.type =
			

				switch (schemeField.id) {
					case 1: // A
			

							struct.a.read(iprot);
							struct.setAIsS
			
		

						break;
					default:
		

				iprot.readFieldEnd();	}
			iprot.
		
		

		}
	 
	 pu
			struct.validate();
		
			oprot.writeStructBegin(STRUCT_DESC);
			
		

				oprot.writeFieldEnd();
			}
		

		}
	
		

	p

			return new use_subdir
		}
	}

	private static class use_subdir_struct_argsTupleScheme 
		
		@Override
		

			BitSet optionals = new Bit
			if (struct.isSetA()
		

			o
	 * rot.writeBitSet(optionals, 1);
	 * 
	 
			if (struct.isSetA()) {
				struct.a.write(oprot);
		

	
		@Override
			ublic void read(org.
			
		

				struct.a = new A();
				struct.a.read(
				struct.setA
			}
				
			
				 
			
			

		b
	p

	private static final org.apache.thrift.proto
		
		rivate static
			atic {

		s
		
	

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating t
	 em
	public enum _Fields implements org.ap
		SUCCESS((short)0, "s
			
		

		
		static {
			for (_Fields field : E
			
			}
		

		/**
		 * Find the _Fields constant that m
		 */
			ublic static 
			switch(fieldId) {
				case 0: // SUCCESS 
					return SUC
		

			}
		}
			

		 * Find the _Fields constant that matches fieldId, throwing
		 * if it is not found.
		 */
			ublic static _Fields findByThriftIdOrThrow(int field
				Fields fields
			if (fields == null) throw new IllegalAr
				eturn fields;
		}

		/**
		

		public s
			return byName.get(nam
		}

		private final short _thriftId;
		private final String _fiel
		
			Fields(short thrif

			_fieldName = fieldName
		

		public s
			return _thriftId;
		}
			
		p

		}

		
		/ isset id assignments
			blic use_subdir_struct
		
		
			blic use_subdir_struct_result(
			 success) {
				is();
			h
		
		
	/

	 */
		ublic use_subdir_struct_result(use_subd
		

		}
		
	

		return new use_subdir_struct_result(this);
		
	

	public vo
		this.success = null;
		
		

		ublic A getSuccess() {
		return this.success;
			
		
			blic use_subdir_struct_r
		t
		return this;
		
		
	p

	}
		
		** Returns true if field success
		ublic boolean isSetSuc
			eturn this.success 
		
	

		if (!value) {
			this
			
					
		
			
		u
		

			if (value == null) {
				uns
			} else {
			// 
				setSuccess((A)value);
					
			}
			break;
		
		

	
		ublic Object getFieldValue(_Fields field) {
			witch (field) {
		c
		

		}

		
				
			
			* Returns true if field 
			blic boolean i
				 (field == null) {
				hrow new IllegalArgumentException();
					
				
				itch (field) {
				e SUCCESS:
					urn isSetSuccess();
						
						 new IllegalStateException(
						
					
						ide
					c
					that =
				turn fal
					that instanceof use_subdir_struct_result)
				e
				turn false;
			
			

			f (that == null)
			// 
			return false;
		

		boolean that_present_success = true && that.isSetSuccess();
				
			f (this_present_su

				return false;
			if (!this.success.equals(that
				return false;
				
				
			e
			
			
		O

		

		boolean present_success = true && (isSetSuccess());
		list.add(present_success);
			f (present_success)
			
	

	}

		Override
		ublic int compareTo(use_subdir_struct_result other) {
				
			f (!getClass().equals(other.getClass())) {
			return getClass().getName().comp
			
				
			n
			
			astComparison = Boolean.valu
				 (lastComparison != 0) {
			r
		}

			lastComp
			if (lastComparison != 0) {
				
				return lastComparison;
			}
			
				turn 0;
				
				
			b
		r

	

	


		
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			

	}
			 

	@Override
	public S
		StringBuilder sb = new StringBuilder("use_subdir_struct_result(");
		boolean first = true;
	

		if (this.success == null

			s
	 * .append("null");
	 * 
	 
		} else {
			sb.append(this.suc cess);}

		sb.append(")");

		
			
				lic void validate() throws org.apache.th
			/
		/

			su
		 
		 
		
			ivate  void writeO
			y {
				ite(new org.apache.
			catch (o
				row new java
			
		

		riv
		 ry {  it d
		 * esn't seem li
		 re
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
			
				
			
		

		pub
		 return new use_subdir_struct_resultStandardScheme();
		 
		
			
		r

		public void read(org.apache.th
			org.apache.thrift.protocol.TFie

			while (true) {
				schemeField = iprot.
				if (schemeField.type =
			

				switch (schemeField.id) {
					case 0: // SUCC
			

							struct.success.read(iprot
							struct.setSucc
			
		

						break;
					default:
		

				iprot.readFieldEnd();	}
			iprot.
		
		

		}
	 
	 pu
			struct.validate();
		
			oprot.writeStructBegin(STRUCT_DESC)
			
		

				oprot.writeFieldEnd();
			}
		

		}
	
		

	p

			return new use_subdir_struct_
		}
	}

	private static class use_subdir_struct_resultTupleScheme ex
		
		@Override
		

			BitSet optionals = new BitSet
			if (struct.isSetSucces
		

			o
	 * rot.writeBitSet(optionals, 1);
	 * 
	 
			if (struct.isSetSuccess()) {
				struct.success.write(oprot);
		

	
		@Override
			ublic void read(org.apa
			
		

				struct.success = new A();
				struct.success
				struct.setSucce
			}
				
			
				 
			
			

		b
	p

	private static final org.apache.thrift.proto
		
		rivate static fin
			atic {

		s
		
	

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating t
	 em
	public enum _Fields implements org.ap
		NEW_MESSAGE((short)1
			
		

		
		static {
			for (_Fields field : Enum
			
			}
		

		/**
		 * Find the _Fields constant that m
		 */
			ublic static 
			switch(fieldId) {
				case 1: // NEW_MESSAGE 
					return NEW
		

			}
		}
			

		 * Find the _Fields constant that matches fieldId, throwing an ex
		 * if it is not found.
		 */
			ublic static _Fields findByThriftIdOrThrow(int fieldId) {
				Fields fields
			if (fields == null) throw new IllegalArgument
				eturn fields;
		}

		/**
		

		public s
			return byName.get(nam
		}

		private final short _thriftId;
		private final String _fieldNa
		
			Fields(short thriftId

			_fieldName = fieldName
		

		public s
			return _thriftId;
		}
			
		p

		}

		
		/ isset id assignments
			blic sayHelloWith_args
		
		
			blic sayHelloWith_args(
			tring newMessage) {
				is();
			h
		
		
	/

	 */
		ublic sayHelloWith_args(sayHelloWith_ar
		

		}
		
	

		return new sayHelloWith_args(this);
		
	

	public vo
		this.newMessage = null;
		
		

		ublic String getNewMessag
		return this.newMessage;
			
		
			blic sayHelloWith_args setN
		t
		return this;
		
		
	p

	}
		
		** Returns true if field newMess
	p

	}
		
			blic void setNewMessageIsSet(boolean value) {
					
		if (!value) {
			this.newMessage = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switc
			ase NEW_MESSAGE:
			// 
			if (value == null) {
					
				unsetNewMessage();
			} else {
			
		

	
		}
			
		
	p

		case NEW_MESSAGE:

		
				
			
			hrow new IllegalStateExc
			
				
				 Returns true if field corresponding to fieldID is set (has been
					ic boo
				 
				hrow new IllegalArgumentE
				
					
						h (field) {
						NEW_MESSAGE:
					urn isSe
						
					w
					
				
					ride
				l
				 (that == null)
			r
			f (that instanceof say

			eturn false;
			// 
			
		

		if (that == null)
				
			return false;

			oolean this_present_newMessage = tru
			oolean that_present_newMessage =
				 (this_present_newMessage || that_present_newM
				f (!(this_present_newMessage && tha
				return false;
				f (!this.newMessage.eq
				
			
			
		r

	

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();
			
		b
		

			list.add(newMessage);

		return li
		
				
			
			verride
			blic int compareTo(sayHelloWith
				 (!getClass().equ
			r
			
			
				t lastComparison = 0;
				
			a
		i

		}
		if (isSetNewMessage()) {
				
			lastComparison = org.apache.thrift.TBaseHelpe
			if (lastComparison != 0) {
				return lastComparison
				
				
			e
		

	p

	

	public void read(org.apache.thrift.pro
		ocol.TProtocol iprot) throws org.apache.thrift.TException {
		
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
			

	
			 

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}
		
		Override
	p

		boolean first = true;

	
	 * 
	 * 
	 
		sb.append("newMessage:");
		if (this.newMes sage == null)	

			sb.append(this.newMessage);

		first = 
			b.append(")");
				turn sb.toString();
			
		

		// 
		 / check for sub-struct validity
		 
		
			ivate  void writeO
			y {
				ite(new org.apa
			catch (o
				row new java
			
		

		riv
		 ry {  it d
		 * esn't seem li
		 re
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
			
				
			
		

		pub
		 return new sayHelloWith_argsStandardScheme();
		 
		
			
		r

		public void read(org.apache.th
			org.apache.thrift.protocol.TFie

			while (true) {
				schemeField = iprot.
				if (schemeField.type =
			

				switch (schemeField.id) {
					case 1: // NEW_
			

							struct.setNewMessageIsSet
						} else {
			
		

					default:
						org.apache.thrift.protoco
		

			}	iprot.readStruct
		
			// check for required 
		

	
	 public void write(org.apache.thrift.pro
	 	s
	
			oprot.writeStructBegin(STR
			if (struct.newMessage != null
			
		

				oprot.writeFieldEnd();
			}
		

		}
	
		

	p

			return new sayHelloWith_ar
		}
	}

	private static class sayHelloWith_argsTupleScheme exten
		
		@Override
		

			BitSet optionals = new Bit
			if (struct.isSetNew
		

			o
	 * rot.writeBitSet(optionals, 1);
	 * 
	 
			if (struct.isSetNewMessage())
				String elem334 = struct.ne
		

		}
		
			Override
		p
		

			if (incoming.get(0)) {
				struct.newMess
				struct.setN
			}
				
			
				 
			
			

		b
	p

	private static final org.apache.thrift.proto
		
		rivate static
			atic {

		s
		
	

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating t
	 em
	public enum _Fields implements org.ap
		SUCCESS((short)0, "s
			
		

		
		static {
			for (_Fields field : E
			
			}
		

		/**
		 * Find the _Fields constant that m
		 */
			ublic static 
			switch(fieldId) {
				case 0: // SUCCESS 
					return SUC
		

			}
		}
			

		 * Find the _Fields constant that matches fieldId, throwing
		 * if it is not found.
		 */
			ublic static _Fields findByThriftIdOrThrow(int field
				Fields fields
			if (fields == null) throw new IllegalAr
				eturn fields;
		}

		/**
		

		public s
			return byName.get(nam
		}

		private final short _thriftId;
		private final String _fiel
		
			Fields(short thrif

			_fieldName = fieldName
		

		public s
			return _thriftId;
		}
			
		p

		}

		
		/ isset id assignments
			blic sayHelloWith_resu
		
		
			blic sayHelloWith_result(
			tring success) {
				is();
			h
		
		
	/

	 */
		ublic sayHelloWith_result(sayHelloWith_
		

		}
		
	

		return new sayHelloWith_result(this);
		
	

	public vo
		this.success = null;
		
		

		ublic String getSucces
		return this.success;
			
		
			blic sayHelloWith_result
		t
		return this;
		
		
	p

	}
		
		** Returns true if field success
	p

	}
		
			blic void setSuccessIsSet(boolean value) {
					
		if (!value) {
			this.success = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switc
			ase SUCCESS:
			// 
			if (value == null) {
					
				unsetSuccess();
			} else {
			
		

	
		}
			
		
	p

		case SUCCESS:

		
				
			
			hrow new IllegalStateExc
			
				
				 Returns true if field corresponding to fieldID is set (has been
					ic boo
				 
				hrow new IllegalArgumentE
				
					
						h (field) {
						SUCCESS:
					urn isSe
						
					w
					
				
					ride
				l
				 (that == null)
			r
			f (that instanceof say

			eturn false;
			// 
			
		

		if (that == null)
				
			return false;

			oolean this_present_success = true &
			oolean that_present_success =
				 (this_present_success || that_present_suc
				f (!(this_present_success && tha
				return false;
				f (!this.success.equal
				
			
			
		r

	

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();
			
		b
		

			list.add(success);

		return li
		
				
			
			verride
			blic int compareTo(sayHelloW
				 (!getClass().equ
			r
			
			
				t lastComparison = 0;
				
			a
		i

		}
		if (isSetSuccess()) {
				
			lastComparison = org.apache.thrift.TBaseHelpe
			if (lastComparison != 0) {
				return lastComparison
				
				
			e
		

	p

	

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
			

	
			 

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}
		
		Override
	p

		boolean first = true;

	
	 * 
	 * 
	 
		sb.append("success:");
		if (this.success ==  null) {	

			sb.append(this.success);

		first = 
			b.append(")");
				turn sb.toString();
			
		

		// 
		 / check for sub-struct validity
		 
		
			ivate  void writeO
			y {
				ite(new org.apache.t
			catch (o
				row new java
			
		

		riv
		 ry {  it d
		 * esn't seem li
		 re
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
			
				
			
		

		pub
		 return new sayHelloWith_resultStandardScheme();
		 
		
			
		r

		public void read(org.apache.th
			org.apache.thrift.protocol.TFie

			while (true) {
				schemeField = iprot.
				if (schemeField.type =
			

				switch (schemeField.id) {
					case 0: // SUCC
			

							struct.setSuccessIsSet(tr
						} else {
			
		

					default:
						org.apache.thrift.proto
		

			}	iprot.readStructEnd(
		
			// check for required fields o
		

	
	 public void write(org.apache.thrift.pro
	 	s
	
			oprot.writeStructBegin(STRUCT_
			if (struct.success != null) {
			
		

				oprot.writeFieldEnd();
			}
		

		}
	
		

	p

			return new sayHelloWith_result
		}
	}

	private static class sayHelloWith_resultTupleScheme extends T
		
		@Override
		

			BitSet optionals = new BitSet(
			if (struct.isSetSuccess
		

			o
	 * rot.writeBitSet(optionals, 1);
	 * 
	 
			if (struct.isSetSuccess()) {
				String elem336 = struct.succes
		

		}
		
			Override
		p
		

			if (incoming.get(0)) {
				struct.success
				struct.setSucces
			}
				
			
				 
			
			

		b
	p

	private static final org.apache.thrift.proto
		
		rivate static fina
			atic {

		s
		
	

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating t
	 em
	public enum _Fields implements org.ap
		MESSAGE_ARGS((short)
			
		

		
		static {
			for (_Fields field : EnumS
			
			}
		

		/**
		 * Find the _Fields constant that m
		 */
			ublic static 
			switch(fieldId) {
				case 1: // MESSAGE_ARGS 
					return MES
		

			}
		}
			

		 * Find the _Fields constant that matches fieldId, throwing an exce
		 * if it is not found.
		 */
			ublic static _Fields findByThriftIdOrThrow(int fieldId) {
				Fields fields
			if (fields == null) throw new IllegalArgumentEx
				eturn fields;
		}

		/**
		

		public s
			return byName.get(nam
		}

		private final short _thriftId;
		private final String _fieldNam
		
			Fields(short thriftId,

			_fieldName = fieldName
		

		public s
			return _thriftId;
		}
			
		p

		}

		
		/ isset id assignments
			blic whatDoYouSay_args
		
		
			blic whatDoYouSay_args(
			tring messageArgs) {
				is();
			h
		
		
	/

	 */
		ublic whatDoYouSay_args(whatDoYouSay_ar
		

		}
		
	

		return new whatDoYouSay_args(this);
		
	

	public vo
		this.messageArgs = null;
		
		

		ublic String getMessageArg
		return this.messageArgs;
			
		
			blic whatDoYouSay_args setMe
		t
		return this;
		
		
	p

	}
		
		** Returns true if field message
	p

	}
		
			blic void setMessageArgsIsSet(boolean value) {
					
		if (!value) {
			this.messageArgs = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switc
			ase MESSAGE_ARGS:
			// 
			if (value == null) {
					
				unsetMessageArgs();
			} else {
			
		

	
		}
			
		
	p

		case MESSAGE_ARGS:

		
				
			
			hrow new IllegalStateExc
			
				
				 Returns true if field corresponding to fieldID is set (has been
					ic boo
				 
				hrow new IllegalArgumentE
				
					
						h (field) {
						MESSAGE_ARGS:
					urn isSe
						
					w
					
				
					ride
				l
				 (that == null)
			r
			f (that instanceof wha

			eturn false;
			// 
			
		

		if (that == null)
				
			return false;

			oolean this_present_messageArgs = tr
			oolean that_present_messageArgs =
				 (this_present_messageArgs || that_present_mess
				f (!(this_present_messageArgs && tha
				return false;
				f (!this.messageArgs.e
				
			
			
		r

	

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();
			
		b
		

			list.add(messageArgs);

		return li
		
				
			
			verride
			blic int compareTo(whatDoYouSay_
				 (!getClass().equ
			r
			
			
				t lastComparison = 0;
				
			a
		i

		}
		if (isSetMessageArgs()) {
				
			lastComparison = org.apache.thrift.TBaseHelpe
			if (lastComparison != 0) {
				return lastComparison
				
				
			e
		

	p

	

	public void read(org.apache.thrift.pro
		ocol.TProtocol iprot) throws org.apache.thrift.TException {
		
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
			

	
			 

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}
		
		Override
	p

		boolean first = true;

	
	 * 
	 * 
	 
		sb.append("messageArgs:");
		if (this.messag eArgs == null	

			sb.append(this.messageArgs);

		first = 
			b.append(")");
				turn sb.toString();
			
		

		// 
		 / check for sub-struct validity
		 
		
			ivate  void writeO
			y {
				ite(new org.apa
			catch (o
				row new java
			
		

		riv
		 ry {  it d
		 * esn't seem li
		 re
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
			
				
			
		

		pub
		 return new whatDoYouSay_argsStandardScheme();
		 
		
			
		r

		public void read(org.apache.th
			org.apache.thrift.protocol.TFie

			while (true) {
				schemeField = iprot.
				if (schemeField.type =
			

				switch (schemeField.id) {
					case 1: // MESS
			

							struct.setMessageArgsIsSe
						} else {
			
		

					default:
						org.apache.thrift.protoco
		

			}	iprot.readStruct
		
			// check for required 
		

	
	 public void write(org.apache.thrift.pro
	 	s
	
			oprot.writeStructBegin(STR
			if (struct.messageArgs != nul
			
		

				oprot.writeFieldEnd();
			}
		

		}
	
		

	p

			return new whatDoYouSay_ar
		}
	}

	private static class whatDoYouSay_argsTupleScheme exten
		
		@Override
		

			BitSet optionals = new Bit
			if (struct.isSetMes
		

			o
	 * rot.writeBitSet(optionals, 1);
	 * 
	 
			if (struct.isSetMessageArgs()
				String elem338 = struct.me
		

		}
		
			Override
		p
		

			if (incoming.get(0)) {
				struct.message
				struct.setM
			}
				
			
				 
			
			

		b
	p

	private static final org.apache.thrift.proto
		
		rivate static
			atic {

		s
		
	

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating t
	 em
	public enum _Fields implements org.ap
		SUCCESS((short)0, "s
			
		

		
		static {
			for (_Fields field : E
			
			}
		

		/**
		 * Find the _Fields constant that m
		 */
			ublic static 
			switch(fieldId) {
				case 0: // SUCCESS 
					return SUC
		

			}
		}
			

		 * Find the _Fields constant that matches fieldId, throwing
		 * if it is not found.
		 */
			ublic static _Fields findByThriftIdOrThrow(int field
				Fields fields
			if (fields == null) throw new IllegalAr
				eturn fields;
		}

		/**
		

		public s
			return byName.get(nam
		}

		private final short _thriftId;
		private final String _fiel
		
			Fields(short thrif

			_fieldName = fieldName
		

		public s
			return _thriftId;
		}
			
		p

		}

		
		/ isset id assignments
			blic whatDoYouSay_resu
		
		
			blic whatDoYouSay_result(
			tring success) {
				is();
			h
		
		
	/

	 */
		ublic whatDoYouSay_result(whatDoYouSay_
		

		}
		
	

		return new whatDoYouSay_result(this);
		
	

	public vo
		this.success = null;
		
		

		ublic String getSucces
		return this.success;
			
		
			blic whatDoYouSay_result
		t
		return this;
		
		
	p

	}
		
		** Returns true if field success
	p

	}
		
			blic void setSuccessIsSet(boolean value) {
					
		if (!value) {
			this.success = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switc
			ase SUCCESS:
			// 
			if (value == null) {
					
				unsetSuccess();
			} else {
			
		

	
		}
			
		
	p

		case SUCCESS:

		
				
			
			hrow new IllegalStateExc
			
				
				 Returns true if field corresponding to fieldID is set (has been
					ic boo
				 
				hrow new IllegalArgumentE
				
					
						h (field) {
						SUCCESS:
					urn isSe
						
					w
					
				
					ride
				l
				 (that == null)
			r
			f (that instanceof wha

			eturn false;
			// 
			
		

		if (that == null)
				
			return false;

			oolean this_present_success = true &
			oolean that_present_success =
				 (this_present_success || that_present_suc
				f (!(this_present_success && tha
				return false;
				f (!this.success.equal
				
			
			
		r

	

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();
			
		b
		

			list.add(success);

		return li
		
				
			
			verride
			blic int compareTo(whatDoYou
				 (!getClass().equ
			r
			
			
				t lastComparison = 0;
				
			a
		i

		}
		if (isSetSuccess()) {
				
			lastComparison = org.apache.thrift.TBaseHelpe
			if (lastComparison != 0) {
				return lastComparison
				
				
			e
		

	p

	

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
			

	
			 

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}
		
		Override
	p

		boolean first = true;

	
	 * 
	 * 
	 
		sb.append("success:");
		if (this.success == nu ll) {	

			sb.append(this.success);

		first = 
			b.append(")");
				turn sb.toString();
			
		

		// 
		 / check for sub-struct validity
		 
		
			ivate  void writeO
			y {
				ite(new org.apache.thr
			catch (o
				row new java
			
		

		riv
		 ry {  it d
		 * esn't seem li
		 re
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
			
				
			
		

		pub
		 return new whatDoYouSay_resultStandardScheme();
		 
		
			
		r

		public void read(org.apache.th
			org.apache.thrift.protocol.TFie

			while (true) {
				schemeField = iprot.
				if (schemeField.type =
			

				switch (schemeField.id) {
					case 0: // SUCC
			

							struct.setSuccessIsSet(tr
						} else {
			
		

					default:
						org.apache.thrift.p
		

			}	iprot.readStructEnd();
		
			// check for required fields of pr
		

	
	 public void write(org.apache.thrift.pro
	 	s
	
			oprot.writeStructBegin(STRUCT_DE
			if (struct.success != null) {
			
		

				oprot.writeFieldEnd();
			}
		

		}
	
		

	p

			return new whatDoYouSay_resultTu
		}
	}

	private static class whatDoYouSay_resultTupleScheme extends T
		
		@Override
		

			BitSet optionals = new BitSet();
			if (struct.isSetSuccess()
		

			o
	 * rot.writeBitSet(optionals, 1);
	 * 
	 
			if (struct.isSetSuccess()) {
				String elem340 = struct.success;
		

		}
		
			Override
		p
		

			if (incoming.get(0)) {
				struct.success
				struct.setSuccessI
			}
				
			
				 
			
			

		b
	p

	private static final org.apache.thrift.proto
		
		rivate static final 
			atic {

		s
		
	

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating t
	 em
	public enum _Fields implements org.ap
		MESSAGE_RESULT((shor
			
		

		
		static {
			for (_Fields field : EnumSet
			
			}
		

		/**
		 * Find the _Fields constant that m
		 */
			ublic static 
			switch(fieldId) {
				case 1: // MESSAGE_RESULT 
					return MES
		

			}
		}
			

		 * Find the _Fields constant that matches fieldId, throwing an exceptio
		 * if it is not found.
		 */
			ublic static _Fields findByThriftIdOrThrow(int fieldId) {
				Fields fields
			if (fields == null) throw new IllegalArgumentExcept
				eturn fields;
		}

		/**
		

		public s
			return byName.get(nam
		}

		private final short _thriftId;
		private final String _fieldName;
		
			Fields(short thriftId, S

			_fieldName = fieldName
		

		public s
			return _thriftId;
		}
			
		p

		}

		
		/ isset id assignments
			blic sayAgain_args() {
		
		
			blic sayAgain_args(
			tring messageResult) {
				is();
			h
		
		
	/

	 */
		ublic sayAgain_args(sayAgain_args other
		

		}
		
	

		return new sayAgain_args(this);
		
	

	public vo
		this.messageResult = null
		
		

		ublic String getMessageResul
		return this.messageResult;
			
		
			blic sayAgain_args setMessageR
		t
		return this;
		
		
	p

	}
		
		** Returns true if field message
	p

	}
		
			blic void setMessageResultIsSet(boolean value) {
					
		if (!value) {
			this.messageResult = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switc
			ase MESSAGE_RESULT:
			// 
			if (value == null) {
					
				unsetMessageResult();
			} else {
			
		

	
		}
			
		
	p

		case MESSAGE_RESULT:

		
				
			
			hrow new IllegalStateExc
			
				
				 Returns true if field corresponding to fieldID is set (has been
					ic boo
				 
				hrow new IllegalArgumentE
				
					
						h (field) {
						MESSAGE_RESULT:
					urn isSe
						
					w
					
				
					ride
				l
				 (that == null)
			r
			f (that instanceof say

			eturn false;
			// 
			
		

		if (that == null)
				
			return false;

			oolean this_present_messageResult = 
			oolean that_present_messageResult =
				 (this_present_messageResult || that_present_mess
				f (!(this_present_messageResult && tha
				return false;
				f (!this.messageResult
				
			
			
		r

	

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();
			
		b
		

			list.add(messageResult);

		return li
		
				
			
			verride
			blic int compareTo(sayAgain_args o
				 (!getClass().equ
			r
			
			
				t lastComparison = 0;
				
			a
		i

		}
		if (isSetMessageResult()) {
				
			lastComparison = org.apache.thrift.TBaseHelpe
			if (lastComparison != 0) {
				return lastComparison
				
				
			e
		

	p

	

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
			

	
			 

		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}
		
		Override
	p

		boolean first = true;

	
	 * 
	 * 
	 
		sb.append("messageResult:");
		if (this.messag eResult == nu	

			sb.append(this.messageResult);

		first = 
			b.append(")");
				turn sb.toString();
			
		

		// 
		 / check for sub-struct validity
		 
		
			ivate  void writeO
			y {
				ite(new org.apa
			catch (o
				row new java
			
		

		riv
		 ry {  it d
		 * esn't seem li
		 re
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
			
				
			
		

		pub
		 return new sayAgain_argsStandardScheme();
		 
		
			
		r

		public void read(org.apache.th
			org.apache.thrift.protocol.TFie

			while (true) {
				schemeField = iprot.
				if (schemeField.type =
			

				switch (schemeField.id) {
					case 1: // MESS
			

							struct.setMessageResultIs
						} else {
			
		

					default:
						org.apache.thrift.pro
		

			}	iprot.readStruct
		
			// check for required 
		

	
	 public void write(org.apache.thrift.pro
	 	s
	
			oprot.writeStructBegin(STR
			if (struct.messageResult != n
			
		

				oprot.writeFieldEnd();
			}
		

		}
	
		

	p

			return new sayAgain_argsTu
		}
	}

	private static class sayAgain_argsTupleScheme exten
		
		@Override
		

			BitSet optionals = new Bit
			if (struct.isSetMes
		

			o
	 * rot.writeBitSet(optionals, 1);
	 * 
	 
			if (struct.isSetMessageResult
				String elem342 = struct.me
		

		}
		
			Override
		p
		

			if (incoming.get(0)) {
				struct.message
				struct.setM
			}
				
			
				 
			
			

		b
	p

	private static final org.apache.thrift.proto
		
		rivate static
			atic {

		s
		
	

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating t
	 em
	public enum _Fields implements org.ap
		SUCCESS((short)0, "s
			
		

		
		static {
			for (_Fields field : E
			
			}
		

		/**
		 * Find the _Fields constant that m
		 */
			ublic static 
			switch(fieldId) {
				case 0: // SUCCESS 
					return SUC
		

			}
		}
			

		 * Find the _Fields constant that matches fieldId, throwing
		 * if it is not found.
		 */
			ublic static _Fields findByThriftIdOrThrow(int field
				Fields fields
			if (fields == null) throw new IllegalAr
				eturn fields;
		}

		/**
		

		public s
			return byName.get(nam
		}

		private final short _thriftId;
		private final String _fiel
		
			Fields(short thrif

			_fieldName = fieldName
		

		public s
			return _thriftId;
		}
			
		p

		}

		
		/ isset id assignments
			blic sayAgain_result()
		
		
			blic sayAgain_result(
			tring success) {
				is();
			h
		
		
	/

	 */
		ublic sayAgain_result(sayAgain_result o
		

		}
		
	

		return new sayAgain_result(this);
		
	

	public vo
		this.success = null;
		
		

		ublic String getSucces
		return this.success;
			
		
			blic sayAgain_result set
		t
		return this;
		
		
	p

	}
		
		** Returns true if field success
	p

	}
		
			blic void setSuccessIsSet(boolean value) {
					
		if (!value) {
			this.success = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switc
			ase SUCCESS:
			// 
			if (value == null) {
					
				unsetSuccess();
			} else {
			
		

	
		}
			
		
	p

		case SUCCESS:

		
				
			
			hrow new IllegalStateExc
			
				
				 Returns true if field corresponding to fieldID is set (has been
					ic boo
				 
				hrow new IllegalArgumentE
				
					
						h (field) {
						SUCCESS:
					urn isSe
						
					w
					
				
					ride
				l
				 (that == null)
			r
			f (that instanceof say

			eturn false;
			// 
			
		

		if (that == null)
				
			return false;

			oolean this_present_success = true &
			oolean that_present_success =
				 (this_present_success || that_present_suc
				f (!(this_present_success && tha
				return false;
				f (!this.success.equal
				
			
			
		r

	

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();
			
		b
		

			list.add(success);

		return li
		
				
			
			verride
			blic int compareTo(sayAgain_
				 (!getClass().equ
			r
			
			
				t lastComparison = 0;
				
			a
		i

		}
		if (isSetSuccess()) {
				
			lastComparison = org.apache.thrift.TBaseHelpe
			if (lastComparison != 0) {
				return lastComparison
				
				
			e
		

	p

	}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sayAgain_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class sayAgain_resultStandardSchemeFactory implements SchemeFactory {
			public sayAgain_resultStandardScheme getScheme() {
				return new sayAgain_resultStandardScheme();
			}
		}

		private static class sayAgain_resultStandardScheme extends StandardScheme<sayAgain_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sayAgain_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.success = iprot.readString();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sayAgain_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					String elem343 = struct.success;
					oprot.writeString(elem343);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sayAgain_resultTupleSchemeFactory implements SchemeFactory {
			public sayAgain_resultTupleScheme getScheme() {
				return new sayAgain_resultTupleScheme();
			}
		}

		private static class sayAgain_resultTupleScheme extends TupleScheme<sayAgain_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sayAgain_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					String elem344 = struct.success;
					oprot.writeString(elem344);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sayAgain_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

}