#
# Autogenerated by Frugal Compiler (1.3.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#



from thrift.Thrift import TApplicationException
from thrift.Thrift import TMessageType
from thrift.Thrift import TType
from tornado import gen
from frugal.subscription import FSubscription

from valid.ttypes import *




class FooSubscriber(object):
    """
    And this is a scope docstring.
    """

    _DELIMITER = '.'

    def __init__(self, provider):
        """
        Create a new FooSubscriber.

        Args:
            provider: FScopeProvider
        """

        self._transport, self._protocol_factory = provider.new()

    @gen.coroutine
    def subscribe_Foo(self, baz, Foo_handler):
        """
        This is an operation docstring.
        
        Args:
            baz: string
            Foo_handler: function which takes Thing
        """

        op = 'Foo'
        prefix = 'foo.bar.%s.qux.' % (baz)
        topic = '%sFoo%s%s' % (prefix, self._DELIMITER, op)

        yield self._transport.subscribe(topic, self._recv_Foo(self._protocol_factory, op, Foo_handler)

    def recv_Foo(self, protocol_factory, op, handler):
        def callback(transport):
            iprot = protocol_factory.get_protocol(transport)
            ctx = iprot.read_request_headers()
            mname, _, _ = iprot.readMessageBegin()
            if mname != op:
                iprot.skip(TType.STRUCT)
                iprot.readMessageEnd()
                raise TApplicationException(TApplicationException.UNKNOWN_METHOD)
            req = Thing()
            req.read(iprot)
            iprot.readMessageEnd()
            handler(ctx, req)
        return callback



    @gen.coroutine
    def subscribe_Bar(self, baz, Bar_handler):
        """
        Args:
            baz: string
            Bar_handler: function which takes Stuff
        """

        op = 'Bar'
        prefix = 'foo.bar.%s.qux.' % (baz)
        topic = '%sFoo%s%s' % (prefix, self._DELIMITER, op)

        yield self._transport.subscribe(topic, self._recv_Bar(self._protocol_factory, op, Bar_handler)

    def recv_Bar(self, protocol_factory, op, handler):
        def callback(transport):
            iprot = protocol_factory.get_protocol(transport)
            ctx = iprot.read_request_headers()
            mname, _, _ = iprot.readMessageBegin()
            if mname != op:
                iprot.skip(TType.STRUCT)
                iprot.readMessageEnd()
                raise TApplicationException(TApplicationException.UNKNOWN_METHOD)
            req = Stuff()
            req.read(iprot)
            iprot.readMessageEnd()
            handler(ctx, req)
        return callback




