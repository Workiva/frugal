#
# Autogenerated by Frugal Compiler (1.3.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#



from thrift.Thrift import TApplicationException
from thrift.Thrift import TMessageType
from thrift.Thrift import TType
from tornado import gen
from frugal.subscription import FSubscription

from valid.ttypes import *




class blahPublisher(object):

    _DELIMITER = '.'

    def __init__(self, provider):
        """
        Create a new blahPublisher.

        Args:
            provider: FScopeProvider
        """

        self._transport, protocol_factory = provider.new()
        self._protocol = protocol_factory.get_protocol(self._transport)

    @gen.coroutine
    def open(self):
        yield self._transport.open()

    @gen.coroutine
    def close(self):
        yield self._transport.close()

    def publish_DoStuff(self, ctx, req):
        """
        Args:
            ctx: FContext
            req: Thing
        """

        op = 'DoStuff'
        prefix = ''
        topic = '%sblah%s%s' % (prefix, self._DELIMITER, op)
        oprot = self._protocol
        self._transport.lock_topic(topic)
        try:
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin(op, TMessageType.CALL, 0)
            req.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()
        finally:
            self._transport.unlock_topic()

