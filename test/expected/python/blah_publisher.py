#
# Autogenerated by Frugal Compiler (1.3.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#



from thrift.Thrift import TMessageType




class blahPublisher(object):
    _DELIMITER = '.'

    def __init__(self, provider):
        """
        Create a new blahPublisher.

        Args:
            provider: FScopeProvider
        """

        self._transport, self._protocol = provider.new()

    def open(self):
        self._transport.open()

    def close(self):
        self._transport.close()

    def publish_DoStuff(self, ctx, req):
        """
        Args:
            ctx: FContext
            req: Thing
        """

        op = 'DoStuff'
        prefix = ''
        topic = '%sblah%s%s' % (prefix, self._DELIMITER, op)
        oprot = self._protocol
        self._transport.lock_topic(topic)
        try:
            oprot.writeRequestHeader(ctx)
            oprot.writeMessageBegin(op, TMessageType.CALL, 0)
            req.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()
        finally:
            self._transport.unlock_topic()

