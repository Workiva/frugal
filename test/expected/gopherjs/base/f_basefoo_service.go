// Autogenerated by Frugal Compiler (2.23.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package base

import (
	"errors"

	"github.com/Workiva/frugal/lib/gopherjs/frugal"
)

// BaseFoo is a service or a client.
type BaseFoo interface {
	BasePing(ctx frugal.Context) (err error)
}

// BaseFooClient is the client.
type BaseFooClient struct {
	call frugal.CallFunc
}

// NewBaseFooClient constructs a BaseFooClient.
func NewBaseFooClient(cf frugal.CallFunc) *BaseFooClient {
	return &BaseFooClient{
		call: cf,
	}
}

// BasePing calls a server.
func (c *BaseFooClient) BasePing(ctx frugal.Context) (err error) {
	args := &BaseFooBasePingArgs{}
	res := &BaseFooBasePingResult{}
	err = c.call(ctx, "baseFoo", "basePing", args, res)
	if err != nil {
		return
	}
	return nil
}

// BaseFooProcessor is the client.
type BaseFooProcessor struct {
	handler BaseFoo
}

// NewBaseFooProcessor constructs a BaseFooProcessor.
func NewBaseFooProcessor(handler BaseFoo) *BaseFooProcessor {
	return &BaseFooProcessor{
		handler: handler,
	}
}

// Invoke handles internal processing of BaseFoo invocations.
func (p *BaseFooProcessor) Invoke(ctx frugal.Context, method string, in frugal.Protocol) (frugal.Packer, error) {
	switch method {
	case "basePing":
		args := &BaseFooBasePingArgs{}
		args.Unpack(in)
		err := in.Err()
		if err != nil {
			return nil, err
		}
		res := &BaseFooBasePingResult{}
		err = p.handler.BasePing(ctx)
		return res, err
	default:
		return nil, errors.New("BaseFoo: unsupported method " + method)
	}
}

// BaseFooBasePingArgs is a frual serializable object.
type BaseFooBasePingArgs struct {
}

// NewBaseFooBasePingArgs constructs a BaseFooBasePingArgs.
func NewBaseFooBasePingArgs() *BaseFooBasePingArgs {
	return &BaseFooBasePingArgs{
		// TODO: default values

	}
}

// Unpack deserializes BaseFooBasePingArgs objects.
func (p *BaseFooBasePingArgs) Unpack(prot frugal.Protocol) {
	prot.UnpackStructBegin("BaseFooBasePingArgs")
	for typeID, id := prot.UnpackFieldBegin(); typeID != frugal.STOP; typeID, id = prot.UnpackFieldBegin() {
		switch id {
		default:
			prot.Skip(typeID)
		}
		prot.UnpackFieldEnd()
	}
	prot.UnpackStructEnd()
}

// Pack serializes BaseFooBasePingArgs objects.
func (p *BaseFooBasePingArgs) Pack(prot frugal.Protocol) {
	prot.PackStructBegin("BaseFooBasePingArgs")
	prot.PackFieldStop()
	prot.PackStructEnd()
}

// BaseFooBasePingResult is a frual serializable object.
type BaseFooBasePingResult struct {
}

// NewBaseFooBasePingResult constructs a BaseFooBasePingResult.
func NewBaseFooBasePingResult() *BaseFooBasePingResult {
	return &BaseFooBasePingResult{
		// TODO: default values

	}
}

// Unpack deserializes BaseFooBasePingResult objects.
func (p *BaseFooBasePingResult) Unpack(prot frugal.Protocol) {
	prot.UnpackStructBegin("BaseFooBasePingResult")
	for typeID, id := prot.UnpackFieldBegin(); typeID != frugal.STOP; typeID, id = prot.UnpackFieldBegin() {
		switch id {
		default:
			prot.Skip(typeID)
		}
		prot.UnpackFieldEnd()
	}
	prot.UnpackStructEnd()
}

// Pack serializes BaseFooBasePingResult objects.
func (p *BaseFooBasePingResult) Pack(prot frugal.Protocol) {
	prot.PackStructBegin("BaseFooBasePingResult")
	prot.PackFieldStop()
	prot.PackStructEnd()
}
