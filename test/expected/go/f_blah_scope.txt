// Autogenerated by Frugal Compiler (1.0.6)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package valid

import (
	"fmt"
	"log"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal/lib/go"
)

type BlahPublisher interface {
	Open() error
	Close() error
	PublishDoStuff(ctx *frugal.FContext, req *Thing) error
}

type blahPublisher struct {
	transport frugal.FScopeTransport
	protocol  *frugal.FProtocol
}

func NewBlahPublisher(provider *frugal.FScopeProvider) BlahPublisher {
	transport, protocol := provider.New()
	return &blahPublisher{
		transport: transport,
		protocol:  protocol,
	}
}

func (l *blahPublisher) Open() error {
	return l.transport.Open()
}

func (l *blahPublisher) Close() error {
	return l.transport.Close()
}

func (l *blahPublisher) PublishDoStuff(ctx *frugal.FContext, req *Thing) error {
	op := "DoStuff"
	prefix := ""
	topic := fmt.Sprintf("%sBlah%s%s", prefix, delimiter, op)
	if err := l.transport.LockTopic(topic); err != nil {
		return err
	}
	defer l.transport.UnlockTopic()
	oprot := l.protocol
	if err := oprot.WriteRequestHeader(ctx); err != nil {
		return err
	}
	if err := oprot.WriteMessageBegin(op, thrift.CALL, 0); err != nil {
		return err
	}
	if err := req.Write(oprot); err != nil {
		return err
	}
	if err := oprot.WriteMessageEnd(); err != nil {
		return err
	}
	return oprot.Flush()
}

type BlahSubscriber interface {
	SubscribeDoStuff(handler func(*frugal.FContext, *Thing)) (*frugal.FSubscription, error)
}

type blahSubscriber struct {
	provider *frugal.FScopeProvider
}

func NewBlahSubscriber(provider *frugal.FScopeProvider) BlahSubscriber {
	return &blahSubscriber{provider: provider}
}

func (l *blahSubscriber) SubscribeDoStuff(handler func(*frugal.FContext, *Thing)) (*frugal.FSubscription, error) {
	op := "DoStuff"
	prefix := ""
	topic := fmt.Sprintf("%sBlah%s%s", prefix, delimiter, op)
	transport, protocol := l.provider.New()
	if err := transport.Subscribe(topic); err != nil {
		return nil, err
	}

	sub := frugal.NewFSubscription(topic, transport)
	go func() {
		for {
			ctx, received, err := l.recvDoStuff(op, protocol)
			if err != nil {
				if e, ok := err.(thrift.TTransportException); ok && e.TypeId() == thrift.END_OF_FILE {
					return
				}
				log.Printf("frugal: error receiving %s: %s\n", topic, err.Error())
				sub.Signal(err)
				sub.Unsubscribe()
				return
			}
			handler(ctx, received)
		}
	}()

	return sub, nil
}

func (l *blahSubscriber) recvDoStuff(op string, iprot *frugal.FProtocol) (*frugal.FContext, *Thing, error) {
	ctx, err := iprot.ReadRequestHeader()
	if err != nil {
		return nil, nil, err
	}
	name, _, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return nil, nil, err
	}
	if name != op {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		return nil, nil, x9
	}
	req := &Thing{}
	if err := req.Read(iprot); err != nil {
		return nil, nil, err
	}

	iprot.ReadMessageEnd()
	return ctx, req, nil
}
