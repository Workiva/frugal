// Autogenerated by Frugal Compiler (1.0.6)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package valid

import (
	"fmt"
	"log"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal/lib/go"
)

const delimiter = "."

// And this is a scope docstring.
type FooPublisher interface {
	Open() error
	Close() error
	PublishFoo(ctx *frugal.FContext, baz string, req *Thing) error
	PublishBar(ctx *frugal.FContext, baz string, req *Stuff) error
}

type fooPublisher struct {
	transport frugal.FScopeTransport
	protocol  *frugal.FProtocol
}

func NewFooPublisher(provider *frugal.FScopeProvider) FooPublisher {
	transport, protocol := provider.New()
	return &fooPublisher{
		transport: transport,
		protocol:  protocol,
	}
}

func (l *fooPublisher) Open() error {
	return l.transport.Open()
}

func (l *fooPublisher) Close() error {
	return l.transport.Close()
}

// This is an operation docstring.
func (l *fooPublisher) PublishFoo(ctx *frugal.FContext, baz string, req *Thing) error {
	op := "Foo"
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	if err := l.transport.LockTopic(topic); err != nil {
		return err
	}
	defer l.transport.UnlockTopic()
	oprot := l.protocol
	if err := oprot.WriteRequestHeader(ctx); err != nil {
		return err
	}
	if err := oprot.WriteMessageBegin(op, thrift.CALL, 0); err != nil {
		return err
	}
	if err := req.Write(oprot); err != nil {
		return err
	}
	if err := oprot.WriteMessageEnd(); err != nil {
		return err
	}
	return oprot.Flush()
}

func (l *fooPublisher) PublishBar(ctx *frugal.FContext, baz string, req *Stuff) error {
	op := "Bar"
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	if err := l.transport.LockTopic(topic); err != nil {
		return err
	}
	defer l.transport.UnlockTopic()
	oprot := l.protocol
	if err := oprot.WriteRequestHeader(ctx); err != nil {
		return err
	}
	if err := oprot.WriteMessageBegin(op, thrift.CALL, 0); err != nil {
		return err
	}
	if err := req.Write(oprot); err != nil {
		return err
	}
	if err := oprot.WriteMessageEnd(); err != nil {
		return err
	}
	return oprot.Flush()
}

// And this is a scope docstring.
type FooSubscriber interface {
	SubscribeFoo(baz string, handler func(*frugal.FContext, *Thing)) (*frugal.FSubscription, error)
	SubscribeBar(baz string, handler func(*frugal.FContext, *Stuff)) (*frugal.FSubscription, error)
}

type fooSubscriber struct {
	provider *frugal.FScopeProvider
}

func NewFooSubscriber(provider *frugal.FScopeProvider) FooSubscriber {
	return &fooSubscriber{provider: provider}
}

// This is an operation docstring.
func (l *fooSubscriber) SubscribeFoo(baz string, handler func(*frugal.FContext, *Thing)) (*frugal.FSubscription, error) {
	op := "Foo"
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	transport, protocol := l.provider.New()
	if err := transport.Subscribe(topic); err != nil {
		return nil, err
	}

	sub := frugal.NewFSubscription(topic, transport)
	go func() {
		for {
			ctx, received, err := l.recvFoo(op, protocol)
			if err != nil {
				if e, ok := err.(thrift.TTransportException); ok && e.TypeId() == thrift.END_OF_FILE {
					return
				}
				log.Printf("frugal: error receiving %s, discarding frame: %s\n", topic, err.Error())
				transport.DiscardFrame()
				continue
			}
			handler(ctx, received)
		}
	}()

	return sub, nil
}

func (l *fooSubscriber) recvFoo(op string, iprot *frugal.FProtocol) (*frugal.FContext, *Thing, error) {
	ctx, err := iprot.ReadRequestHeader()
	if err != nil {
		return nil, nil, err
	}
	name, _, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return nil, nil, err
	}
	if name != op {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		return nil, nil, x9
	}
	req := &Thing{}
	if err := req.Read(iprot); err != nil {
		return nil, nil, err
	}

	iprot.ReadMessageEnd()
	return ctx, req, nil
}

func (l *fooSubscriber) SubscribeBar(baz string, handler func(*frugal.FContext, *Stuff)) (*frugal.FSubscription, error) {
	op := "Bar"
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	transport, protocol := l.provider.New()
	if err := transport.Subscribe(topic); err != nil {
		return nil, err
	}

	sub := frugal.NewFSubscription(topic, transport)
	go func() {
		for {
			ctx, received, err := l.recvBar(op, protocol)
			if err != nil {
				if e, ok := err.(thrift.TTransportException); ok && e.TypeId() == thrift.END_OF_FILE {
					return
				}
				log.Printf("frugal: error receiving %s, discarding frame: %s\n", topic, err.Error())
				transport.DiscardFrame()
				continue
			}
			handler(ctx, received)
		}
	}()

	return sub, nil
}

func (l *fooSubscriber) recvBar(op string, iprot *frugal.FProtocol) (*frugal.FContext, *Stuff, error) {
	ctx, err := iprot.ReadRequestHeader()
	if err != nil {
		return nil, nil, err
	}
	name, _, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return nil, nil, err
	}
	if name != op {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		return nil, nil, x9
	}
	req := &Stuff{}
	if err := req.Read(iprot); err != nil {
		return nil, nil, err
	}

	iprot.ReadMessageEnd()
	return ctx, req, nil
}
