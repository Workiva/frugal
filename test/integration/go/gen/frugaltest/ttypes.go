// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package frugaltest

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int;

type Numberz int64
const (
  Numberz_ONE Numberz = 1
  Numberz_TWO Numberz = 2
  Numberz_THREE Numberz = 3
  Numberz_FIVE Numberz = 5
  Numberz_SIX Numberz = 6
  Numberz_EIGHT Numberz = 8
)

func (p Numberz) String() string {
  switch p {
  case Numberz_ONE: return "ONE"
  case Numberz_TWO: return "TWO"
  case Numberz_THREE: return "THREE"
  case Numberz_FIVE: return "FIVE"
  case Numberz_SIX: return "SIX"
  case Numberz_EIGHT: return "EIGHT"
  }
  return "<UNSET>"
}

func NumberzFromString(s string) (Numberz, error) {
  switch s {
  case "ONE": return Numberz_ONE, nil 
  case "TWO": return Numberz_TWO, nil 
  case "THREE": return Numberz_THREE, nil 
  case "FIVE": return Numberz_FIVE, nil 
  case "SIX": return Numberz_SIX, nil 
  case "EIGHT": return Numberz_EIGHT, nil 
  }
  return Numberz(0), fmt.Errorf("not a valid Numberz string")
}


func NumberzPtr(v Numberz) *Numberz { return &v }

func (p Numberz) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Numberz) UnmarshalText(text []byte) error {
q, err := NumberzFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}
type UserId int64

func UserIdPtr(v UserId) *UserId { return &v }

type MapType map[string]*Bonk

func MapTypePtr(v MapType) *MapType { return &v }

// Attributes:
//  - Message
//  - Type
type Bonk struct {
  Message string `thrift:"message,1" json:"message"`
  Type int32 `thrift:"type,2" json:"type"`
}

func NewBonk() *Bonk {
  return &Bonk{}
}


func (p *Bonk) GetMessage() string {
  return p.Message
}

func (p *Bonk) GetType() int32 {
  return p.Type
}
func (p *Bonk) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Bonk)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *Bonk)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *Bonk) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bonk"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Bonk) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *Bonk) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *Bonk) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bonk(%+v)", *p)
}

// Attributes:
//  - ImTrue
//  - ImFalse
type Bools struct {
  ImTrue bool `thrift:"im_true,1" json:"im_true"`
  ImFalse bool `thrift:"im_false,2" json:"im_false"`
}

func NewBools() *Bools {
  return &Bools{}
}


func (p *Bools) GetImTrue() bool {
  return p.ImTrue
}

func (p *Bools) GetImFalse() bool {
  return p.ImFalse
}
func (p *Bools) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Bools)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ImTrue = v
}
  return nil
}

func (p *Bools)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ImFalse = v
}
  return nil
}

func (p *Bools) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Bools"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Bools) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("im_true", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:im_true: ", p), err) }
  if err := oprot.WriteBool(bool(p.ImTrue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.im_true (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:im_true: ", p), err) }
  return err
}

func (p *Bools) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("im_false", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:im_false: ", p), err) }
  if err := oprot.WriteBool(bool(p.ImFalse)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.im_false (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:im_false: ", p), err) }
  return err
}

func (p *Bools) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bools(%+v)", *p)
}

// Attributes:
//  - StringThing
//  - ByteThing
//  - I32Thing
//  - I64Thing
type Xtruct struct {
  StringThing string `thrift:"string_thing,1" json:"string_thing"`
  // unused fields # 2 to 3
  ByteThing int8 `thrift:"byte_thing,4" json:"byte_thing"`
  // unused fields # 5 to 8
  I32Thing int32 `thrift:"i32_thing,9" json:"i32_thing"`
  // unused field # 10
  I64Thing int64 `thrift:"i64_thing,11" json:"i64_thing"`
}

func NewXtruct() *Xtruct {
  return &Xtruct{}
}


func (p *Xtruct) GetStringThing() string {
  return p.StringThing
}

func (p *Xtruct) GetByteThing() int8 {
  return p.ByteThing
}

func (p *Xtruct) GetI32Thing() int32 {
  return p.I32Thing
}

func (p *Xtruct) GetI64Thing() int64 {
  return p.I64Thing
}
func (p *Xtruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.readField9(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.readField11(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Xtruct)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StringThing = v
}
  return nil
}

func (p *Xtruct)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.ByteThing = temp
}
  return nil
}

func (p *Xtruct)  readField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.I32Thing = v
}
  return nil
}

func (p *Xtruct)  readField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.I64Thing = v
}
  return nil
}

func (p *Xtruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Xtruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Xtruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("string_thing", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:string_thing: ", p), err) }
  if err := oprot.WriteString(string(p.StringThing)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.string_thing (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:string_thing: ", p), err) }
  return err
}

func (p *Xtruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("byte_thing", thrift.BYTE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:byte_thing: ", p), err) }
  if err := oprot.WriteByte(int8(p.ByteThing)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.byte_thing (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:byte_thing: ", p), err) }
  return err
}

func (p *Xtruct) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i32_thing", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:i32_thing: ", p), err) }
  if err := oprot.WriteI32(int32(p.I32Thing)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i32_thing (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:i32_thing: ", p), err) }
  return err
}

func (p *Xtruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i64_thing", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:i64_thing: ", p), err) }
  if err := oprot.WriteI64(int64(p.I64Thing)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i64_thing (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:i64_thing: ", p), err) }
  return err
}

func (p *Xtruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Xtruct(%+v)", *p)
}

// Attributes:
//  - ByteThing
//  - StructThing
//  - I32Thing
type Xtruct2 struct {
  ByteThing int8 `thrift:"byte_thing,1" json:"byte_thing"`
  StructThing *Xtruct `thrift:"struct_thing,2" json:"struct_thing"`
  I32Thing int32 `thrift:"i32_thing,3" json:"i32_thing"`
}

func NewXtruct2() *Xtruct2 {
  return &Xtruct2{}
}


func (p *Xtruct2) GetByteThing() int8 {
  return p.ByteThing
}
var Xtruct2_StructThing_DEFAULT *Xtruct
func (p *Xtruct2) GetStructThing() *Xtruct {
  if !p.IsSetStructThing() {
    return Xtruct2_StructThing_DEFAULT
  }
return p.StructThing
}

func (p *Xtruct2) GetI32Thing() int32 {
  return p.I32Thing
}
func (p *Xtruct2) IsSetStructThing() bool {
  return p.StructThing != nil
}

func (p *Xtruct2) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Xtruct2)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := int8(v)
  p.ByteThing = temp
}
  return nil
}

func (p *Xtruct2)  readField2(iprot thrift.TProtocol) error {
  p.StructThing = &Xtruct{}
  if err := p.StructThing.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructThing), err)
  }
  return nil
}

func (p *Xtruct2)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.I32Thing = v
}
  return nil
}

func (p *Xtruct2) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Xtruct2"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Xtruct2) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("byte_thing", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:byte_thing: ", p), err) }
  if err := oprot.WriteByte(int8(p.ByteThing)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.byte_thing (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:byte_thing: ", p), err) }
  return err
}

func (p *Xtruct2) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("struct_thing", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:struct_thing: ", p), err) }
  if err := p.StructThing.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructThing), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:struct_thing: ", p), err) }
  return err
}

func (p *Xtruct2) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i32_thing", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:i32_thing: ", p), err) }
  if err := oprot.WriteI32(int32(p.I32Thing)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i32_thing (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:i32_thing: ", p), err) }
  return err
}

func (p *Xtruct2) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Xtruct2(%+v)", *p)
}

// Attributes:
//  - StringThing
//  - Changed
//  - I32Thing
//  - I64Thing
type Xtruct3 struct {
  StringThing string `thrift:"string_thing,1" json:"string_thing"`
  // unused fields # 2 to 3
  Changed int32 `thrift:"changed,4" json:"changed"`
  // unused fields # 5 to 8
  I32Thing int32 `thrift:"i32_thing,9" json:"i32_thing"`
  // unused field # 10
  I64Thing int64 `thrift:"i64_thing,11" json:"i64_thing"`
}

func NewXtruct3() *Xtruct3 {
  return &Xtruct3{}
}


func (p *Xtruct3) GetStringThing() string {
  return p.StringThing
}

func (p *Xtruct3) GetChanged() int32 {
  return p.Changed
}

func (p *Xtruct3) GetI32Thing() int32 {
  return p.I32Thing
}

func (p *Xtruct3) GetI64Thing() int64 {
  return p.I64Thing
}
func (p *Xtruct3) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.readField9(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.readField11(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Xtruct3)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StringThing = v
}
  return nil
}

func (p *Xtruct3)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Changed = v
}
  return nil
}

func (p *Xtruct3)  readField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.I32Thing = v
}
  return nil
}

func (p *Xtruct3)  readField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.I64Thing = v
}
  return nil
}

func (p *Xtruct3) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Xtruct3"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Xtruct3) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("string_thing", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:string_thing: ", p), err) }
  if err := oprot.WriteString(string(p.StringThing)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.string_thing (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:string_thing: ", p), err) }
  return err
}

func (p *Xtruct3) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("changed", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:changed: ", p), err) }
  if err := oprot.WriteI32(int32(p.Changed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.changed (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:changed: ", p), err) }
  return err
}

func (p *Xtruct3) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i32_thing", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:i32_thing: ", p), err) }
  if err := oprot.WriteI32(int32(p.I32Thing)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i32_thing (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:i32_thing: ", p), err) }
  return err
}

func (p *Xtruct3) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i64_thing", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:i64_thing: ", p), err) }
  if err := oprot.WriteI64(int64(p.I64Thing)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i64_thing (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:i64_thing: ", p), err) }
  return err
}

func (p *Xtruct3) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Xtruct3(%+v)", *p)
}

// Attributes:
//  - UserMap
//  - Xtructs
type Insanity struct {
  UserMap map[Numberz]UserId `thrift:"userMap,1" json:"userMap"`
  Xtructs []*Xtruct `thrift:"xtructs,2" json:"xtructs"`
}

func NewInsanity() *Insanity {
  return &Insanity{}
}


func (p *Insanity) GetUserMap() map[Numberz]UserId {
  return p.UserMap
}

func (p *Insanity) GetXtructs() []*Xtruct {
  return p.Xtructs
}
func (p *Insanity) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Insanity)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[Numberz]UserId, size)
  p.UserMap =  tMap
  for i := 0; i < size; i ++ {
var _key0 Numberz
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Numberz(v)
    _key0 = temp
}
var _val1 UserId
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := UserId(v)
    _val1 = temp
}
    p.UserMap[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Insanity)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Xtruct, 0, size)
  p.Xtructs =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &Xtruct{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Xtructs = append(p.Xtructs, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Insanity) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Insanity"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Insanity) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userMap", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(p.UserMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.UserMap {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userMap: ", p), err) }
  return err
}

func (p *Insanity) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("xtructs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:xtructs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Xtructs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Xtructs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:xtructs: ", p), err) }
  return err
}

func (p *Insanity) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Insanity(%+v)", *p)
}

// Attributes:
//  - StringField
//  - SetField
//  - ListField
//  - BinaryField
