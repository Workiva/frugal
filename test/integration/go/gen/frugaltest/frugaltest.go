// Autogenerated by Thrift Compiler (0.9.3-wk-2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package frugaltest

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type FrugalTest interface {
	TestVoid() (err error)
	// Parameters:
	//  - Thing
	TestString(thing string) (r string, err error)
	// Parameters:
	//  - Thing
	TestBool(thing bool) (r bool, err error)
	// Parameters:
	//  - Thing
	TestByte(thing int8) (r int8, err error)
	// Parameters:
	//  - Thing
	TestI32(thing int32) (r int32, err error)
	// Parameters:
	//  - Thing
	TestI64(thing int64) (r int64, err error)
	// Parameters:
	//  - Thing
	TestDouble(thing float64) (r float64, err error)
	// Parameters:
	//  - Thing
	TestBinary(thing []byte) (r []byte, err error)
	// Parameters:
	//  - Thing
	TestStruct(thing *Xtruct) (r *Xtruct, err error)
	// Parameters:
	//  - Thing
	TestNest(thing *Xtruct2) (r *Xtruct2, err error)
	// Parameters:
	//  - Thing
	TestMap(thing map[int32]int32) (r map[int32]int32, err error)
	// Parameters:
	//  - Thing
	TestStringMap(thing map[string]string) (r map[string]string, err error)
	// Parameters:
	//  - Thing
	TestSet(thing map[int32]bool) (r map[int32]bool, err error)
	// Parameters:
	//  - Thing
	TestList(thing []int32) (r []int32, err error)
	// Parameters:
	//  - Thing
	TestEnum(thing Numberz) (r Numberz, err error)
	// Parameters:
	//  - Thing
	TestTypedef(thing UserId) (r UserId, err error)
	// Parameters:
	//  - Hello
	TestMapMap(hello int32) (r map[int32]map[int32]int32, err error)
	// Parameters:
	//  - Argument
	TestInsanity(argument *Insanity) (r map[UserId]map[Numberz]*Insanity, err error)
	// Parameters:
	//  - Arg0
	//  - Arg1
	//  - Arg2
	//  - Arg3
	//  - Arg4
	//  - Arg5
	TestMulti(arg0 int8, arg1 int32, arg2 int64, arg3 map[int16]string, arg4 Numberz, arg5 UserId) (r *Xtruct, err error)
	// Parameters:
	//  - Arg
	TestException(arg string) (err error)
	// Parameters:
	//  - Arg0
	//  - Arg1
	TestMultiException(arg0 string, arg1 string) (r *Xtruct, err error)
	// Parameters:
	//  - SecondsToSleep
	TestOneway(secondsToSleep int32) (err error)
}

type FrugalTestClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewFrugalTestClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FrugalTestClient {
	return &FrugalTestClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewFrugalTestClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FrugalTestClient {
	return &FrugalTestClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *FrugalTestClient) TestVoid() (err error) {
	if err = p.sendTestVoid(); err != nil {
		return
	}
	return p.recvTestVoid()
}

func (p *FrugalTestClient) sendTestVoid() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testVoid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestVoidArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestVoid() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testVoid" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testVoid failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testVoid failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		error32, err = error31.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error32
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testVoid failed: invalid message type")
		return
	}
	result := FrugalTestTestVoidResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestString(thing string) (r string, err error) {
	if err = p.sendTestString(thing); err != nil {
		return
	}
	return p.recvTestString()
}

func (p *FrugalTestClient) sendTestString(thing string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testString", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestStringArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestString() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testString" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testString failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testString failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error34 error
		error34, err = error33.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error34
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testString failed: invalid message type")
		return
	}
	result := FrugalTestTestStringResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestBool(thing bool) (r bool, err error) {
	if err = p.sendTestBool(thing); err != nil {
		return
	}
	return p.recvTestBool()
}

func (p *FrugalTestClient) sendTestBool(thing bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testBool", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestBoolArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestBool() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testBool" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testBool failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testBool failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error36 error
		error36, err = error35.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error36
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testBool failed: invalid message type")
		return
	}
	result := FrugalTestTestBoolResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestByte(thing int8) (r int8, err error) {
	if err = p.sendTestByte(thing); err != nil {
		return
	}
	return p.recvTestByte()
}

func (p *FrugalTestClient) sendTestByte(thing int8) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testByte", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestByteArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestByte() (value int8, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testByte" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testByte failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testByte failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error38 error
		error38, err = error37.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error38
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testByte failed: invalid message type")
		return
	}
	result := FrugalTestTestByteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestI32(thing int32) (r int32, err error) {
	if err = p.sendTestI32(thing); err != nil {
		return
	}
	return p.recvTestI32()
}

func (p *FrugalTestClient) sendTestI32(thing int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testI32", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestI32Args{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestI32() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testI32" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testI32 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testI32 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error40 error
		error40, err = error39.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error40
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testI32 failed: invalid message type")
		return
	}
	result := FrugalTestTestI32Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestI64(thing int64) (r int64, err error) {
	if err = p.sendTestI64(thing); err != nil {
		return
	}
	return p.recvTestI64()
}

func (p *FrugalTestClient) sendTestI64(thing int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testI64", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestI64Args{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestI64() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testI64" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testI64 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testI64 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error42 error
		error42, err = error41.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error42
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testI64 failed: invalid message type")
		return
	}
	result := FrugalTestTestI64Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestDouble(thing float64) (r float64, err error) {
	if err = p.sendTestDouble(thing); err != nil {
		return
	}
	return p.recvTestDouble()
}

func (p *FrugalTestClient) sendTestDouble(thing float64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testDouble", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestDoubleArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestDouble() (value float64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testDouble" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testDouble failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testDouble failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error44 error
		error44, err = error43.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error44
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testDouble failed: invalid message type")
		return
	}
	result := FrugalTestTestDoubleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestBinary(thing []byte) (r []byte, err error) {
	if err = p.sendTestBinary(thing); err != nil {
		return
	}
	return p.recvTestBinary()
}

func (p *FrugalTestClient) sendTestBinary(thing []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testBinary", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestBinaryArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestBinary() (value []byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testBinary" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testBinary failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testBinary failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error46 error
		error46, err = error45.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error46
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testBinary failed: invalid message type")
		return
	}
	result := FrugalTestTestBinaryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestStruct(thing *Xtruct) (r *Xtruct, err error) {
	if err = p.sendTestStruct(thing); err != nil {
		return
	}
	return p.recvTestStruct()
}

func (p *FrugalTestClient) sendTestStruct(thing *Xtruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testStruct", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestStructArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestStruct() (value *Xtruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testStruct" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testStruct failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testStruct failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error48 error
		error48, err = error47.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error48
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testStruct failed: invalid message type")
		return
	}
	result := FrugalTestTestStructResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestNest(thing *Xtruct2) (r *Xtruct2, err error) {
	if err = p.sendTestNest(thing); err != nil {
		return
	}
	return p.recvTestNest()
}

func (p *FrugalTestClient) sendTestNest(thing *Xtruct2) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testNest", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestNestArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestNest() (value *Xtruct2, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testNest" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testNest failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testNest failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error49 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error50 error
		error50, err = error49.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error50
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testNest failed: invalid message type")
		return
	}
	result := FrugalTestTestNestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestMap(thing map[int32]int32) (r map[int32]int32, err error) {
	if err = p.sendTestMap(thing); err != nil {
		return
	}
	return p.recvTestMap()
}

func (p *FrugalTestClient) sendTestMap(thing map[int32]int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testMap", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestMapArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestMap() (value map[int32]int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testMap" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testMap failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testMap failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error52 error
		error52, err = error51.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error52
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testMap failed: invalid message type")
		return
	}
	result := FrugalTestTestMapResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestStringMap(thing map[string]string) (r map[string]string, err error) {
	if err = p.sendTestStringMap(thing); err != nil {
		return
	}
	return p.recvTestStringMap()
}

func (p *FrugalTestClient) sendTestStringMap(thing map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testStringMap", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestStringMapArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestStringMap() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testStringMap" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testStringMap failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testStringMap failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error54 error
		error54, err = error53.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error54
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testStringMap failed: invalid message type")
		return
	}
	result := FrugalTestTestStringMapResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestSet(thing map[int32]bool) (r map[int32]bool, err error) {
	if err = p.sendTestSet(thing); err != nil {
		return
	}
	return p.recvTestSet()
}

func (p *FrugalTestClient) sendTestSet(thing map[int32]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testSet", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestSetArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestSet() (value map[int32]bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testSet" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testSet failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testSet failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testSet failed: invalid message type")
		return
	}
	result := FrugalTestTestSetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestList(thing []int32) (r []int32, err error) {
	if err = p.sendTestList(thing); err != nil {
		return
	}
	return p.recvTestList()
}

func (p *FrugalTestClient) sendTestList(thing []int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestListArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestList() (value []int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error57 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error58 error
		error58, err = error57.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error58
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testList failed: invalid message type")
		return
	}
	result := FrugalTestTestListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestEnum(thing Numberz) (r Numberz, err error) {
	if err = p.sendTestEnum(thing); err != nil {
		return
	}
	return p.recvTestEnum()
}

func (p *FrugalTestClient) sendTestEnum(thing Numberz) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testEnum", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestEnumArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestEnum() (value Numberz, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testEnum" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testEnum failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testEnum failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error60 error
		error60, err = error59.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error60
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testEnum failed: invalid message type")
		return
	}
	result := FrugalTestTestEnumResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Thing
func (p *FrugalTestClient) TestTypedef(thing UserId) (r UserId, err error) {
	if err = p.sendTestTypedef(thing); err != nil {
		return
	}
	return p.recvTestTypedef()
}

func (p *FrugalTestClient) sendTestTypedef(thing UserId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testTypedef", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestTypedefArgs{
		Thing: thing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestTypedef() (value UserId, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testTypedef" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testTypedef failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testTypedef failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error61 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error62 error
		error62, err = error61.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error62
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testTypedef failed: invalid message type")
		return
	}
	result := FrugalTestTestTypedefResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Hello
func (p *FrugalTestClient) TestMapMap(hello int32) (r map[int32]map[int32]int32, err error) {
	if err = p.sendTestMapMap(hello); err != nil {
		return
	}
	return p.recvTestMapMap()
}

func (p *FrugalTestClient) sendTestMapMap(hello int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testMapMap", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestMapMapArgs{
		Hello: hello,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestMapMap() (value map[int32]map[int32]int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testMapMap" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testMapMap failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testMapMap failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error63 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error64 error
		error64, err = error63.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error64
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testMapMap failed: invalid message type")
		return
	}
	result := FrugalTestTestMapMapResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Argument
func (p *FrugalTestClient) TestInsanity(argument *Insanity) (r map[UserId]map[Numberz]*Insanity, err error) {
	if err = p.sendTestInsanity(argument); err != nil {
		return
	}
	return p.recvTestInsanity()
}

func (p *FrugalTestClient) sendTestInsanity(argument *Insanity) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testInsanity", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestInsanityArgs{
		Argument: argument,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestInsanity() (value map[UserId]map[Numberz]*Insanity, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testInsanity" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testInsanity failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testInsanity failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error65 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error66 error
		error66, err = error65.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error66
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testInsanity failed: invalid message type")
		return
	}
	result := FrugalTestTestInsanityResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Arg0
//  - Arg1
//  - Arg2
//  - Arg3
//  - Arg4
//  - Arg5
func (p *FrugalTestClient) TestMulti(arg0 int8, arg1 int32, arg2 int64, arg3 map[int16]string, arg4 Numberz, arg5 UserId) (r *Xtruct, err error) {
	if err = p.sendTestMulti(arg0, arg1, arg2, arg3, arg4, arg5); err != nil {
		return
	}
	return p.recvTestMulti()
}

func (p *FrugalTestClient) sendTestMulti(arg0 int8, arg1 int32, arg2 int64, arg3 map[int16]string, arg4 Numberz, arg5 UserId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testMulti", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestMultiArgs{
		Arg0: arg0,
		Arg1: arg1,
		Arg2: arg2,
		Arg3: arg3,
		Arg4: arg4,
		Arg5: arg5,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestMulti() (value *Xtruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testMulti" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testMulti failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testMulti failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error67 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error68 error
		error68, err = error67.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error68
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testMulti failed: invalid message type")
		return
	}
	result := FrugalTestTestMultiResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Arg
func (p *FrugalTestClient) TestException(arg string) (err error) {
	if err = p.sendTestException(arg); err != nil {
		return
	}
	return p.recvTestException()
}

func (p *FrugalTestClient) sendTestException(arg string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testException", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestExceptionArgs{
		Arg: arg,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestException() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testException" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testException failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testException failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error69 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error70 error
		error70, err = error69.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error70
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testException failed: invalid message type")
		return
	}
	result := FrugalTestTestExceptionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Err1 != nil {
		err = result.Err1
		return
	}
	return
}

// Parameters:
//  - Arg0
//  - Arg1
func (p *FrugalTestClient) TestMultiException(arg0 string, arg1 string) (r *Xtruct, err error) {
	if err = p.sendTestMultiException(arg0, arg1); err != nil {
		return
	}
	return p.recvTestMultiException()
}

func (p *FrugalTestClient) sendTestMultiException(arg0 string, arg1 string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testMultiException", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestMultiExceptionArgs{
		Arg0: arg0,
		Arg1: arg1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FrugalTestClient) recvTestMultiException() (value *Xtruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testMultiException" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testMultiException failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testMultiException failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error71 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error72 error
		error72, err = error71.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error72
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testMultiException failed: invalid message type")
		return
	}
	result := FrugalTestTestMultiExceptionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Err1 != nil {
		err = result.Err1
		return
	} else if result.Err2 != nil {
		err = result.Err2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SecondsToSleep
func (p *FrugalTestClient) TestOneway(secondsToSleep int32) (err error) {
	if err = p.sendTestOneway(secondsToSleep); err != nil {
		return
	}
	return
}

func (p *FrugalTestClient) sendTestOneway(secondsToSleep int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testOneway", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := FrugalTestTestOnewayArgs{
		SecondsToSleep: secondsToSleep,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

type FrugalTestProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      FrugalTest
}

func (p *FrugalTestProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *FrugalTestProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *FrugalTestProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewFrugalTestProcessor(handler FrugalTest) *FrugalTestProcessor {

	self73 := &FrugalTestProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self73.processorMap["testVoid"] = &frugalTestProcessorTestVoid{handler: handler}
	self73.processorMap["testString"] = &frugalTestProcessorTestString{handler: handler}
	self73.processorMap["testBool"] = &frugalTestProcessorTestBool{handler: handler}
	self73.processorMap["testByte"] = &frugalTestProcessorTestByte{handler: handler}
	self73.processorMap["testI32"] = &frugalTestProcessorTestI32{handler: handler}
	self73.processorMap["testI64"] = &frugalTestProcessorTestI64{handler: handler}
	self73.processorMap["testDouble"] = &frugalTestProcessorTestDouble{handler: handler}
	self73.processorMap["testBinary"] = &frugalTestProcessorTestBinary{handler: handler}
	self73.processorMap["testStruct"] = &frugalTestProcessorTestStruct{handler: handler}
	self73.processorMap["testNest"] = &frugalTestProcessorTestNest{handler: handler}
	self73.processorMap["testMap"] = &frugalTestProcessorTestMap{handler: handler}
	self73.processorMap["testStringMap"] = &frugalTestProcessorTestStringMap{handler: handler}
	self73.processorMap["testSet"] = &frugalTestProcessorTestSet{handler: handler}
	self73.processorMap["testList"] = &frugalTestProcessorTestList{handler: handler}
	self73.processorMap["testEnum"] = &frugalTestProcessorTestEnum{handler: handler}
	self73.processorMap["testTypedef"] = &frugalTestProcessorTestTypedef{handler: handler}
	self73.processorMap["testMapMap"] = &frugalTestProcessorTestMapMap{handler: handler}
	self73.processorMap["testInsanity"] = &frugalTestProcessorTestInsanity{handler: handler}
	self73.processorMap["testMulti"] = &frugalTestProcessorTestMulti{handler: handler}
	self73.processorMap["testException"] = &frugalTestProcessorTestException{handler: handler}
	self73.processorMap["testMultiException"] = &frugalTestProcessorTestMultiException{handler: handler}
	self73.processorMap["testOneway"] = &frugalTestProcessorTestOneway{handler: handler}
	return self73
}

func (p *FrugalTestProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x74 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x74.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x74

}

type frugalTestProcessorTestVoid struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestVoid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestVoidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testVoid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestVoidResult{}
	var err2 error
	if err2 = p.handler.TestVoid(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testVoid: "+err2.Error())
		oprot.WriteMessageBegin("testVoid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("testVoid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestString struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestStringArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testString", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestStringResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.TestString(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testString: "+err2.Error())
		oprot.WriteMessageBegin("testString", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testString", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestBool struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestBool) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestBoolArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testBool", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestBoolResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.TestBool(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testBool: "+err2.Error())
		oprot.WriteMessageBegin("testBool", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testBool", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestByte struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestByte) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestByteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testByte", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestByteResult{}
	var retval int8
	var err2 error
	if retval, err2 = p.handler.TestByte(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testByte: "+err2.Error())
		oprot.WriteMessageBegin("testByte", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testByte", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestI32 struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestI32) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestI32Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testI32", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestI32Result{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.TestI32(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testI32: "+err2.Error())
		oprot.WriteMessageBegin("testI32", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testI32", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestI64 struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestI64) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestI64Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testI64", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestI64Result{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.TestI64(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testI64: "+err2.Error())
		oprot.WriteMessageBegin("testI64", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testI64", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestDouble struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestDouble) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestDoubleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testDouble", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestDoubleResult{}
	var retval float64
	var err2 error
	if retval, err2 = p.handler.TestDouble(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testDouble: "+err2.Error())
		oprot.WriteMessageBegin("testDouble", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testDouble", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestBinary struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestBinary) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestBinaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testBinary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestBinaryResult{}
	var retval []byte
	var err2 error
	if retval, err2 = p.handler.TestBinary(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testBinary: "+err2.Error())
		oprot.WriteMessageBegin("testBinary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testBinary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestStruct struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestStruct) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestStructArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testStruct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestStructResult{}
	var retval *Xtruct
	var err2 error
	if retval, err2 = p.handler.TestStruct(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testStruct: "+err2.Error())
		oprot.WriteMessageBegin("testStruct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testStruct", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestNest struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestNest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestNestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testNest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestNestResult{}
	var retval *Xtruct2
	var err2 error
	if retval, err2 = p.handler.TestNest(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testNest: "+err2.Error())
		oprot.WriteMessageBegin("testNest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testNest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestMap struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestMap) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestMapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestMapResult{}
	var retval map[int32]int32
	var err2 error
	if retval, err2 = p.handler.TestMap(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testMap: "+err2.Error())
		oprot.WriteMessageBegin("testMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testMap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestStringMap struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestStringMap) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestStringMapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testStringMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestStringMapResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.TestStringMap(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testStringMap: "+err2.Error())
		oprot.WriteMessageBegin("testStringMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testStringMap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestSet struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestSet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestSetResult{}
	var retval map[int32]bool
	var err2 error
	if retval, err2 = p.handler.TestSet(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testSet: "+err2.Error())
		oprot.WriteMessageBegin("testSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestList struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestListResult{}
	var retval []int32
	var err2 error
	if retval, err2 = p.handler.TestList(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testList: "+err2.Error())
		oprot.WriteMessageBegin("testList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestEnum struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestEnum) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestEnumArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testEnum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestEnumResult{}
	var retval Numberz
	var err2 error
	if retval, err2 = p.handler.TestEnum(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testEnum: "+err2.Error())
		oprot.WriteMessageBegin("testEnum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testEnum", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestTypedef struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestTypedef) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestTypedefArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testTypedef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestTypedefResult{}
	var retval UserId
	var err2 error
	if retval, err2 = p.handler.TestTypedef(args.Thing); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testTypedef: "+err2.Error())
		oprot.WriteMessageBegin("testTypedef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testTypedef", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestMapMap struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestMapMap) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestMapMapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testMapMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestMapMapResult{}
	var retval map[int32]map[int32]int32
	var err2 error
	if retval, err2 = p.handler.TestMapMap(args.Hello); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testMapMap: "+err2.Error())
		oprot.WriteMessageBegin("testMapMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testMapMap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestInsanity struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestInsanity) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestInsanityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testInsanity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestInsanityResult{}
	var retval map[UserId]map[Numberz]*Insanity
	var err2 error
	if retval, err2 = p.handler.TestInsanity(args.Argument); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testInsanity: "+err2.Error())
		oprot.WriteMessageBegin("testInsanity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testInsanity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestMulti struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestMulti) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestMultiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testMulti", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestMultiResult{}
	var retval *Xtruct
	var err2 error
	if retval, err2 = p.handler.TestMulti(args.Arg0, args.Arg1, args.Arg2, args.Arg3, args.Arg4, args.Arg5); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testMulti: "+err2.Error())
		oprot.WriteMessageBegin("testMulti", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testMulti", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestException struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestException) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestExceptionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testException", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestExceptionResult{}
	var err2 error
	if err2 = p.handler.TestException(args.Arg); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Err1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testException: "+err2.Error())
			oprot.WriteMessageBegin("testException", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("testException", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestMultiException struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestMultiException) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestMultiExceptionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testMultiException", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FrugalTestTestMultiExceptionResult{}
	var retval *Xtruct
	var err2 error
	if retval, err2 = p.handler.TestMultiException(args.Arg0, args.Arg1); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Err1 = v
		case *Xception2:
			result.Err2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testMultiException: "+err2.Error())
			oprot.WriteMessageBegin("testMultiException", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testMultiException", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frugalTestProcessorTestOneway struct {
	handler FrugalTest
}

func (p *frugalTestProcessorTestOneway) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrugalTestTestOnewayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TestOneway(args.SecondsToSleep); err2 != nil {
		return true, err2
	}
	return true, nil
}

// HELPER FUNCTIONS AND STRUCTURES

type FrugalTestTestVoidArgs struct {
}

func NewFrugalTestTestVoidArgs() *FrugalTestTestVoidArgs {
	return &FrugalTestTestVoidArgs{}
}

func (p *FrugalTestTestVoidArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestVoidArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testVoid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestVoidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestVoidArgs(%+v)", *p)
}

type FrugalTestTestVoidResult struct {
}

func NewFrugalTestTestVoidResult() *FrugalTestTestVoidResult {
	return &FrugalTestTestVoidResult{}
}

func (p *FrugalTestTestVoidResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestVoidResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testVoid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestVoidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestVoidResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestStringArgs struct {
	Thing string `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestStringArgs() *FrugalTestTestStringArgs {
	return &FrugalTestTestStringArgs{}
}

func (p *FrugalTestTestStringArgs) GetThing() string {
	return p.Thing
}
func (p *FrugalTestTestStringArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestStringArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *FrugalTestTestStringArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testString_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestStringArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteString(string(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestStringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestStringArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestStringResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestStringResult() *FrugalTestTestStringResult {
	return &FrugalTestTestStringResult{}
}

var FrugalTestTestStringResult_Success_DEFAULT string

func (p *FrugalTestTestStringResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FrugalTestTestStringResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FrugalTestTestStringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestStringResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestStringResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FrugalTestTestStringResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testString_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestStringResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestStringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestStringResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestBoolArgs struct {
	Thing bool `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestBoolArgs() *FrugalTestTestBoolArgs {
	return &FrugalTestTestBoolArgs{}
}

func (p *FrugalTestTestBoolArgs) GetThing() bool {
	return p.Thing
}
func (p *FrugalTestTestBoolArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestBoolArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *FrugalTestTestBoolArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testBool_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestBoolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestBoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestBoolArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestBoolResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestBoolResult() *FrugalTestTestBoolResult {
	return &FrugalTestTestBoolResult{}
}

var FrugalTestTestBoolResult_Success_DEFAULT bool

func (p *FrugalTestTestBoolResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return FrugalTestTestBoolResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FrugalTestTestBoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestBoolResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestBoolResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FrugalTestTestBoolResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testBool_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestBoolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestBoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestBoolResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestByteArgs struct {
	Thing int8 `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestByteArgs() *FrugalTestTestByteArgs {
	return &FrugalTestTestByteArgs{}
}

func (p *FrugalTestTestByteArgs) GetThing() int8 {
	return p.Thing
}
func (p *FrugalTestTestByteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestByteArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Thing = temp
	}
	return nil
}

func (p *FrugalTestTestByteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testByte_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestByteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestByteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestByteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestByteResult struct {
	Success *int8 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestByteResult() *FrugalTestTestByteResult {
	return &FrugalTestTestByteResult{}
}

var FrugalTestTestByteResult_Success_DEFAULT int8

func (p *FrugalTestTestByteResult) GetSuccess() int8 {
	if !p.IsSetSuccess() {
		return FrugalTestTestByteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FrugalTestTestByteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestByteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestByteResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := int8(v)
		p.Success = &temp
	}
	return nil
}

func (p *FrugalTestTestByteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testByte_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestByteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BYTE, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestByteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestByteResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestI32Args struct {
	Thing int32 `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestI32Args() *FrugalTestTestI32Args {
	return &FrugalTestTestI32Args{}
}

func (p *FrugalTestTestI32Args) GetThing() int32 {
	return p.Thing
}
func (p *FrugalTestTestI32Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestI32Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *FrugalTestTestI32Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testI32_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestI32Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestI32Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestI32Args(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestI32Result struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestI32Result() *FrugalTestTestI32Result {
	return &FrugalTestTestI32Result{}
}

var FrugalTestTestI32Result_Success_DEFAULT int32

func (p *FrugalTestTestI32Result) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return FrugalTestTestI32Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *FrugalTestTestI32Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestI32Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestI32Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FrugalTestTestI32Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testI32_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestI32Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestI32Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestI32Result(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestI64Args struct {
	Thing int64 `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestI64Args() *FrugalTestTestI64Args {
	return &FrugalTestTestI64Args{}
}

func (p *FrugalTestTestI64Args) GetThing() int64 {
	return p.Thing
}
func (p *FrugalTestTestI64Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestI64Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *FrugalTestTestI64Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testI64_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestI64Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestI64Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestI64Args(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestI64Result struct {
	Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestI64Result() *FrugalTestTestI64Result {
	return &FrugalTestTestI64Result{}
}

var FrugalTestTestI64Result_Success_DEFAULT int64

func (p *FrugalTestTestI64Result) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return FrugalTestTestI64Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *FrugalTestTestI64Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestI64Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestI64Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FrugalTestTestI64Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testI64_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestI64Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestI64Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestI64Result(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestDoubleArgs struct {
	Thing float64 `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestDoubleArgs() *FrugalTestTestDoubleArgs {
	return &FrugalTestTestDoubleArgs{}
}

func (p *FrugalTestTestDoubleArgs) GetThing() float64 {
	return p.Thing
}
func (p *FrugalTestTestDoubleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestDoubleArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *FrugalTestTestDoubleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testDouble_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestDoubleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestDoubleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestDoubleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestDoubleResult struct {
	Success *float64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestDoubleResult() *FrugalTestTestDoubleResult {
	return &FrugalTestTestDoubleResult{}
}

var FrugalTestTestDoubleResult_Success_DEFAULT float64

func (p *FrugalTestTestDoubleResult) GetSuccess() float64 {
	if !p.IsSetSuccess() {
		return FrugalTestTestDoubleResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FrugalTestTestDoubleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestDoubleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestDoubleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FrugalTestTestDoubleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testDouble_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestDoubleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.DOUBLE, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestDoubleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestDoubleResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestBinaryArgs struct {
	Thing []byte `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestBinaryArgs() *FrugalTestTestBinaryArgs {
	return &FrugalTestTestBinaryArgs{}
}

func (p *FrugalTestTestBinaryArgs) GetThing() []byte {
	return p.Thing
}
func (p *FrugalTestTestBinaryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestBinaryArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Thing = v
	}
	return nil
}

func (p *FrugalTestTestBinaryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testBinary_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestBinaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteBinary(p.Thing); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestBinaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestBinaryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestBinaryResult struct {
	Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestBinaryResult() *FrugalTestTestBinaryResult {
	return &FrugalTestTestBinaryResult{}
}

var FrugalTestTestBinaryResult_Success_DEFAULT []byte

func (p *FrugalTestTestBinaryResult) GetSuccess() []byte {
	return p.Success
}
func (p *FrugalTestTestBinaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestBinaryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestBinaryResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *FrugalTestTestBinaryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testBinary_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestBinaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestBinaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestBinaryResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestStructArgs struct {
	Thing *Xtruct `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestStructArgs() *FrugalTestTestStructArgs {
	return &FrugalTestTestStructArgs{}
}

var FrugalTestTestStructArgs_Thing_DEFAULT *Xtruct

func (p *FrugalTestTestStructArgs) GetThing() *Xtruct {
	if !p.IsSetThing() {
		return FrugalTestTestStructArgs_Thing_DEFAULT
	}
	return p.Thing
}
func (p *FrugalTestTestStructArgs) IsSetThing() bool {
	return p.Thing != nil
}

func (p *FrugalTestTestStructArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestStructArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Thing = &Xtruct{}
	if err := p.Thing.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Thing), err)
	}
	return nil
}

func (p *FrugalTestTestStructArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testStruct_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestStructArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := p.Thing.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Thing), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestStructArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestStructArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestStructResult struct {
	Success *Xtruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestStructResult() *FrugalTestTestStructResult {
	return &FrugalTestTestStructResult{}
}

var FrugalTestTestStructResult_Success_DEFAULT *Xtruct

func (p *FrugalTestTestStructResult) GetSuccess() *Xtruct {
	if !p.IsSetSuccess() {
		return FrugalTestTestStructResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrugalTestTestStructResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestStructResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestStructResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Xtruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FrugalTestTestStructResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testStruct_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestStructResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestStructResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestStructResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestNestArgs struct {
	Thing *Xtruct2 `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestNestArgs() *FrugalTestTestNestArgs {
	return &FrugalTestTestNestArgs{}
}

var FrugalTestTestNestArgs_Thing_DEFAULT *Xtruct2

func (p *FrugalTestTestNestArgs) GetThing() *Xtruct2 {
	if !p.IsSetThing() {
		return FrugalTestTestNestArgs_Thing_DEFAULT
	}
	return p.Thing
}
func (p *FrugalTestTestNestArgs) IsSetThing() bool {
	return p.Thing != nil
}

func (p *FrugalTestTestNestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestNestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Thing = &Xtruct2{}
	if err := p.Thing.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Thing), err)
	}
	return nil
}

func (p *FrugalTestTestNestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testNest_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestNestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := p.Thing.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Thing), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestNestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestNestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestNestResult struct {
	Success *Xtruct2 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestNestResult() *FrugalTestTestNestResult {
	return &FrugalTestTestNestResult{}
}

var FrugalTestTestNestResult_Success_DEFAULT *Xtruct2

func (p *FrugalTestTestNestResult) GetSuccess() *Xtruct2 {
	if !p.IsSetSuccess() {
		return FrugalTestTestNestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrugalTestTestNestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestNestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestNestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Xtruct2{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FrugalTestTestNestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testNest_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestNestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestNestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestNestResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestMapArgs struct {
	Thing map[int32]int32 `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestMapArgs() *FrugalTestTestMapArgs {
	return &FrugalTestTestMapArgs{}
}

func (p *FrugalTestTestMapArgs) GetThing() map[int32]int32 {
	return p.Thing
}
func (p *FrugalTestTestMapArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestMapArgs) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]int32, size)
	p.Thing = tMap
	for i := 0; i < size; i++ {
		var _key75 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key75 = v
		}
		var _val76 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val76 = v
		}
		p.Thing[_key75] = _val76
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *FrugalTestTestMapArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMap_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.Thing)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Thing {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestMapArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestMapResult struct {
	Success map[int32]int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestMapResult() *FrugalTestTestMapResult {
	return &FrugalTestTestMapResult{}
}

var FrugalTestTestMapResult_Success_DEFAULT map[int32]int32

func (p *FrugalTestTestMapResult) GetSuccess() map[int32]int32 {
	return p.Success
}
func (p *FrugalTestTestMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestMapResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestMapResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]int32, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key77 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key77 = v
		}
		var _val78 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val78 = v
		}
		p.Success[_key77] = _val78
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *FrugalTestTestMapResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMap_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestMapResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestStringMapArgs struct {
	Thing map[string]string `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestStringMapArgs() *FrugalTestTestStringMapArgs {
	return &FrugalTestTestStringMapArgs{}
}

func (p *FrugalTestTestStringMapArgs) GetThing() map[string]string {
	return p.Thing
}
func (p *FrugalTestTestStringMapArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestStringMapArgs) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Thing = tMap
	for i := 0; i < size; i++ {
		var _key79 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key79 = v
		}
		var _val80 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val80 = v
		}
		p.Thing[_key79] = _val80
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *FrugalTestTestStringMapArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testStringMap_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestStringMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Thing)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Thing {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestStringMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestStringMapArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestStringMapResult struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestStringMapResult() *FrugalTestTestStringMapResult {
	return &FrugalTestTestStringMapResult{}
}

var FrugalTestTestStringMapResult_Success_DEFAULT map[string]string

func (p *FrugalTestTestStringMapResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *FrugalTestTestStringMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestStringMapResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestStringMapResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key81 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key81 = v
		}
		var _val82 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val82 = v
		}
		p.Success[_key81] = _val82
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *FrugalTestTestStringMapResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testStringMap_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestStringMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestStringMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestStringMapResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestSetArgs struct {
	Thing map[int32]bool `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestSetArgs() *FrugalTestTestSetArgs {
	return &FrugalTestTestSetArgs{}
}

func (p *FrugalTestTestSetArgs) GetThing() map[int32]bool {
	return p.Thing
}
func (p *FrugalTestTestSetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestSetArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int32]bool, size)
	p.Thing = tSet
	for i := 0; i < size; i++ {
		var _elem83 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem83 = v
		}
		p.Thing[_elem83] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *FrugalTestTestSetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testSet_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.SET, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.Thing)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Thing {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestSetResult struct {
	Success map[int32]bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestSetResult() *FrugalTestTestSetResult {
	return &FrugalTestTestSetResult{}
}

var FrugalTestTestSetResult_Success_DEFAULT map[int32]bool

func (p *FrugalTestTestSetResult) GetSuccess() map[int32]bool {
	return p.Success
}
func (p *FrugalTestTestSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestSetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestSetResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int32]bool, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		var _elem84 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem84 = v
		}
		p.Success[_elem84] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *FrugalTestTestSetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testSet_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.Success)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Success {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestSetResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestListArgs struct {
	Thing []int32 `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestListArgs() *FrugalTestTestListArgs {
	return &FrugalTestTestListArgs{}
}

func (p *FrugalTestTestListArgs) GetThing() []int32 {
	return p.Thing
}
func (p *FrugalTestTestListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestListArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.Thing = tSlice
	for i := 0; i < size; i++ {
		var _elem85 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem85 = v
		}
		p.Thing = append(p.Thing, _elem85)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FrugalTestTestListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Thing)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Thing {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestListResult struct {
	Success []int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestListResult() *FrugalTestTestListResult {
	return &FrugalTestTestListResult{}
}

var FrugalTestTestListResult_Success_DEFAULT []int32

func (p *FrugalTestTestListResult) GetSuccess() []int32 {
	return p.Success
}
func (p *FrugalTestTestListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem86 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem86 = v
		}
		p.Success = append(p.Success, _elem86)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FrugalTestTestListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestListResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestEnumArgs struct {
	Thing Numberz `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestEnumArgs() *FrugalTestTestEnumArgs {
	return &FrugalTestTestEnumArgs{}
}

func (p *FrugalTestTestEnumArgs) GetThing() Numberz {
	return p.Thing
}
func (p *FrugalTestTestEnumArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestEnumArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Numberz(v)
		p.Thing = temp
	}
	return nil
}

func (p *FrugalTestTestEnumArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testEnum_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestEnumArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestEnumArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestEnumArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestEnumResult struct {
	Success *Numberz `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestEnumResult() *FrugalTestTestEnumResult {
	return &FrugalTestTestEnumResult{}
}

var FrugalTestTestEnumResult_Success_DEFAULT Numberz

func (p *FrugalTestTestEnumResult) GetSuccess() Numberz {
	if !p.IsSetSuccess() {
		return FrugalTestTestEnumResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FrugalTestTestEnumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestEnumResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestEnumResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := Numberz(v)
		p.Success = &temp
	}
	return nil
}

func (p *FrugalTestTestEnumResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testEnum_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestEnumResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestEnumResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestEnumResult(%+v)", *p)
}

// Attributes:
//  - Thing
type FrugalTestTestTypedefArgs struct {
	Thing UserId `thrift:"thing,1" db:"thing" json:"thing"`
}

func NewFrugalTestTestTypedefArgs() *FrugalTestTestTypedefArgs {
	return &FrugalTestTestTypedefArgs{}
}

func (p *FrugalTestTestTypedefArgs) GetThing() UserId {
	return p.Thing
}
func (p *FrugalTestTestTypedefArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestTypedefArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := UserId(v)
		p.Thing = temp
	}
	return nil
}

func (p *FrugalTestTestTypedefArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testTypedef_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestTypedefArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thing", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thing: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Thing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.thing (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thing: ", p), err)
	}
	return err
}

func (p *FrugalTestTestTypedefArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestTypedefArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestTypedefResult struct {
	Success *UserId `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestTypedefResult() *FrugalTestTestTypedefResult {
	return &FrugalTestTestTypedefResult{}
}

var FrugalTestTestTypedefResult_Success_DEFAULT UserId

func (p *FrugalTestTestTypedefResult) GetSuccess() UserId {
	if !p.IsSetSuccess() {
		return FrugalTestTestTypedefResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FrugalTestTestTypedefResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestTypedefResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestTypedefResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := UserId(v)
		p.Success = &temp
	}
	return nil
}

func (p *FrugalTestTestTypedefResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testTypedef_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestTypedefResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestTypedefResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestTypedefResult(%+v)", *p)
}

// Attributes:
//  - Hello
type FrugalTestTestMapMapArgs struct {
	Hello int32 `thrift:"hello,1" db:"hello" json:"hello"`
}

func NewFrugalTestTestMapMapArgs() *FrugalTestTestMapMapArgs {
	return &FrugalTestTestMapMapArgs{}
}

func (p *FrugalTestTestMapMapArgs) GetHello() int32 {
	return p.Hello
}
func (p *FrugalTestTestMapMapArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestMapMapArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hello = v
	}
	return nil
}

func (p *FrugalTestTestMapMapArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMapMap_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestMapMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hello", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hello: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Hello)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hello (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hello: ", p), err)
	}
	return err
}

func (p *FrugalTestTestMapMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestMapMapArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestMapMapResult struct {
	Success map[int32]map[int32]int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestMapMapResult() *FrugalTestTestMapMapResult {
	return &FrugalTestTestMapMapResult{}
}

var FrugalTestTestMapMapResult_Success_DEFAULT map[int32]map[int32]int32

func (p *FrugalTestTestMapMapResult) GetSuccess() map[int32]map[int32]int32 {
	return p.Success
}
func (p *FrugalTestTestMapMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestMapMapResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestMapMapResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]map[int32]int32, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key87 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key87 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]int32, size)
		_val88 := tMap
		for i := 0; i < size; i++ {
			var _key89 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key89 = v
			}
			var _val90 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val90 = v
			}
			_val88[_key89] = _val90
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Success[_key87] = _val88
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *FrugalTestTestMapMapResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMapMap_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestMapMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteI32(int32(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestMapMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestMapMapResult(%+v)", *p)
}

// Attributes:
//  - Argument
type FrugalTestTestInsanityArgs struct {
	Argument *Insanity `thrift:"argument,1" db:"argument" json:"argument"`
}

func NewFrugalTestTestInsanityArgs() *FrugalTestTestInsanityArgs {
	return &FrugalTestTestInsanityArgs{}
}

var FrugalTestTestInsanityArgs_Argument_DEFAULT *Insanity

func (p *FrugalTestTestInsanityArgs) GetArgument() *Insanity {
	if !p.IsSetArgument() {
		return FrugalTestTestInsanityArgs_Argument_DEFAULT
	}
	return p.Argument
}
func (p *FrugalTestTestInsanityArgs) IsSetArgument() bool {
	return p.Argument != nil
}

func (p *FrugalTestTestInsanityArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestInsanityArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Argument = &Insanity{}
	if err := p.Argument.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Argument), err)
	}
	return nil
}

func (p *FrugalTestTestInsanityArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testInsanity_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestInsanityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argument", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:argument: ", p), err)
	}
	if err := p.Argument.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Argument), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:argument: ", p), err)
	}
	return err
}

func (p *FrugalTestTestInsanityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestInsanityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestInsanityResult struct {
	Success map[UserId]map[Numberz]*Insanity `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestInsanityResult() *FrugalTestTestInsanityResult {
	return &FrugalTestTestInsanityResult{}
}

var FrugalTestTestInsanityResult_Success_DEFAULT map[UserId]map[Numberz]*Insanity

func (p *FrugalTestTestInsanityResult) GetSuccess() map[UserId]map[Numberz]*Insanity {
	return p.Success
}
func (p *FrugalTestTestInsanityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestInsanityResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestInsanityResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[UserId]map[Numberz]*Insanity, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key91 UserId
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := UserId(v)
			_key91 = temp
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[Numberz]*Insanity, size)
		_val92 := tMap
		for i := 0; i < size; i++ {
			var _key93 Numberz
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				temp := Numberz(v)
				_key93 = temp
			}
			_val94 := &Insanity{}
			if err := _val94.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val94), err)
			}
			_val92[_key93] = _val94
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Success[_key91] = _val92
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *FrugalTestTestInsanityResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testInsanity_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestInsanityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.MAP, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestInsanityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestInsanityResult(%+v)", *p)
}

// Attributes:
//  - Arg0
//  - Arg1
//  - Arg2
//  - Arg3
//  - Arg4
//  - Arg5
type FrugalTestTestMultiArgs struct {
	Arg0 int8             `thrift:"arg0,1" db:"arg0" json:"arg0"`
	Arg1 int32            `thrift:"arg1,2" db:"arg1" json:"arg1"`
	Arg2 int64            `thrift:"arg2,3" db:"arg2" json:"arg2"`
	Arg3 map[int16]string `thrift:"arg3,4" db:"arg3" json:"arg3"`
	Arg4 Numberz          `thrift:"arg4,5" db:"arg4" json:"arg4"`
	Arg5 UserId           `thrift:"arg5,6" db:"arg5" json:"arg5"`
}

func NewFrugalTestTestMultiArgs() *FrugalTestTestMultiArgs {
	return &FrugalTestTestMultiArgs{}
}

func (p *FrugalTestTestMultiArgs) GetArg0() int8 {
	return p.Arg0
}

func (p *FrugalTestTestMultiArgs) GetArg1() int32 {
	return p.Arg1
}

func (p *FrugalTestTestMultiArgs) GetArg2() int64 {
	return p.Arg2
}

func (p *FrugalTestTestMultiArgs) GetArg3() map[int16]string {
	return p.Arg3
}

func (p *FrugalTestTestMultiArgs) GetArg4() Numberz {
	return p.Arg4
}

func (p *FrugalTestTestMultiArgs) GetArg5() UserId {
	return p.Arg5
}
func (p *FrugalTestTestMultiArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestMultiArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Arg0 = temp
	}
	return nil
}

func (p *FrugalTestTestMultiArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Arg1 = v
	}
	return nil
}

func (p *FrugalTestTestMultiArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Arg2 = v
	}
	return nil
}

func (p *FrugalTestTestMultiArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int16]string, size)
	p.Arg3 = tMap
	for i := 0; i < size; i++ {
		var _key95 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key95 = v
		}
		var _val96 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val96 = v
		}
		p.Arg3[_key95] = _val96
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *FrugalTestTestMultiArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := Numberz(v)
		p.Arg4 = temp
	}
	return nil
}

func (p *FrugalTestTestMultiArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := UserId(v)
		p.Arg5 = temp
	}
	return nil
}

func (p *FrugalTestTestMultiArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMulti_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestMultiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg0", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg0: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Arg0)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg0 (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg0: ", p), err)
	}
	return err
}

func (p *FrugalTestTestMultiArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg1", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:arg1: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Arg1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg1 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:arg1: ", p), err)
	}
	return err
}

func (p *FrugalTestTestMultiArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg2", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:arg2: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Arg2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg2 (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:arg2: ", p), err)
	}
	return err
}

func (p *FrugalTestTestMultiArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg3", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:arg3: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I16, thrift.STRING, len(p.Arg3)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Arg3 {
		if err := oprot.WriteI16(int16(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:arg3: ", p), err)
	}
	return err
}

func (p *FrugalTestTestMultiArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg4", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:arg4: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Arg4)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg4 (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:arg4: ", p), err)
	}
	return err
}

func (p *FrugalTestTestMultiArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg5", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:arg5: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Arg5)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg5 (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:arg5: ", p), err)
	}
	return err
}

func (p *FrugalTestTestMultiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestMultiArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FrugalTestTestMultiResult struct {
	Success *Xtruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFrugalTestTestMultiResult() *FrugalTestTestMultiResult {
	return &FrugalTestTestMultiResult{}
}

var FrugalTestTestMultiResult_Success_DEFAULT *Xtruct

func (p *FrugalTestTestMultiResult) GetSuccess() *Xtruct {
	if !p.IsSetSuccess() {
		return FrugalTestTestMultiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrugalTestTestMultiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestMultiResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestMultiResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Xtruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FrugalTestTestMultiResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMulti_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestMultiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestMultiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestMultiResult(%+v)", *p)
}

// Attributes:
//  - Arg
type FrugalTestTestExceptionArgs struct {
	Arg string `thrift:"arg,1" db:"arg" json:"arg"`
}

func NewFrugalTestTestExceptionArgs() *FrugalTestTestExceptionArgs {
	return &FrugalTestTestExceptionArgs{}
}

func (p *FrugalTestTestExceptionArgs) GetArg() string {
	return p.Arg
}
func (p *FrugalTestTestExceptionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestExceptionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Arg = v
	}
	return nil
}

func (p *FrugalTestTestExceptionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testException_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestExceptionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Arg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err)
	}
	return err
}

func (p *FrugalTestTestExceptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestExceptionArgs(%+v)", *p)
}

// Attributes:
//  - Err1
type FrugalTestTestExceptionResult struct {
	Err1 *Xception `thrift:"err1,1" db:"err1" json:"err1,omitempty"`
}

func NewFrugalTestTestExceptionResult() *FrugalTestTestExceptionResult {
	return &FrugalTestTestExceptionResult{}
}

var FrugalTestTestExceptionResult_Err1_DEFAULT *Xception

func (p *FrugalTestTestExceptionResult) GetErr1() *Xception {
	if !p.IsSetErr1() {
		return FrugalTestTestExceptionResult_Err1_DEFAULT
	}
	return p.Err1
}
func (p *FrugalTestTestExceptionResult) IsSetErr1() bool {
	return p.Err1 != nil
}

func (p *FrugalTestTestExceptionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestExceptionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err1 = &Xception{}
	if err := p.Err1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err1), err)
	}
	return nil
}

func (p *FrugalTestTestExceptionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testException_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestExceptionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr1() {
		if err := oprot.WriteFieldBegin("err1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err1: ", p), err)
		}
		if err := p.Err1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err1: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestExceptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestExceptionResult(%+v)", *p)
}

// Attributes:
//  - Arg0
//  - Arg1
type FrugalTestTestMultiExceptionArgs struct {
	Arg0 string `thrift:"arg0,1" db:"arg0" json:"arg0"`
	Arg1 string `thrift:"arg1,2" db:"arg1" json:"arg1"`
}

func NewFrugalTestTestMultiExceptionArgs() *FrugalTestTestMultiExceptionArgs {
	return &FrugalTestTestMultiExceptionArgs{}
}

func (p *FrugalTestTestMultiExceptionArgs) GetArg0() string {
	return p.Arg0
}

func (p *FrugalTestTestMultiExceptionArgs) GetArg1() string {
	return p.Arg1
}
func (p *FrugalTestTestMultiExceptionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestMultiExceptionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Arg0 = v
	}
	return nil
}

func (p *FrugalTestTestMultiExceptionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Arg1 = v
	}
	return nil
}

func (p *FrugalTestTestMultiExceptionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMultiException_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestMultiExceptionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg0", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg0: ", p), err)
	}
	if err := oprot.WriteString(string(p.Arg0)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg0 (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg0: ", p), err)
	}
	return err
}

func (p *FrugalTestTestMultiExceptionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg1", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:arg1: ", p), err)
	}
	if err := oprot.WriteString(string(p.Arg1)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.arg1 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:arg1: ", p), err)
	}
	return err
}

func (p *FrugalTestTestMultiExceptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestMultiExceptionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err1
//  - Err2
type FrugalTestTestMultiExceptionResult struct {
	Success *Xtruct    `thrift:"success,0" db:"success" json:"success,omitempty"`
	Err1    *Xception  `thrift:"err1,1" db:"err1" json:"err1,omitempty"`
	Err2    *Xception2 `thrift:"err2,2" db:"err2" json:"err2,omitempty"`
}

func NewFrugalTestTestMultiExceptionResult() *FrugalTestTestMultiExceptionResult {
	return &FrugalTestTestMultiExceptionResult{}
}

var FrugalTestTestMultiExceptionResult_Success_DEFAULT *Xtruct

func (p *FrugalTestTestMultiExceptionResult) GetSuccess() *Xtruct {
	if !p.IsSetSuccess() {
		return FrugalTestTestMultiExceptionResult_Success_DEFAULT
	}
	return p.Success
}

var FrugalTestTestMultiExceptionResult_Err1_DEFAULT *Xception

func (p *FrugalTestTestMultiExceptionResult) GetErr1() *Xception {
	if !p.IsSetErr1() {
		return FrugalTestTestMultiExceptionResult_Err1_DEFAULT
	}
	return p.Err1
}

var FrugalTestTestMultiExceptionResult_Err2_DEFAULT *Xception2

func (p *FrugalTestTestMultiExceptionResult) GetErr2() *Xception2 {
	if !p.IsSetErr2() {
		return FrugalTestTestMultiExceptionResult_Err2_DEFAULT
	}
	return p.Err2
}
func (p *FrugalTestTestMultiExceptionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrugalTestTestMultiExceptionResult) IsSetErr1() bool {
	return p.Err1 != nil
}

func (p *FrugalTestTestMultiExceptionResult) IsSetErr2() bool {
	return p.Err2 != nil
}

func (p *FrugalTestTestMultiExceptionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestMultiExceptionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Xtruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FrugalTestTestMultiExceptionResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err1 = &Xception{}
	if err := p.Err1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err1), err)
	}
	return nil
}

func (p *FrugalTestTestMultiExceptionResult) ReadField2(iprot thrift.TProtocol) error {
	p.Err2 = &Xception2{}
	if err := p.Err2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err2), err)
	}
	return nil
}

func (p *FrugalTestTestMultiExceptionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testMultiException_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestMultiExceptionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestMultiExceptionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr1() {
		if err := oprot.WriteFieldBegin("err1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err1: ", p), err)
		}
		if err := p.Err1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err1: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestMultiExceptionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr2() {
		if err := oprot.WriteFieldBegin("err2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:err2: ", p), err)
		}
		if err := p.Err2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:err2: ", p), err)
		}
	}
	return err
}

func (p *FrugalTestTestMultiExceptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestMultiExceptionResult(%+v)", *p)
}

// Attributes:
//  - SecondsToSleep
type FrugalTestTestOnewayArgs struct {
	SecondsToSleep int32 `thrift:"secondsToSleep,1" db:"secondsToSleep" json:"secondsToSleep"`
}

func NewFrugalTestTestOnewayArgs() *FrugalTestTestOnewayArgs {
	return &FrugalTestTestOnewayArgs{}
}

func (p *FrugalTestTestOnewayArgs) GetSecondsToSleep() int32 {
	return p.SecondsToSleep
}
func (p *FrugalTestTestOnewayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FrugalTestTestOnewayArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SecondsToSleep = v
	}
	return nil
}

func (p *FrugalTestTestOnewayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testOneway_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FrugalTestTestOnewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("secondsToSleep", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:secondsToSleep: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SecondsToSleep)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.secondsToSleep (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:secondsToSleep: ", p), err)
	}
	return err
}

func (p *FrugalTestTestOnewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrugalTestTestOnewayArgs(%+v)", *p)
}
