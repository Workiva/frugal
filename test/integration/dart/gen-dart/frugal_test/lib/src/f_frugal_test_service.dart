// Autogenerated by Frugal Compiler (3.17.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING



// ignore_for_file: unused_import
// ignore_for_file: unused_field
import 'dart:async';
import 'dart:typed_data' show Uint8List;

import 'package:collection/collection.dart';
import 'package:logging/logging.dart' as logging;
import 'package:thrift/thrift.dart' as thrift;
import 'package:frugal/frugal.dart' as frugal;
import 'package:w_common/disposable.dart' as disposable;

import 'package:frugal_test/frugal_test.dart' as t_frugal_test;


abstract class FFrugalTest extends t_frugal_test.FSuperService {
  Future testVoid(frugal.FContext ctx);

  Future<String> testString(frugal.FContext ctx, String thing);

  /// Deprecated: use something else
  @deprecated
  Future<bool> testBool(frugal.FContext ctx, bool thing);

  Future<int> testByte(frugal.FContext ctx, int thing);

  Future<int> testI32(frugal.FContext ctx, int thing);

  Future<int> testI64(frugal.FContext ctx, int thing);

  Future<double> testDouble(frugal.FContext ctx, double thing);

  Future<Uint8List> testBinary(frugal.FContext ctx, Uint8List thing);

  Future<t_frugal_test.Xtruct> testStruct(frugal.FContext ctx, t_frugal_test.Xtruct thing);

  Future<t_frugal_test.Xtruct2> testNest(frugal.FContext ctx, t_frugal_test.Xtruct2 thing);

  Future<Map<int, int>> testMap(frugal.FContext ctx, Map<int, int> thing);

  Future<Map<String, String>> testStringMap(frugal.FContext ctx, Map<String, String> thing);

  Future<Set<int>> testSet(frugal.FContext ctx, Set<int> thing);

  Future<List<int>> testList(frugal.FContext ctx, List<int> thing);

  Future<int> testEnum(frugal.FContext ctx, int thing);

  Future<int> testTypedef(frugal.FContext ctx, int thing);

  Future<Map<int, Map<int, int>>> testMapMap(frugal.FContext ctx, int hello);

  Future<bool> testUppercaseMethod(frugal.FContext ctx, bool thing);

  Future<Map<int, Map<int, t_frugal_test.Insanity>>> testInsanity(frugal.FContext ctx, t_frugal_test.Insanity argument);

  Future<t_frugal_test.Xtruct> testMulti(frugal.FContext ctx, int arg0, int arg1, int arg2, Map<int, String> arg3, int arg4, int arg5);

  Future testException(frugal.FContext ctx, String arg);

  Future<t_frugal_test.Xtruct> testMultiException(frugal.FContext ctx, String arg0, String arg1);

  Future testUncaughtException(frugal.FContext ctx);

  Future testUncheckedTApplicationException(frugal.FContext ctx);

  Future testRequestTooLarge(frugal.FContext ctx, Uint8List request);

  Future<Uint8List> testResponseTooLarge(frugal.FContext ctx, Uint8List request);

  Future testOneway(frugal.FContext ctx, int millisecondsToSleep);
}

FFrugalTestClient fFrugalTestClientFactory(frugal.FServiceProvider provider, {List<frugal.Middleware> middleware}) =>
    FFrugalTestClient(provider, middleware);

// The below ignore statement is only needed to workaround https://github.com/dart-lang/sdk/issues/29751, which is fixed on Dart 2.8.0 and later.
// Dart versions before 2.8.0 need this ignore to analyze properly.
// ignore: private_collision_in_mixin_application
class FFrugalTestClient extends t_frugal_test.FSuperServiceClient with disposable.Disposable implements FFrugalTest {
  static final logging.Logger _frugalLog = logging.Logger('FrugalTest');
  Map<String, frugal.FMethod> _methods;

  FFrugalTestClient(frugal.FServiceProvider provider, [List<frugal.Middleware> middleware])
      : this._provider = provider,
        super(provider, middleware) {
    _transport = provider.transport;
    _protocolFactory = provider.protocolFactory;
    var combined = middleware ?? [];
    combined.addAll(provider.middleware);
    this._methods = {};
    this._methods['testVoid'] = frugal.FMethod(this._testVoid, 'FrugalTest', 'testVoid', combined);
    this._methods['testString'] = frugal.FMethod(this._testString, 'FrugalTest', 'testString', combined);
    this._methods['testBool'] = frugal.FMethod(this._testBool, 'FrugalTest', 'testBool', combined);
    this._methods['testByte'] = frugal.FMethod(this._testByte, 'FrugalTest', 'testByte', combined);
    this._methods['testI32'] = frugal.FMethod(this._testI32, 'FrugalTest', 'testI32', combined);
    this._methods['testI64'] = frugal.FMethod(this._testI64, 'FrugalTest', 'testI64', combined);
    this._methods['testDouble'] = frugal.FMethod(this._testDouble, 'FrugalTest', 'testDouble', combined);
    this._methods['testBinary'] = frugal.FMethod(this._testBinary, 'FrugalTest', 'testBinary', combined);
    this._methods['testStruct'] = frugal.FMethod(this._testStruct, 'FrugalTest', 'testStruct', combined);
    this._methods['testNest'] = frugal.FMethod(this._testNest, 'FrugalTest', 'testNest', combined);
    this._methods['testMap'] = frugal.FMethod(this._testMap, 'FrugalTest', 'testMap', combined);
    this._methods['testStringMap'] = frugal.FMethod(this._testStringMap, 'FrugalTest', 'testStringMap', combined);
    this._methods['testSet'] = frugal.FMethod(this._testSet, 'FrugalTest', 'testSet', combined);
    this._methods['testList'] = frugal.FMethod(this._testList, 'FrugalTest', 'testList', combined);
    this._methods['testEnum'] = frugal.FMethod(this._testEnum, 'FrugalTest', 'testEnum', combined);
    this._methods['testTypedef'] = frugal.FMethod(this._testTypedef, 'FrugalTest', 'testTypedef', combined);
    this._methods['testMapMap'] = frugal.FMethod(this._testMapMap, 'FrugalTest', 'testMapMap', combined);
    this._methods['testUppercaseMethod'] = frugal.FMethod(this._testUppercaseMethod, 'FrugalTest', 'testUppercaseMethod', combined);
    this._methods['testInsanity'] = frugal.FMethod(this._testInsanity, 'FrugalTest', 'testInsanity', combined);
    this._methods['testMulti'] = frugal.FMethod(this._testMulti, 'FrugalTest', 'testMulti', combined);
    this._methods['testException'] = frugal.FMethod(this._testException, 'FrugalTest', 'testException', combined);
    this._methods['testMultiException'] = frugal.FMethod(this._testMultiException, 'FrugalTest', 'testMultiException', combined);
    this._methods['testUncaughtException'] = frugal.FMethod(this._testUncaughtException, 'FrugalTest', 'testUncaughtException', combined);
    this._methods['testUncheckedTApplicationException'] = frugal.FMethod(this._testUncheckedTApplicationException, 'FrugalTest', 'testUncheckedTApplicationException', combined);
    this._methods['testRequestTooLarge'] = frugal.FMethod(this._testRequestTooLarge, 'FrugalTest', 'testRequestTooLarge', combined);
    this._methods['testResponseTooLarge'] = frugal.FMethod(this._testResponseTooLarge, 'FrugalTest', 'testResponseTooLarge', combined);
    this._methods['testOneway'] = frugal.FMethod(this._testOneway, 'FrugalTest', 'testOneway', combined);
  }

  frugal.FServiceProvider _provider;
  frugal.FTransport _transport;
  frugal.FProtocolFactory _protocolFactory;

  @override
  Future<Null> onDispose() async {
    if (_provider is disposable.Disposable && !_provider.isOrWillBeDisposed)  {
      return _provider.dispose();
    }
    return null;
  }

  @override
  Future testVoid(frugal.FContext ctx) {
    return this._methods['testVoid']([ctx]);
  }

  Future _testVoid(frugal.FContext ctx) async {
    final args = testVoid_args();
    final message = frugal.prepareMessage(ctx, 'testVoid', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testVoid_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
  }
  @override
  Future<String> testString(frugal.FContext ctx, String thing) {
    return this._methods['testString']([ctx, thing]).then((value) => value as String);
  }

  Future<String> _testString(frugal.FContext ctx, String thing) async {
    final args = testString_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testString', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testString_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testString failed: unknown result'
    );
  }
  /// Deprecated: use something else
  @deprecated
  @override
  Future<bool> testBool(frugal.FContext ctx, bool thing) {
    _frugalLog.warning("Call to deprecated function 'FrugalTest.testBool'");
    return this._methods['testBool']([ctx, thing]).then((value) => value as bool);
  }

  Future<bool> _testBool(frugal.FContext ctx, bool thing) async {
    final args = testBool_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testBool', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testBool_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testBool failed: unknown result'
    );
  }
  @override
  Future<int> testByte(frugal.FContext ctx, int thing) {
    return this._methods['testByte']([ctx, thing]).then((value) => value as int);
  }

  Future<int> _testByte(frugal.FContext ctx, int thing) async {
    final args = testByte_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testByte', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testByte_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testByte failed: unknown result'
    );
  }
  @override
  Future<int> testI32(frugal.FContext ctx, int thing) {
    return this._methods['testI32']([ctx, thing]).then((value) => value as int);
  }

  Future<int> _testI32(frugal.FContext ctx, int thing) async {
    final args = testI32_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testI32', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testI32_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testI32 failed: unknown result'
    );
  }
  @override
  Future<int> testI64(frugal.FContext ctx, int thing) {
    return this._methods['testI64']([ctx, thing]).then((value) => value as int);
  }

  Future<int> _testI64(frugal.FContext ctx, int thing) async {
    final args = testI64_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testI64', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testI64_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testI64 failed: unknown result'
    );
  }
  @override
  Future<double> testDouble(frugal.FContext ctx, double thing) {
    return this._methods['testDouble']([ctx, thing]).then((value) => value as double);
  }

  Future<double> _testDouble(frugal.FContext ctx, double thing) async {
    final args = testDouble_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testDouble', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testDouble_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testDouble failed: unknown result'
    );
  }
  @override
  Future<Uint8List> testBinary(frugal.FContext ctx, Uint8List thing) {
    return this._methods['testBinary']([ctx, thing]).then((value) => value as Uint8List);
  }

  Future<Uint8List> _testBinary(frugal.FContext ctx, Uint8List thing) async {
    final args = testBinary_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testBinary', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testBinary_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testBinary failed: unknown result'
    );
  }
  @override
  Future<t_frugal_test.Xtruct> testStruct(frugal.FContext ctx, t_frugal_test.Xtruct thing) {
    return this._methods['testStruct']([ctx, thing]).then((value) => value as t_frugal_test.Xtruct);
  }

  Future<t_frugal_test.Xtruct> _testStruct(frugal.FContext ctx, t_frugal_test.Xtruct thing) async {
    final args = testStruct_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testStruct', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testStruct_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testStruct failed: unknown result'
    );
  }
  @override
  Future<t_frugal_test.Xtruct2> testNest(frugal.FContext ctx, t_frugal_test.Xtruct2 thing) {
    return this._methods['testNest']([ctx, thing]).then((value) => value as t_frugal_test.Xtruct2);
  }

  Future<t_frugal_test.Xtruct2> _testNest(frugal.FContext ctx, t_frugal_test.Xtruct2 thing) async {
    final args = testNest_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testNest', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testNest_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testNest failed: unknown result'
    );
  }
  @override
  Future<Map<int, int>> testMap(frugal.FContext ctx, Map<int, int> thing) {
    return this._methods['testMap']([ctx, thing]).then((value) => value as Map<int, int>);
  }

  Future<Map<int, int>> _testMap(frugal.FContext ctx, Map<int, int> thing) async {
    final args = testMap_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testMap', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testMap_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testMap failed: unknown result'
    );
  }
  @override
  Future<Map<String, String>> testStringMap(frugal.FContext ctx, Map<String, String> thing) {
    return this._methods['testStringMap']([ctx, thing]).then((value) => value as Map<String, String>);
  }

  Future<Map<String, String>> _testStringMap(frugal.FContext ctx, Map<String, String> thing) async {
    final args = testStringMap_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testStringMap', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testStringMap_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testStringMap failed: unknown result'
    );
  }
  @override
  Future<Set<int>> testSet(frugal.FContext ctx, Set<int> thing) {
    return this._methods['testSet']([ctx, thing]).then((value) => value as Set<int>);
  }

  Future<Set<int>> _testSet(frugal.FContext ctx, Set<int> thing) async {
    final args = testSet_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testSet', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testSet_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testSet failed: unknown result'
    );
  }
  @override
  Future<List<int>> testList(frugal.FContext ctx, List<int> thing) {
    return this._methods['testList']([ctx, thing]).then((value) => value as List<int>);
  }

  Future<List<int>> _testList(frugal.FContext ctx, List<int> thing) async {
    final args = testList_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testList', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testList_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testList failed: unknown result'
    );
  }
  @override
  Future<int> testEnum(frugal.FContext ctx, int thing) {
    return this._methods['testEnum']([ctx, thing]).then((value) => value as int);
  }

  Future<int> _testEnum(frugal.FContext ctx, int thing) async {
    final args = testEnum_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testEnum', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testEnum_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testEnum failed: unknown result'
    );
  }
  @override
  Future<int> testTypedef(frugal.FContext ctx, int thing) {
    return this._methods['testTypedef']([ctx, thing]).then((value) => value as int);
  }

  Future<int> _testTypedef(frugal.FContext ctx, int thing) async {
    final args = testTypedef_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testTypedef', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testTypedef_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testTypedef failed: unknown result'
    );
  }
  @override
  Future<Map<int, Map<int, int>>> testMapMap(frugal.FContext ctx, int hello) {
    return this._methods['testMapMap']([ctx, hello]).then((value) => value as Map<int, Map<int, int>>);
  }

  Future<Map<int, Map<int, int>>> _testMapMap(frugal.FContext ctx, int hello) async {
    final args = testMapMap_args();
    args.hello = hello;
    final message = frugal.prepareMessage(ctx, 'testMapMap', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testMapMap_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testMapMap failed: unknown result'
    );
  }
  @override
  Future<bool> testUppercaseMethod(frugal.FContext ctx, bool thing) {
    return this._methods['testUppercaseMethod']([ctx, thing]).then((value) => value as bool);
  }

  Future<bool> _testUppercaseMethod(frugal.FContext ctx, bool thing) async {
    final args = TestUppercaseMethod_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testUppercaseMethod', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = TestUppercaseMethod_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testUppercaseMethod failed: unknown result'
    );
  }
  @override
  Future<Map<int, Map<int, t_frugal_test.Insanity>>> testInsanity(frugal.FContext ctx, t_frugal_test.Insanity argument) {
    return this._methods['testInsanity']([ctx, argument]).then((value) => value as Map<int, Map<int, t_frugal_test.Insanity>>);
  }

  Future<Map<int, Map<int, t_frugal_test.Insanity>>> _testInsanity(frugal.FContext ctx, t_frugal_test.Insanity argument) async {
    final args = testInsanity_args();
    args.argument = argument;
    final message = frugal.prepareMessage(ctx, 'testInsanity', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testInsanity_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testInsanity failed: unknown result'
    );
  }
  @override
  Future<t_frugal_test.Xtruct> testMulti(frugal.FContext ctx, int arg0, int arg1, int arg2, Map<int, String> arg3, int arg4, int arg5) {
    return this._methods['testMulti']([ctx, arg0, arg1, arg2, arg3, arg4, arg5]).then((value) => value as t_frugal_test.Xtruct);
  }

  Future<t_frugal_test.Xtruct> _testMulti(frugal.FContext ctx, int arg0, int arg1, int arg2, Map<int, String> arg3, int arg4, int arg5) async {
    final args = testMulti_args();
    args.arg0 = arg0;
    args.arg1 = arg1;
    args.arg2 = arg2;
    args.arg3 = arg3;
    args.arg4 = arg4;
    args.arg5 = arg5;
    final message = frugal.prepareMessage(ctx, 'testMulti', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testMulti_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testMulti failed: unknown result'
    );
  }
  @override
  Future testException(frugal.FContext ctx, String arg) {
    return this._methods['testException']([ctx, arg]);
  }

  Future _testException(frugal.FContext ctx, String arg) async {
    final args = testException_args();
    args.arg = arg;
    final message = frugal.prepareMessage(ctx, 'testException', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testException_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.err1 != null) {
      throw result.err1;
    }
  }
  @override
  Future<t_frugal_test.Xtruct> testMultiException(frugal.FContext ctx, String arg0, String arg1) {
    return this._methods['testMultiException']([ctx, arg0, arg1]).then((value) => value as t_frugal_test.Xtruct);
  }

  Future<t_frugal_test.Xtruct> _testMultiException(frugal.FContext ctx, String arg0, String arg1) async {
    final args = testMultiException_args();
    args.arg0 = arg0;
    args.arg1 = arg1;
    final message = frugal.prepareMessage(ctx, 'testMultiException', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testMultiException_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    if (result.err1 != null) {
      throw result.err1;
    }
    if (result.err2 != null) {
      throw result.err2;
    }
    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testMultiException failed: unknown result'
    );
  }
  @override
  Future testUncaughtException(frugal.FContext ctx) {
    return this._methods['testUncaughtException']([ctx]);
  }

  Future _testUncaughtException(frugal.FContext ctx) async {
    final args = testUncaughtException_args();
    final message = frugal.prepareMessage(ctx, 'testUncaughtException', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testUncaughtException_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
  }
  @override
  Future testUncheckedTApplicationException(frugal.FContext ctx) {
    return this._methods['testUncheckedTApplicationException']([ctx]);
  }

  Future _testUncheckedTApplicationException(frugal.FContext ctx) async {
    final args = testUncheckedTApplicationException_args();
    final message = frugal.prepareMessage(ctx, 'testUncheckedTApplicationException', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testUncheckedTApplicationException_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
  }
  @override
  Future testRequestTooLarge(frugal.FContext ctx, Uint8List request) {
    return this._methods['testRequestTooLarge']([ctx, request]);
  }

  Future _testRequestTooLarge(frugal.FContext ctx, Uint8List request) async {
    final args = testRequestTooLarge_args();
    args.request = request;
    final message = frugal.prepareMessage(ctx, 'testRequestTooLarge', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testRequestTooLarge_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
  }
  @override
  Future<Uint8List> testResponseTooLarge(frugal.FContext ctx, Uint8List request) {
    return this._methods['testResponseTooLarge']([ctx, request]).then((value) => value as Uint8List);
  }

  Future<Uint8List> _testResponseTooLarge(frugal.FContext ctx, Uint8List request) async {
    final args = testResponseTooLarge_args();
    args.request = request;
    final message = frugal.prepareMessage(ctx, 'testResponseTooLarge', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = testResponseTooLarge_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testResponseTooLarge failed: unknown result'
    );
  }
  @override
  Future testOneway(frugal.FContext ctx, int millisecondsToSleep) {
    return this._methods['testOneway']([ctx, millisecondsToSleep]);
  }

  Future _testOneway(frugal.FContext ctx, int millisecondsToSleep) async {
    final args = testOneway_args();
    args.millisecondsToSleep = millisecondsToSleep;
    final message = frugal.prepareMessage(ctx, 'testOneway', args, thrift.TMessageType.ONEWAY, _protocolFactory, _transport.requestSizeLimit);
    await _transport.oneway(ctx, message);
  }

}

// ignore: camel_case_types
class testVoid_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testVoid_args');



  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testVoid_result extends frugal.FGeneratedArgsResultBase {


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testString_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testString_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.STRING, 1);

  String thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeString(this.thing);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
    // check for required fields
    if (this.thing == null) {
      throw thrift.TProtocolError(thrift.TProtocolErrorType.INVALID_DATA, "Required field 'thing' was not present in struct testString_args");
    }
  }
}
// ignore: camel_case_types
class testString_result extends frugal.FGeneratedArgsResultBase {
  String success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRING) {
            this.success = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testBool_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testBool_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.BOOL, 1);

  bool thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeBool(this.thing);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testBool_result extends frugal.FGeneratedArgsResultBase {
  bool success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.BOOL) {
            this.success = iprot.readBool();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testByte_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testByte_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.BYTE, 1);

  int thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeByte(this.thing);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testByte_result extends frugal.FGeneratedArgsResultBase {
  int success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.BYTE) {
            this.success = iprot.readByte();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testI32_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testI32_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.I32, 1);

  int thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeI32(this.thing);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testI32_result extends frugal.FGeneratedArgsResultBase {
  int success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.I32) {
            this.success = iprot.readI32();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testI64_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testI64_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.I64, 1);

  int thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeI64(this.thing);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testI64_result extends frugal.FGeneratedArgsResultBase {
  int success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.I64) {
            this.success = iprot.readI64();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testDouble_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testDouble_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.DOUBLE, 1);

  double thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeDouble(this.thing);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testDouble_result extends frugal.FGeneratedArgsResultBase {
  double success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.DOUBLE) {
            this.success = iprot.readDouble();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testBinary_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testBinary_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.STRING, 1);

  Uint8List thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.thing != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      oprot.writeBinary(this.thing);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testBinary_result extends frugal.FGeneratedArgsResultBase {
  Uint8List success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRING) {
            this.success = iprot.readBinary();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testStruct_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testStruct_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.STRUCT, 1);

  t_frugal_test.Xtruct thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.thing != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      this.thing.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testStruct_result extends frugal.FGeneratedArgsResultBase {
  t_frugal_test.Xtruct success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRUCT) {
            this.success = t_frugal_test.Xtruct();
            success.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testNest_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testNest_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.STRUCT, 1);

  t_frugal_test.Xtruct2 thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.thing != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      this.thing.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testNest_result extends frugal.FGeneratedArgsResultBase {
  t_frugal_test.Xtruct2 success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRUCT) {
            this.success = t_frugal_test.Xtruct2();
            success.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMap_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testMap_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.MAP, 1);

  Map<int, int> thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.thing != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      oprot.writeMapBegin(thrift.TMap(thrift.TType.I32, thrift.TType.I32, this.thing.length));
      for(var elem9 in this.thing.keys) {
        oprot.writeI32(elem9);
        oprot.writeI32(thing[elem9]);
      }
      oprot.writeMapEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMap_result extends frugal.FGeneratedArgsResultBase {
  Map<int, int> success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem10 = iprot.readMapBegin();
            this.success = Map<int, int>();
            for(int elem12 = 0; elem12 < elem10.length; ++elem12) {
              int elem13 = iprot.readI32();
              int elem11 = iprot.readI32();
              this.success[elem13] = elem11;
            }
            iprot.readMapEnd();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testStringMap_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testStringMap_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.MAP, 1);

  Map<String, String> thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.thing != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      oprot.writeMapBegin(thrift.TMap(thrift.TType.STRING, thrift.TType.STRING, this.thing.length));
      for(var elem14 in this.thing.keys) {
        oprot.writeString(elem14);
        oprot.writeString(thing[elem14]);
      }
      oprot.writeMapEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testStringMap_result extends frugal.FGeneratedArgsResultBase {
  Map<String, String> success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem15 = iprot.readMapBegin();
            this.success = Map<String, String>();
            for(int elem17 = 0; elem17 < elem15.length; ++elem17) {
              String elem18 = iprot.readString();
              String elem16 = iprot.readString();
              this.success[elem18] = elem16;
            }
            iprot.readMapEnd();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testSet_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testSet_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.SET, 1);

  Set<int> thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.thing != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      oprot.writeSetBegin(thrift.TSet(thrift.TType.I32, this.thing.length));
      for(var elem19 in this.thing) {
        oprot.writeI32(elem19);
      }
      oprot.writeSetEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testSet_result extends frugal.FGeneratedArgsResultBase {
  Set<int> success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.SET) {
            thrift.TSet elem20 = iprot.readSetBegin();
            this.success = Set<int>();
            for(int elem22 = 0; elem22 < elem20.length; ++elem22) {
              int elem21 = iprot.readI32();
              this.success.add(elem21);
            }
            iprot.readSetEnd();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testList_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testList_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.LIST, 1);

  List<int> thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.thing != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      oprot.writeListBegin(thrift.TList(thrift.TType.I32, this.thing.length));
      for(var elem23 in this.thing) {
        oprot.writeI32(elem23);
      }
      oprot.writeListEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testList_result extends frugal.FGeneratedArgsResultBase {
  List<int> success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.LIST) {
            thrift.TList elem24 = iprot.readListBegin();
            this.success = List<int>();
            for(int elem26 = 0; elem26 < elem24.length; ++elem26) {
              int elem25 = iprot.readI32();
              this.success.add(elem25);
            }
            iprot.readListEnd();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testEnum_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testEnum_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.I32, 1);

  /// [t_frugal_test.Numberz]
  int thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeI32(t_frugal_test.serializeNumberz(this.thing));
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testEnum_result extends frugal.FGeneratedArgsResultBase {
  /// [t_frugal_test.Numberz]
  int success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.I32) {
            this.success = t_frugal_test.deserializeNumberz(iprot.readI32());
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testTypedef_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testTypedef_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.I64, 1);

  int thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeI64(this.thing);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testTypedef_result extends frugal.FGeneratedArgsResultBase {
  int success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.I64) {
            this.success = iprot.readI64();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMapMap_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testMapMap_args');
  static final thrift.TField _HELLO_FIELD_DESC = thrift.TField('hello', thrift.TType.I32, 1);

  int hello;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_HELLO_FIELD_DESC);
    oprot.writeI32(this.hello);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMapMap_result extends frugal.FGeneratedArgsResultBase {
  Map<int, Map<int, int>> success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem27 = iprot.readMapBegin();
            this.success = Map<int, Map<int, int>>();
            for(int elem33 = 0; elem33 < elem27.length; ++elem33) {
              int elem34 = iprot.readI32();
              thrift.TMap elem29 = iprot.readMapBegin();
              Map<int, int> elem28 = Map<int, int>();
              for(int elem31 = 0; elem31 < elem29.length; ++elem31) {
                int elem32 = iprot.readI32();
                int elem30 = iprot.readI32();
                elem28[elem32] = elem30;
              }
              iprot.readMapEnd();
              this.success[elem34] = elem28;
            }
            iprot.readMapEnd();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class TestUppercaseMethod_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('TestUppercaseMethod_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.BOOL, 1);

  bool thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeBool(this.thing);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class TestUppercaseMethod_result extends frugal.FGeneratedArgsResultBase {
  bool success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.BOOL) {
            this.success = iprot.readBool();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testInsanity_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testInsanity_args');
  static final thrift.TField _ARGUMENT_FIELD_DESC = thrift.TField('argument', thrift.TType.STRUCT, 1);

  t_frugal_test.Insanity argument;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.argument != null) {
      oprot.writeFieldBegin(_ARGUMENT_FIELD_DESC);
      this.argument.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testInsanity_result extends frugal.FGeneratedArgsResultBase {
  Map<int, Map<int, t_frugal_test.Insanity>> success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem35 = iprot.readMapBegin();
            this.success = Map<int, Map<int, t_frugal_test.Insanity>>();
            for(int elem41 = 0; elem41 < elem35.length; ++elem41) {
              int elem42 = iprot.readI64();
              thrift.TMap elem37 = iprot.readMapBegin();
              Map<int, t_frugal_test.Insanity> elem36 = Map<int, t_frugal_test.Insanity>();
              for(int elem39 = 0; elem39 < elem37.length; ++elem39) {
                int elem40 = t_frugal_test.deserializeNumberz(iprot.readI32());
                t_frugal_test.Insanity elem38 = t_frugal_test.Insanity();
                elem38.read(iprot);
                elem36[elem40] = elem38;
              }
              iprot.readMapEnd();
              this.success[elem42] = elem36;
            }
            iprot.readMapEnd();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMulti_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testMulti_args');
  static final thrift.TField _ARG0_FIELD_DESC = thrift.TField('arg0', thrift.TType.BYTE, 1);
  static final thrift.TField _ARG1_FIELD_DESC = thrift.TField('arg1', thrift.TType.I32, 2);
  static final thrift.TField _ARG2_FIELD_DESC = thrift.TField('arg2', thrift.TType.I64, 3);
  static final thrift.TField _ARG3_FIELD_DESC = thrift.TField('arg3', thrift.TType.MAP, 4);
  static final thrift.TField _ARG4_FIELD_DESC = thrift.TField('arg4', thrift.TType.I32, 5);
  static final thrift.TField _ARG5_FIELD_DESC = thrift.TField('arg5', thrift.TType.I64, 6);

  int arg0;
  int arg1;
  int arg2;
  Map<int, String> arg3;
  /// [t_frugal_test.Numberz]
  int arg4;
  int arg5;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ARG0_FIELD_DESC);
    oprot.writeByte(this.arg0);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ARG1_FIELD_DESC);
    oprot.writeI32(this.arg1);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ARG2_FIELD_DESC);
    oprot.writeI64(this.arg2);
    oprot.writeFieldEnd();
    if (this.arg3 != null) {
      oprot.writeFieldBegin(_ARG3_FIELD_DESC);
      oprot.writeMapBegin(thrift.TMap(thrift.TType.I16, thrift.TType.STRING, this.arg3.length));
      for(var elem43 in this.arg3.keys) {
        oprot.writeI16(elem43);
        oprot.writeString(arg3[elem43]);
      }
      oprot.writeMapEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ARG4_FIELD_DESC);
    oprot.writeI32(t_frugal_test.serializeNumberz(this.arg4));
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ARG5_FIELD_DESC);
    oprot.writeI64(this.arg5);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMulti_result extends frugal.FGeneratedArgsResultBase {
  t_frugal_test.Xtruct success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRUCT) {
            this.success = t_frugal_test.Xtruct();
            success.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testException_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testException_args');
  static final thrift.TField _ARG_FIELD_DESC = thrift.TField('arg', thrift.TType.STRING, 1);

  String arg;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.arg != null) {
      oprot.writeFieldBegin(_ARG_FIELD_DESC);
      oprot.writeString(this.arg);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testException_result extends frugal.FGeneratedArgsResultBase {
  t_frugal_test.Xception err1;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 1:
          if (field.type == thrift.TType.STRUCT) {
            this.err1 = t_frugal_test.Xception();
            err1.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMultiException_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testMultiException_args');
  static final thrift.TField _ARG0_FIELD_DESC = thrift.TField('arg0', thrift.TType.STRING, 1);
  static final thrift.TField _ARG1_FIELD_DESC = thrift.TField('arg1', thrift.TType.STRING, 2);

  String arg0;
  String arg1;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.arg0 != null) {
      oprot.writeFieldBegin(_ARG0_FIELD_DESC);
      oprot.writeString(this.arg0);
      oprot.writeFieldEnd();
    }
    if (this.arg1 != null) {
      oprot.writeFieldBegin(_ARG1_FIELD_DESC);
      oprot.writeString(this.arg1);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMultiException_result extends frugal.FGeneratedArgsResultBase {
  t_frugal_test.Xtruct success;
  t_frugal_test.Xception err1;
  t_frugal_test.Xception2 err2;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRUCT) {
            this.success = t_frugal_test.Xtruct();
            success.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 1:
          if (field.type == thrift.TType.STRUCT) {
            this.err1 = t_frugal_test.Xception();
            err1.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == thrift.TType.STRUCT) {
            this.err2 = t_frugal_test.Xception2();
            err2.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testUncaughtException_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testUncaughtException_args');



  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testUncaughtException_result extends frugal.FGeneratedArgsResultBase {


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testUncheckedTApplicationException_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testUncheckedTApplicationException_args');



  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testUncheckedTApplicationException_result extends frugal.FGeneratedArgsResultBase {


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testRequestTooLarge_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testRequestTooLarge_args');
  static final thrift.TField _REQUEST_FIELD_DESC = thrift.TField('request', thrift.TType.STRING, 1);

  Uint8List request;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.request != null) {
      oprot.writeFieldBegin(_REQUEST_FIELD_DESC);
      oprot.writeBinary(this.request);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testRequestTooLarge_result extends frugal.FGeneratedArgsResultBase {


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testResponseTooLarge_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testResponseTooLarge_args');
  static final thrift.TField _REQUEST_FIELD_DESC = thrift.TField('request', thrift.TType.STRING, 1);

  Uint8List request;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.request != null) {
      oprot.writeFieldBegin(_REQUEST_FIELD_DESC);
      oprot.writeBinary(this.request);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testResponseTooLarge_result extends frugal.FGeneratedArgsResultBase {
  Uint8List success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRING) {
            this.success = iprot.readBinary();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testOneway_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testOneway_args');
  static final thrift.TField _MILLISECONDS_TO_SLEEP_FIELD_DESC = thrift.TField('millisecondsToSleep', thrift.TType.I32, 1);

  int millisecondsToSleep;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_MILLISECONDS_TO_SLEEP_FIELD_DESC);
    oprot.writeI32(this.millisecondsToSleep);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
