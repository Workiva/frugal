#
# Autogenerated by Frugal Compiler (1.3.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#



from thrift.Thrift import TApplicationException
from thrift.Thrift import TMessageType
from thrift.Thrift import TType
from tornado import gen
from frugal.subscription import FSubscription

from event.ttypes import *




class EventsSubscriber(object):
    """
    This docstring gets added to the generated code because it has
    the @ sign. Prefix specifies topic prefix tokens, which can be static or
    variable.
    """

    _DELIMITER = '.'

    def __init__(self, provider):
        """
        Create a new EventsSubscriber.

        Args:
            provider: FScopeProvider
        """

        self._transport, self._protocol_factory = provider.new()

    @gen.coroutine
    def subscribe_EventCreated(self, user, EventCreated_handler):
        """
        This is a docstring.
        
        Args:
            user: string
            EventCreated_handler: function which takes Event
        """

        op = 'EventCreated'
        prefix = 'foo.%s.' % (user)
        topic = '%sEvents%s%s' % (prefix, self._DELIMITER, op)

        yield self._transport.subscribe(topic, self._recv_EventCreated(self._protocol_factory, op, EventCreated_handler))

    def _recv_EventCreated(self, protocol_factory, op, handler):
        def callback(transport):
            iprot = protocol_factory.get_protocol(transport)
            ctx = iprot.read_request_headers()
            mname, _, _ = iprot.readMessageBegin()
            if mname != op:
                iprot.skip(TType.STRUCT)
                iprot.readMessageEnd()
                raise TApplicationException(TApplicationException.UNKNOWN_METHOD)
            req = Event()
            req.read(iprot)
            iprot.readMessageEnd()
            handler(ctx, req)
        return callback




