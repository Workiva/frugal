// Autogenerated by Frugal Compiler (3.16.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING



// ignore_for_file: unused_import
// ignore_for_file: unused_field
import 'dart:async';
import 'dart:typed_data' show Uint8List;

import 'package:collection/collection.dart';
import 'package:logging/logging.dart' as logging;
import 'package:thrift/thrift.dart' as thrift;
import 'package:frugal/frugal.dart' as frugal;
import 'package:w_common/disposable.dart' as disposable;

import 'package:actual_base_dart/actual_base_dart.dart' as t_actual_base_dart;
import 'package:validStructs/validStructs.dart' as t_validStructs;
import 'package:ValidTypes/ValidTypes.dart' as t_ValidTypes;
import 'package:subdir_include_ns/subdir_include_ns.dart' as t_subdir_include_ns;
import 'package:variety/variety.dart' as t_variety;


/// This is a thrift service. Frugal will generate bindings that include
/// a frugal Context for each service call.
abstract class FFoo extends t_actual_base_dart.FBaseFoo {
  /// Ping the server.
  /// Deprecated: don't use this; use "something else"
  @deprecated
  Future ping(frugal.FContext ctx);

  /// Blah the server.
  Future<int> blah(frugal.FContext ctx, int num, String str, t_variety.Event event);

  /// oneway methods don't receive a response from the server.
  Future oneWay(frugal.FContext ctx, int id, Map<int, String> req);

  Future<Uint8List> bin_method(frugal.FContext ctx, Uint8List bin, String str);

  Future<int> param_modifiers(frugal.FContext ctx, int opt_num, int default_num, int req_num);

  Future<List<int>> underlying_types_test(frugal.FContext ctx, List<int> list_type, Set<int> set_type);

  Future<t_validStructs.Thing> getThing(frugal.FContext ctx);

  Future<int> getMyInt(frugal.FContext ctx);

  Future<t_subdir_include_ns.A> use_subdir_struct(frugal.FContext ctx, t_subdir_include_ns.A a);

  Future<String> sayHelloWith(frugal.FContext ctx, String newMessage);

  Future<String> whatDoYouSay(frugal.FContext ctx, String messageArgs);

  Future<String> sayAgain(frugal.FContext ctx, String messageResult);
}

FFooClient fFooClientFactory(frugal.FServiceProvider provider, {List<frugal.Middleware> middleware}) =>
    FFooClient(provider, middleware);

/// This is a thrift service. Frugal will generate bindings that include
/// a frugal Context for each service call.
// The below ignore statement is only needed to workaround https://github.com/dart-lang/sdk/issues/29751, which is fixed on Dart 2.8.0 and later.
// Dart versions before 2.8.0 need this ignore to analyze properly.
// ignore: private_collision_in_mixin_application
class FFooClient extends t_actual_base_dart.FBaseFooClient with disposable.Disposable implements FFoo {
  static final logging.Logger _frugalLog = logging.Logger('Foo');
  Map<String, frugal.FMethod> _methods;

  FFooClient(frugal.FServiceProvider provider, [List<frugal.Middleware> middleware])
      : this._provider = provider,
        super(provider, middleware) {
    _transport = provider.transport;
    _protocolFactory = provider.protocolFactory;
    var combined = middleware ?? [];
    combined.addAll(provider.middleware);
    this._methods = {};
    this._methods['ping'] = frugal.FMethod(this._ping, 'Foo', 'ping', combined);
    this._methods['blah'] = frugal.FMethod(this._blah, 'Foo', 'blah', combined);
    this._methods['oneWay'] = frugal.FMethod(this._oneWay, 'Foo', 'oneWay', combined);
    this._methods['bin_method'] = frugal.FMethod(this._bin_method, 'Foo', 'bin_method', combined);
    this._methods['param_modifiers'] = frugal.FMethod(this._param_modifiers, 'Foo', 'param_modifiers', combined);
    this._methods['underlying_types_test'] = frugal.FMethod(this._underlying_types_test, 'Foo', 'underlying_types_test', combined);
    this._methods['getThing'] = frugal.FMethod(this._getThing, 'Foo', 'getThing', combined);
    this._methods['getMyInt'] = frugal.FMethod(this._getMyInt, 'Foo', 'getMyInt', combined);
    this._methods['use_subdir_struct'] = frugal.FMethod(this._use_subdir_struct, 'Foo', 'use_subdir_struct', combined);
    this._methods['sayHelloWith'] = frugal.FMethod(this._sayHelloWith, 'Foo', 'sayHelloWith', combined);
    this._methods['whatDoYouSay'] = frugal.FMethod(this._whatDoYouSay, 'Foo', 'whatDoYouSay', combined);
    this._methods['sayAgain'] = frugal.FMethod(this._sayAgain, 'Foo', 'sayAgain', combined);
  }

  frugal.FServiceProvider _provider;
  frugal.FTransport _transport;
  frugal.FProtocolFactory _protocolFactory;

  @override
  Future<Null> onDispose() async {
    if (_provider is disposable.Disposable && !_provider.isOrWillBeDisposed)  {
      return _provider.dispose();
    }
    return null;
  }

  /// Ping the server.
  /// Deprecated: don't use this; use "something else"
  @deprecated
  @override
  Future ping(frugal.FContext ctx) {
    _frugalLog.warning("Call to deprecated function 'Foo.ping'");
    return this._methods['ping']([ctx]);
  }

  Future _ping(frugal.FContext ctx) async {
    final args = Ping_args();
    final message = frugal.prepareMessage(ctx, 'ping', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = Ping_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
  }
  /// Blah the server.
  @override
  Future<int> blah(frugal.FContext ctx, int num, String str, t_variety.Event event) {
    return this._methods['blah']([ctx, num, str, event]).then((value) => value as int);
  }

  Future<int> _blah(frugal.FContext ctx, int num, String str, t_variety.Event event) async {
    final args = blah_args();
    args.num = num;
    args.str = str;
    args.event = event;
    final message = frugal.prepareMessage(ctx, 'blah', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = blah_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.awe != null) {
      throw result.awe;
    }
    if (result.api != null) {
      throw result.api;
    }
    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'blah failed: unknown result'
    );
  }
  /// oneway methods don't receive a response from the server.
  @override
  Future oneWay(frugal.FContext ctx, int id, Map<int, String> req) {
    return this._methods['oneWay']([ctx, id, req]);
  }

  Future _oneWay(frugal.FContext ctx, int id, Map<int, String> req) async {
    final args = oneWay_args();
    args.id = id;
    args.req = req;
    final message = frugal.prepareMessage(ctx, 'oneWay', args, thrift.TMessageType.ONEWAY, _protocolFactory, _transport.requestSizeLimit);
    await _transport.oneway(ctx, message);
  }

  @override
  Future<Uint8List> bin_method(frugal.FContext ctx, Uint8List bin, String str) {
    return this._methods['bin_method']([ctx, bin, str]).then((value) => value as Uint8List);
  }

  Future<Uint8List> _bin_method(frugal.FContext ctx, Uint8List bin, String str) async {
    final args = bin_method_args();
    args.bin = bin;
    args.str = str;
    final message = frugal.prepareMessage(ctx, 'bin_method', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = bin_method_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.api != null) {
      throw result.api;
    }
    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'bin_method failed: unknown result'
    );
  }
  @override
  Future<int> param_modifiers(frugal.FContext ctx, int opt_num, int default_num, int req_num) {
    return this._methods['param_modifiers']([ctx, opt_num, default_num, req_num]).then((value) => value as int);
  }

  Future<int> _param_modifiers(frugal.FContext ctx, int opt_num, int default_num, int req_num) async {
    final args = param_modifiers_args();
    args.opt_num = opt_num;
    args.default_num = default_num;
    args.req_num = req_num;
    final message = frugal.prepareMessage(ctx, 'param_modifiers', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = param_modifiers_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'param_modifiers failed: unknown result'
    );
  }
  @override
  Future<List<int>> underlying_types_test(frugal.FContext ctx, List<int> list_type, Set<int> set_type) {
    return this._methods['underlying_types_test']([ctx, list_type, set_type]).then((value) => value as List<int>);
  }

  Future<List<int>> _underlying_types_test(frugal.FContext ctx, List<int> list_type, Set<int> set_type) async {
    final args = underlying_types_test_args();
    args.list_type = list_type;
    args.set_type = set_type;
    final message = frugal.prepareMessage(ctx, 'underlying_types_test', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = underlying_types_test_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'underlying_types_test failed: unknown result'
    );
  }
  @override
  Future<t_validStructs.Thing> getThing(frugal.FContext ctx) {
    return this._methods['getThing']([ctx]).then((value) => value as t_validStructs.Thing);
  }

  Future<t_validStructs.Thing> _getThing(frugal.FContext ctx) async {
    final args = getThing_args();
    final message = frugal.prepareMessage(ctx, 'getThing', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = getThing_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'getThing failed: unknown result'
    );
  }
  @override
  Future<int> getMyInt(frugal.FContext ctx) {
    return this._methods['getMyInt']([ctx]).then((value) => value as int);
  }

  Future<int> _getMyInt(frugal.FContext ctx) async {
    final args = getMyInt_args();
    final message = frugal.prepareMessage(ctx, 'getMyInt', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = getMyInt_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'getMyInt failed: unknown result'
    );
  }
  @override
  Future<t_subdir_include_ns.A> use_subdir_struct(frugal.FContext ctx, t_subdir_include_ns.A a) {
    return this._methods['use_subdir_struct']([ctx, a]).then((value) => value as t_subdir_include_ns.A);
  }

  Future<t_subdir_include_ns.A> _use_subdir_struct(frugal.FContext ctx, t_subdir_include_ns.A a) async {
    final args = use_subdir_struct_args();
    args.a = a;
    final message = frugal.prepareMessage(ctx, 'use_subdir_struct', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = use_subdir_struct_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'use_subdir_struct failed: unknown result'
    );
  }
  @override
  Future<String> sayHelloWith(frugal.FContext ctx, String newMessage) {
    return this._methods['sayHelloWith']([ctx, newMessage]).then((value) => value as String);
  }

  Future<String> _sayHelloWith(frugal.FContext ctx, String newMessage) async {
    final args = sayHelloWith_args();
    args.newMessage = newMessage;
    final message = frugal.prepareMessage(ctx, 'sayHelloWith', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = sayHelloWith_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'sayHelloWith failed: unknown result'
    );
  }
  @override
  Future<String> whatDoYouSay(frugal.FContext ctx, String messageArgs) {
    return this._methods['whatDoYouSay']([ctx, messageArgs]).then((value) => value as String);
  }

  Future<String> _whatDoYouSay(frugal.FContext ctx, String messageArgs) async {
    final args = whatDoYouSay_args();
    args.messageArgs = messageArgs;
    final message = frugal.prepareMessage(ctx, 'whatDoYouSay', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = whatDoYouSay_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'whatDoYouSay failed: unknown result'
    );
  }
  @override
  Future<String> sayAgain(frugal.FContext ctx, String messageResult) {
    return this._methods['sayAgain']([ctx, messageResult]).then((value) => value as String);
  }

  Future<String> _sayAgain(frugal.FContext ctx, String messageResult) async {
    final args = sayAgain_args();
    args.messageResult = messageResult;
    final message = frugal.prepareMessage(ctx, 'sayAgain', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit);
    var response = await _transport.request(ctx, message);

    final result = sayAgain_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'sayAgain failed: unknown result'
    );
  }
}

// ignore: camel_case_types
class Ping_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('Ping_args');



  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('Ping_args(');

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    return o is Ping_args;
  }

  @override
  int get hashCode {
    var value = 17;
    return value;
  }

  Ping_args clone() {
    return Ping_args();
  }

  validate() {
  }
}
// ignore: camel_case_types
class Ping_result implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('Ping_result');



  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('Ping_result(');

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    return o is Ping_result;
  }

  @override
  int get hashCode {
    var value = 17;
    return value;
  }

  Ping_result clone() {
    return Ping_result();
  }

  validate() {
  }
}
// ignore: camel_case_types
class blah_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('blah_args');
  static final thrift.TField _NUM_FIELD_DESC = thrift.TField('num', thrift.TType.I32, 1);
  static final thrift.TField _STR_FIELD_DESC = thrift.TField('Str', thrift.TType.STRING, 2);
  static final thrift.TField _EVENT_FIELD_DESC = thrift.TField('event', thrift.TType.STRUCT, 3);

  int num;
  static const int NUM = 1;
  String str;
  static const int STR = 2;
  t_variety.Event event;
  static const int EVENT = 3;


  bool isSetNum() => this.num != null;

  unsetNum() {
    this.num = null;
  }

  bool isSetStr() => this.str != null;

  unsetStr() {
    this.str = null;
  }

  bool isSetEvent() => this.event != null;

  unsetEvent() {
    this.event = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NUM:
        return this.num;
      case STR:
        return this.str;
      case EVENT:
        return this.event;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          this.num = value as int;
        }
        break;

      case STR:
        if (value == null) {
          unsetStr();
        } else {
          this.str = value as String;
        }
        break;

      case EVENT:
        if (value == null) {
          unsetEvent();
        } else {
          this.event = value as t_variety.Event;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NUM:
        return isSetNum();
      case STR:
        return isSetStr();
      case EVENT:
        return isSetEvent();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case NUM:
          if (field.type == thrift.TType.I32) {
            this.num = iprot.readI32();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STR:
          if (field.type == thrift.TType.STRING) {
            this.str = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENT:
          if (field.type == thrift.TType.STRUCT) {
            this.event = t_variety.Event();
            event.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetNum()) {
      oprot.writeFieldBegin(_NUM_FIELD_DESC);
      oprot.writeI32(this.num);
      oprot.writeFieldEnd();
    }
    if (isSetStr()) {
      oprot.writeFieldBegin(_STR_FIELD_DESC);
      oprot.writeString(this.str);
      oprot.writeFieldEnd();
    }
    if (isSetEvent()) {
      oprot.writeFieldBegin(_EVENT_FIELD_DESC);
      this.event.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('blah_args(');

    ret.write('num:');
    ret.write(this.num);

    ret.write(', ');
    ret.write('str:');
    if (this.str == null) {
      ret.write('null');
    } else {
      ret.write(this.str);
    }

    ret.write(', ');
    ret.write('event:');
    if (this.event == null) {
      ret.write('null');
    } else {
      ret.write(this.event);
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is blah_args) {
      return this.num == o.num &&
        this.str == o.str &&
        this.event == o.event;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.num.hashCode;
    value = (value * 31) ^ this.str.hashCode;
    value = (value * 31) ^ this.event.hashCode;
    return value;
  }

  blah_args clone({
    int num,
    String str,
    t_variety.Event event,
  }) {
    return blah_args()
      ..num = num ?? this.num
      ..str = str ?? this.str
      ..event = event ?? this.event;
  }

  validate() {
  }
}
// ignore: camel_case_types
class blah_result implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('blah_result');
  static final thrift.TField _SUCCESS_FIELD_DESC = thrift.TField('success', thrift.TType.I64, 0);
  static final thrift.TField _AWE_FIELD_DESC = thrift.TField('awe', thrift.TType.STRUCT, 1);
  static final thrift.TField _API_FIELD_DESC = thrift.TField('api', thrift.TType.STRUCT, 2);

  int success;
  static const int SUCCESS = 0;
  t_variety.AwesomeException awe;
  static const int AWE = 1;
  t_actual_base_dart.api_exception api;
  static const int API = 2;


  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  bool isSetAwe() => this.awe != null;

  unsetAwe() {
    this.awe = null;
  }

  bool isSetApi() => this.api != null;

  unsetApi() {
    this.api = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AWE:
        return this.awe;
      case API:
        return this.api;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as int;
        }
        break;

      case AWE:
        if (value == null) {
          unsetAwe();
        } else {
          this.awe = value as t_variety.AwesomeException;
        }
        break;

      case API:
        if (value == null) {
          unsetApi();
        } else {
          this.api = value as t_actual_base_dart.api_exception;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AWE:
        return isSetAwe();
      case API:
        return isSetApi();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case SUCCESS:
          if (field.type == thrift.TType.I64) {
            this.success = iprot.readI64();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AWE:
          if (field.type == thrift.TType.STRUCT) {
            this.awe = t_variety.AwesomeException();
            awe.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case API:
          if (field.type == thrift.TType.STRUCT) {
            this.api = t_actual_base_dart.api_exception();
            api.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeI64(this.success);
      oprot.writeFieldEnd();
    }
    if (isSetAwe()) {
      oprot.writeFieldBegin(_AWE_FIELD_DESC);
      this.awe.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetApi()) {
      oprot.writeFieldBegin(_API_FIELD_DESC);
      this.api.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('blah_result(');

    if (isSetSuccess()) {
      ret.write('success:');
      ret.write(this.success);
    }

    if (isSetAwe()) {
      ret.write(', ');
      ret.write('awe:');
      if (this.awe == null) {
        ret.write('null');
      } else {
        ret.write(this.awe);
      }
    }

    if (isSetApi()) {
      ret.write(', ');
      ret.write('api:');
      if (this.api == null) {
        ret.write('null');
      } else {
        ret.write(this.api);
      }
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is blah_result) {
      return this.success == o.success &&
        this.awe == o.awe &&
        this.api == o.api;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.success.hashCode;
    value = (value * 31) ^ this.awe.hashCode;
    value = (value * 31) ^ this.api.hashCode;
    return value;
  }

  blah_result clone({
    int success,
    t_variety.AwesomeException awe,
    t_actual_base_dart.api_exception api,
  }) {
    return blah_result()
      ..success = success ?? this.success
      ..awe = awe ?? this.awe
      ..api = api ?? this.api;
  }

  validate() {
  }
}
// ignore: camel_case_types
class oneWay_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('oneWay_args');
  static final thrift.TField _ID_FIELD_DESC = thrift.TField('id', thrift.TType.I64, 1);
  static final thrift.TField _REQ_FIELD_DESC = thrift.TField('req', thrift.TType.MAP, 2);

  int id;
  static const int ID = 1;
  Map<int, String> req;
  static const int REQ = 2;


  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.id;
      case REQ:
        return this.req;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value as int;
        }
        break;

      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as Map<int, String>;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ID:
        return isSetId();
      case REQ:
        return isSetReq();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case ID:
          if (field.type == thrift.TType.I64) {
            this.id = iprot.readI64();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REQ:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem68 = iprot.readMapBegin();
            this.req = Map<int, String>();
            for(int elem70 = 0; elem70 < elem68.length; ++elem70) {
              int elem71 = iprot.readI32();
              String elem69 = iprot.readString();
              this.req[elem71] = elem69;
            }
            iprot.readMapEnd();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetId()) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeI64(this.id);
      oprot.writeFieldEnd();
    }
    if (isSetReq()) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      oprot.writeMapBegin(thrift.TMap(thrift.TType.I32, thrift.TType.STRING, this.req.length));
      for(var elem72 in this.req.keys) {
        oprot.writeI32(elem72);
        oprot.writeString(req[elem72]);
      }
      oprot.writeMapEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('oneWay_args(');

    ret.write('id:');
    ret.write(this.id);

    ret.write(', ');
    ret.write('req:');
    if (this.req == null) {
      ret.write('null');
    } else {
      ret.write(this.req);
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is oneWay_args) {
      return this.id == o.id &&
        DeepCollectionEquality().equals(this.req, o.req);
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.id.hashCode;
    value = (value * 31) ^ DeepCollectionEquality().hash(this.req);
    return value;
  }

  oneWay_args clone({
    int id,
    Map<int, String> req,
  }) {
    return oneWay_args()
      ..id = id ?? this.id
      ..req = req ?? this.req;
  }

  validate() {
  }
}
// ignore: camel_case_types
class bin_method_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('bin_method_args');
  static final thrift.TField _BIN_FIELD_DESC = thrift.TField('bin', thrift.TType.STRING, 1);
  static final thrift.TField _STR_FIELD_DESC = thrift.TField('Str', thrift.TType.STRING, 2);

  Uint8List bin;
  static const int BIN = 1;
  String str;
  static const int STR = 2;


  bool isSetBin() => this.bin != null;

  unsetBin() {
    this.bin = null;
  }

  bool isSetStr() => this.str != null;

  unsetStr() {
    this.str = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BIN:
        return this.bin;
      case STR:
        return this.str;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BIN:
        if (value == null) {
          unsetBin();
        } else {
          this.bin = value as Uint8List;
        }
        break;

      case STR:
        if (value == null) {
          unsetStr();
        } else {
          this.str = value as String;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BIN:
        return isSetBin();
      case STR:
        return isSetStr();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case BIN:
          if (field.type == thrift.TType.STRING) {
            this.bin = iprot.readBinary();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STR:
          if (field.type == thrift.TType.STRING) {
            this.str = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetBin()) {
      oprot.writeFieldBegin(_BIN_FIELD_DESC);
      oprot.writeBinary(this.bin);
      oprot.writeFieldEnd();
    }
    if (isSetStr()) {
      oprot.writeFieldBegin(_STR_FIELD_DESC);
      oprot.writeString(this.str);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('bin_method_args(');

    ret.write('bin:');
    if (this.bin == null) {
      ret.write('null');
    } else {
      ret.write('BINARY');
    }

    ret.write(', ');
    ret.write('str:');
    if (this.str == null) {
      ret.write('null');
    } else {
      ret.write(this.str);
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is bin_method_args) {
      return this.bin == o.bin &&
        this.str == o.str;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.bin.hashCode;
    value = (value * 31) ^ this.str.hashCode;
    return value;
  }

  bin_method_args clone({
    Uint8List bin,
    String str,
  }) {
    return bin_method_args()
      ..bin = bin ?? this.bin
      ..str = str ?? this.str;
  }

  validate() {
  }
}
// ignore: camel_case_types
class bin_method_result implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('bin_method_result');
  static final thrift.TField _SUCCESS_FIELD_DESC = thrift.TField('success', thrift.TType.STRING, 0);
  static final thrift.TField _API_FIELD_DESC = thrift.TField('api', thrift.TType.STRUCT, 1);

  Uint8List success;
  static const int SUCCESS = 0;
  t_actual_base_dart.api_exception api;
  static const int API = 1;


  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  bool isSetApi() => this.api != null;

  unsetApi() {
    this.api = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case API:
        return this.api;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as Uint8List;
        }
        break;

      case API:
        if (value == null) {
          unsetApi();
        } else {
          this.api = value as t_actual_base_dart.api_exception;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case API:
        return isSetApi();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case SUCCESS:
          if (field.type == thrift.TType.STRING) {
            this.success = iprot.readBinary();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case API:
          if (field.type == thrift.TType.STRUCT) {
            this.api = t_actual_base_dart.api_exception();
            api.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeBinary(this.success);
      oprot.writeFieldEnd();
    }
    if (isSetApi()) {
      oprot.writeFieldBegin(_API_FIELD_DESC);
      this.api.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('bin_method_result(');

    if (isSetSuccess()) {
      ret.write('success:');
      if (this.success == null) {
        ret.write('null');
      } else {
        ret.write('BINARY');
      }
    }

    if (isSetApi()) {
      ret.write(', ');
      ret.write('api:');
      if (this.api == null) {
        ret.write('null');
      } else {
        ret.write(this.api);
      }
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is bin_method_result) {
      return this.success == o.success &&
        this.api == o.api;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.success.hashCode;
    value = (value * 31) ^ this.api.hashCode;
    return value;
  }

  bin_method_result clone({
    Uint8List success,
    t_actual_base_dart.api_exception api,
  }) {
    return bin_method_result()
      ..success = success ?? this.success
      ..api = api ?? this.api;
  }

  validate() {
  }
}
// ignore: camel_case_types
class param_modifiers_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('param_modifiers_args');
  static final thrift.TField _OPT_NUM_FIELD_DESC = thrift.TField('opt_num', thrift.TType.I32, 1);
  static final thrift.TField _DEFAULT_NUM_FIELD_DESC = thrift.TField('default_num', thrift.TType.I32, 2);
  static final thrift.TField _REQ_NUM_FIELD_DESC = thrift.TField('req_num', thrift.TType.I32, 3);

  int opt_num;
  static const int OPT_NUM = 1;
  int default_num;
  static const int DEFAULT_NUM = 2;
  int req_num;
  static const int REQ_NUM = 3;


  bool isSetOpt_num() => this.opt_num != null;

  unsetOpt_num() {
    this.opt_num = null;
  }

  bool isSetDefault_num() => this.default_num != null;

  unsetDefault_num() {
    this.default_num = null;
  }

  bool isSetReq_num() => this.req_num != null;

  unsetReq_num() {
    this.req_num = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case OPT_NUM:
        return this.opt_num;
      case DEFAULT_NUM:
        return this.default_num;
      case REQ_NUM:
        return this.req_num;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case OPT_NUM:
        if (value == null) {
          unsetOpt_num();
        } else {
          this.opt_num = value as int;
        }
        break;

      case DEFAULT_NUM:
        if (value == null) {
          unsetDefault_num();
        } else {
          this.default_num = value as int;
        }
        break;

      case REQ_NUM:
        if (value == null) {
          unsetReq_num();
        } else {
          this.req_num = value as int;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case OPT_NUM:
        return isSetOpt_num();
      case DEFAULT_NUM:
        return isSetDefault_num();
      case REQ_NUM:
        return isSetReq_num();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case OPT_NUM:
          if (field.type == thrift.TType.I32) {
            this.opt_num = iprot.readI32();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEFAULT_NUM:
          if (field.type == thrift.TType.I32) {
            this.default_num = iprot.readI32();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REQ_NUM:
          if (field.type == thrift.TType.I32) {
            this.req_num = iprot.readI32();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetOpt_num()) {
      oprot.writeFieldBegin(_OPT_NUM_FIELD_DESC);
      oprot.writeI32(this.opt_num);
      oprot.writeFieldEnd();
    }
    if (isSetDefault_num()) {
      oprot.writeFieldBegin(_DEFAULT_NUM_FIELD_DESC);
      oprot.writeI32(this.default_num);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_REQ_NUM_FIELD_DESC);
    oprot.writeI32(this.req_num);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('param_modifiers_args(');

    ret.write('opt_num:');
    ret.write(this.opt_num);

    ret.write(', ');
    ret.write('default_num:');
    ret.write(this.default_num);

    ret.write(', ');
    ret.write('req_num:');
    ret.write(this.req_num);

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is param_modifiers_args) {
      return this.opt_num == o.opt_num &&
        this.default_num == o.default_num &&
        this.req_num == o.req_num;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.opt_num.hashCode;
    value = (value * 31) ^ this.default_num.hashCode;
    value = (value * 31) ^ this.req_num.hashCode;
    return value;
  }

  param_modifiers_args clone({
    int opt_num,
    int default_num,
    int req_num,
  }) {
    return param_modifiers_args()
      ..opt_num = opt_num ?? this.opt_num
      ..default_num = default_num ?? this.default_num
      ..req_num = req_num ?? this.req_num;
  }

  validate() {
    // check for required fields
    if (this.req_num == null) {
      throw thrift.TProtocolError(thrift.TProtocolErrorType.INVALID_DATA, "Required field 'req_num' was not present in struct param_modifiers_args");
    }
  }
}
// ignore: camel_case_types
class param_modifiers_result implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('param_modifiers_result');
  static final thrift.TField _SUCCESS_FIELD_DESC = thrift.TField('success', thrift.TType.I64, 0);

  int success;
  static const int SUCCESS = 0;


  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as int;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case SUCCESS:
          if (field.type == thrift.TType.I64) {
            this.success = iprot.readI64();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeI64(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('param_modifiers_result(');

    if (isSetSuccess()) {
      ret.write('success:');
      ret.write(this.success);
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is param_modifiers_result) {
      return this.success == o.success;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.success.hashCode;
    return value;
  }

  param_modifiers_result clone({
    int success,
  }) {
    return param_modifiers_result()
      ..success = success ?? this.success;
  }

  validate() {
  }
}
// ignore: camel_case_types
class underlying_types_test_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('underlying_types_test_args');
  static final thrift.TField _LIST_TYPE_FIELD_DESC = thrift.TField('list_type', thrift.TType.LIST, 1);
  static final thrift.TField _SET_TYPE_FIELD_DESC = thrift.TField('set_type', thrift.TType.SET, 2);

  List<int> list_type;
  static const int LIST_TYPE = 1;
  Set<int> set_type;
  static const int SET_TYPE = 2;


  bool isSetList_type() => this.list_type != null;

  unsetList_type() {
    this.list_type = null;
  }

  bool isSetSet_type() => this.set_type != null;

  unsetSet_type() {
    this.set_type = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case LIST_TYPE:
        return this.list_type;
      case SET_TYPE:
        return this.set_type;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case LIST_TYPE:
        if (value == null) {
          unsetList_type();
        } else {
          this.list_type = value as List<int>;
        }
        break;

      case SET_TYPE:
        if (value == null) {
          unsetSet_type();
        } else {
          this.set_type = value as Set<int>;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case LIST_TYPE:
        return isSetList_type();
      case SET_TYPE:
        return isSetSet_type();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case LIST_TYPE:
          if (field.type == thrift.TType.LIST) {
            thrift.TList elem73 = iprot.readListBegin();
            this.list_type = List<int>();
            for(int elem75 = 0; elem75 < elem73.length; ++elem75) {
              int elem74 = iprot.readI64();
              this.list_type.add(elem74);
            }
            iprot.readListEnd();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SET_TYPE:
          if (field.type == thrift.TType.SET) {
            thrift.TSet elem76 = iprot.readSetBegin();
            this.set_type = Set<int>();
            for(int elem78 = 0; elem78 < elem76.length; ++elem78) {
              int elem77 = iprot.readI64();
              this.set_type.add(elem77);
            }
            iprot.readSetEnd();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetList_type()) {
      oprot.writeFieldBegin(_LIST_TYPE_FIELD_DESC);
      oprot.writeListBegin(thrift.TList(thrift.TType.I64, this.list_type.length));
      for(var elem79 in this.list_type) {
        oprot.writeI64(elem79);
      }
      oprot.writeListEnd();
      oprot.writeFieldEnd();
    }
    if (isSetSet_type()) {
      oprot.writeFieldBegin(_SET_TYPE_FIELD_DESC);
      oprot.writeSetBegin(thrift.TSet(thrift.TType.I64, this.set_type.length));
      for(var elem80 in this.set_type) {
        oprot.writeI64(elem80);
      }
      oprot.writeSetEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('underlying_types_test_args(');

    ret.write('list_type:');
    if (this.list_type == null) {
      ret.write('null');
    } else {
      ret.write(this.list_type);
    }

    ret.write(', ');
    ret.write('set_type:');
    if (this.set_type == null) {
      ret.write('null');
    } else {
      ret.write(this.set_type);
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is underlying_types_test_args) {
      return DeepCollectionEquality().equals(this.list_type, o.list_type) &&
        DeepCollectionEquality().equals(this.set_type, o.set_type);
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ DeepCollectionEquality().hash(this.list_type);
    value = (value * 31) ^ DeepCollectionEquality().hash(this.set_type);
    return value;
  }

  underlying_types_test_args clone({
    List<int> list_type,
    Set<int> set_type,
  }) {
    return underlying_types_test_args()
      ..list_type = list_type ?? this.list_type
      ..set_type = set_type ?? this.set_type;
  }

  validate() {
  }
}
// ignore: camel_case_types
class underlying_types_test_result implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('underlying_types_test_result');
  static final thrift.TField _SUCCESS_FIELD_DESC = thrift.TField('success', thrift.TType.LIST, 0);

  List<int> success;
  static const int SUCCESS = 0;


  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as List<int>;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case SUCCESS:
          if (field.type == thrift.TType.LIST) {
            thrift.TList elem81 = iprot.readListBegin();
            this.success = List<int>();
            for(int elem83 = 0; elem83 < elem81.length; ++elem83) {
              int elem82 = iprot.readI64();
              this.success.add(elem82);
            }
            iprot.readListEnd();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeListBegin(thrift.TList(thrift.TType.I64, this.success.length));
      for(var elem84 in this.success) {
        oprot.writeI64(elem84);
      }
      oprot.writeListEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('underlying_types_test_result(');

    if (isSetSuccess()) {
      ret.write('success:');
      if (this.success == null) {
        ret.write('null');
      } else {
        ret.write(this.success);
      }
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is underlying_types_test_result) {
      return DeepCollectionEquality().equals(this.success, o.success);
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ DeepCollectionEquality().hash(this.success);
    return value;
  }

  underlying_types_test_result clone({
    List<int> success,
  }) {
    return underlying_types_test_result()
      ..success = success ?? this.success;
  }

  validate() {
  }
}
// ignore: camel_case_types
class getThing_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('getThing_args');



  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('getThing_args(');

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    return o is getThing_args;
  }

  @override
  int get hashCode {
    var value = 17;
    return value;
  }

  getThing_args clone() {
    return getThing_args();
  }

  validate() {
  }
}
// ignore: camel_case_types
class getThing_result implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('getThing_result');
  static final thrift.TField _SUCCESS_FIELD_DESC = thrift.TField('success', thrift.TType.STRUCT, 0);

  t_validStructs.Thing success;
  static const int SUCCESS = 0;


  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as t_validStructs.Thing;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case SUCCESS:
          if (field.type == thrift.TType.STRUCT) {
            this.success = t_validStructs.Thing();
            success.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('getThing_result(');

    if (isSetSuccess()) {
      ret.write('success:');
      if (this.success == null) {
        ret.write('null');
      } else {
        ret.write(this.success);
      }
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is getThing_result) {
      return this.success == o.success;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.success.hashCode;
    return value;
  }

  getThing_result clone({
    t_validStructs.Thing success,
  }) {
    return getThing_result()
      ..success = success ?? this.success;
  }

  validate() {
  }
}
// ignore: camel_case_types
class getMyInt_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('getMyInt_args');



  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('getMyInt_args(');

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    return o is getMyInt_args;
  }

  @override
  int get hashCode {
    var value = 17;
    return value;
  }

  getMyInt_args clone() {
    return getMyInt_args();
  }

  validate() {
  }
}
// ignore: camel_case_types
class getMyInt_result implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('getMyInt_result');
  static final thrift.TField _SUCCESS_FIELD_DESC = thrift.TField('success', thrift.TType.I32, 0);

  int success;
  static const int SUCCESS = 0;


  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as int;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case SUCCESS:
          if (field.type == thrift.TType.I32) {
            this.success = iprot.readI32();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeI32(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('getMyInt_result(');

    if (isSetSuccess()) {
      ret.write('success:');
      ret.write(this.success);
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is getMyInt_result) {
      return this.success == o.success;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.success.hashCode;
    return value;
  }

  getMyInt_result clone({
    int success,
  }) {
    return getMyInt_result()
      ..success = success ?? this.success;
  }

  validate() {
  }
}
// ignore: camel_case_types
class use_subdir_struct_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('use_subdir_struct_args');
  static final thrift.TField _A_FIELD_DESC = thrift.TField('a', thrift.TType.STRUCT, 1);

  t_subdir_include_ns.A a;
  static const int A = 1;


  bool isSetA() => this.a != null;

  unsetA() {
    this.a = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case A:
        return this.a;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case A:
        if (value == null) {
          unsetA();
        } else {
          this.a = value as t_subdir_include_ns.A;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case A:
        return isSetA();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case A:
          if (field.type == thrift.TType.STRUCT) {
            this.a = t_subdir_include_ns.A();
            a.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetA()) {
      oprot.writeFieldBegin(_A_FIELD_DESC);
      this.a.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('use_subdir_struct_args(');

    ret.write('a:');
    if (this.a == null) {
      ret.write('null');
    } else {
      ret.write(this.a);
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is use_subdir_struct_args) {
      return this.a == o.a;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.a.hashCode;
    return value;
  }

  use_subdir_struct_args clone({
    t_subdir_include_ns.A a,
  }) {
    return use_subdir_struct_args()
      ..a = a ?? this.a;
  }

  validate() {
  }
}
// ignore: camel_case_types
class use_subdir_struct_result implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('use_subdir_struct_result');
  static final thrift.TField _SUCCESS_FIELD_DESC = thrift.TField('success', thrift.TType.STRUCT, 0);

  t_subdir_include_ns.A success;
  static const int SUCCESS = 0;


  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as t_subdir_include_ns.A;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case SUCCESS:
          if (field.type == thrift.TType.STRUCT) {
            this.success = t_subdir_include_ns.A();
            success.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('use_subdir_struct_result(');

    if (isSetSuccess()) {
      ret.write('success:');
      if (this.success == null) {
        ret.write('null');
      } else {
        ret.write(this.success);
      }
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is use_subdir_struct_result) {
      return this.success == o.success;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.success.hashCode;
    return value;
  }

  use_subdir_struct_result clone({
    t_subdir_include_ns.A success,
  }) {
    return use_subdir_struct_result()
      ..success = success ?? this.success;
  }

  validate() {
  }
}
// ignore: camel_case_types
class sayHelloWith_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('sayHelloWith_args');
  static final thrift.TField _NEW_MESSAGE_FIELD_DESC = thrift.TField('newMessage', thrift.TType.STRING, 1);

  String newMessage;
  static const int NEWMESSAGE = 1;


  bool isSetNewMessage() => this.newMessage != null;

  unsetNewMessage() {
    this.newMessage = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NEWMESSAGE:
        return this.newMessage;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NEWMESSAGE:
        if (value == null) {
          unsetNewMessage();
        } else {
          this.newMessage = value as String;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NEWMESSAGE:
        return isSetNewMessage();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case NEWMESSAGE:
          if (field.type == thrift.TType.STRING) {
            this.newMessage = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetNewMessage()) {
      oprot.writeFieldBegin(_NEW_MESSAGE_FIELD_DESC);
      oprot.writeString(this.newMessage);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('sayHelloWith_args(');

    ret.write('newMessage:');
    if (this.newMessage == null) {
      ret.write('null');
    } else {
      ret.write(this.newMessage);
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is sayHelloWith_args) {
      return this.newMessage == o.newMessage;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.newMessage.hashCode;
    return value;
  }

  sayHelloWith_args clone({
    String newMessage,
  }) {
    return sayHelloWith_args()
      ..newMessage = newMessage ?? this.newMessage;
  }

  validate() {
  }
}
// ignore: camel_case_types
class sayHelloWith_result implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('sayHelloWith_result');
  static final thrift.TField _SUCCESS_FIELD_DESC = thrift.TField('success', thrift.TType.STRING, 0);

  String success;
  static const int SUCCESS = 0;


  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as String;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case SUCCESS:
          if (field.type == thrift.TType.STRING) {
            this.success = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('sayHelloWith_result(');

    if (isSetSuccess()) {
      ret.write('success:');
      if (this.success == null) {
        ret.write('null');
      } else {
        ret.write(this.success);
      }
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is sayHelloWith_result) {
      return this.success == o.success;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.success.hashCode;
    return value;
  }

  sayHelloWith_result clone({
    String success,
  }) {
    return sayHelloWith_result()
      ..success = success ?? this.success;
  }

  validate() {
  }
}
// ignore: camel_case_types
class whatDoYouSay_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('whatDoYouSay_args');
  static final thrift.TField _MESSAGE_ARGS_FIELD_DESC = thrift.TField('messageArgs', thrift.TType.STRING, 1);

  String messageArgs;
  static const int MESSAGEARGS = 1;


  bool isSetMessageArgs() => this.messageArgs != null;

  unsetMessageArgs() {
    this.messageArgs = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MESSAGEARGS:
        return this.messageArgs;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MESSAGEARGS:
        if (value == null) {
          unsetMessageArgs();
        } else {
          this.messageArgs = value as String;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MESSAGEARGS:
        return isSetMessageArgs();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case MESSAGEARGS:
          if (field.type == thrift.TType.STRING) {
            this.messageArgs = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetMessageArgs()) {
      oprot.writeFieldBegin(_MESSAGE_ARGS_FIELD_DESC);
      oprot.writeString(this.messageArgs);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('whatDoYouSay_args(');

    ret.write('messageArgs:');
    if (this.messageArgs == null) {
      ret.write('null');
    } else {
      ret.write(this.messageArgs);
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is whatDoYouSay_args) {
      return this.messageArgs == o.messageArgs;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.messageArgs.hashCode;
    return value;
  }

  whatDoYouSay_args clone({
    String messageArgs,
  }) {
    return whatDoYouSay_args()
      ..messageArgs = messageArgs ?? this.messageArgs;
  }

  validate() {
  }
}
// ignore: camel_case_types
class whatDoYouSay_result implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('whatDoYouSay_result');
  static final thrift.TField _SUCCESS_FIELD_DESC = thrift.TField('success', thrift.TType.STRING, 0);

  String success;
  static const int SUCCESS = 0;


  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as String;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case SUCCESS:
          if (field.type == thrift.TType.STRING) {
            this.success = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('whatDoYouSay_result(');

    if (isSetSuccess()) {
      ret.write('success:');
      if (this.success == null) {
        ret.write('null');
      } else {
        ret.write(this.success);
      }
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is whatDoYouSay_result) {
      return this.success == o.success;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.success.hashCode;
    return value;
  }

  whatDoYouSay_result clone({
    String success,
  }) {
    return whatDoYouSay_result()
      ..success = success ?? this.success;
  }

  validate() {
  }
}
// ignore: camel_case_types
class sayAgain_args implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('sayAgain_args');
  static final thrift.TField _MESSAGE_RESULT_FIELD_DESC = thrift.TField('messageResult', thrift.TType.STRING, 1);

  String messageResult;
  static const int MESSAGERESULT = 1;


  bool isSetMessageResult() => this.messageResult != null;

  unsetMessageResult() {
    this.messageResult = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MESSAGERESULT:
        return this.messageResult;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MESSAGERESULT:
        if (value == null) {
          unsetMessageResult();
        } else {
          this.messageResult = value as String;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MESSAGERESULT:
        return isSetMessageResult();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case MESSAGERESULT:
          if (field.type == thrift.TType.STRING) {
            this.messageResult = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetMessageResult()) {
      oprot.writeFieldBegin(_MESSAGE_RESULT_FIELD_DESC);
      oprot.writeString(this.messageResult);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('sayAgain_args(');

    ret.write('messageResult:');
    if (this.messageResult == null) {
      ret.write('null');
    } else {
      ret.write(this.messageResult);
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is sayAgain_args) {
      return this.messageResult == o.messageResult;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.messageResult.hashCode;
    return value;
  }

  sayAgain_args clone({
    String messageResult,
  }) {
    return sayAgain_args()
      ..messageResult = messageResult ?? this.messageResult;
  }

  validate() {
  }
}
// ignore: camel_case_types
class sayAgain_result implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('sayAgain_result');
  static final thrift.TField _SUCCESS_FIELD_DESC = thrift.TField('success', thrift.TType.STRING, 0);

  String success;
  static const int SUCCESS = 0;


  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as String;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case SUCCESS:
          if (field.type == thrift.TType.STRING) {
            this.success = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('sayAgain_result(');

    if (isSetSuccess()) {
      ret.write('success:');
      if (this.success == null) {
        ret.write('null');
      } else {
        ret.write(this.success);
      }
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is sayAgain_result) {
      return this.success == o.success;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.success.hashCode;
    return value;
  }

  sayAgain_result clone({
    String success,
  }) {
    return sayAgain_result()
      ..success = success ?? this.success;
  }

  validate() {
  }
}
