/**
 * Autogenerated by Frugal Compiler (3.16.6)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package variety.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Objects;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestingDefaults implements org.apache.thrift.TBase<TestingDefaults, TestingDefaults._Fields>, java.io.Serializable, Cloneable, Comparable<TestingDefaults> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestingDefaults");

	private static final org.apache.thrift.protocol.TField I_D2_FIELD_DESC = new org.apache.thrift.protocol.TField("ID2", org.apache.thrift.protocol.TType.I64, (short)1);
	private static final org.apache.thrift.protocol.TField EV1_FIELD_DESC = new org.apache.thrift.protocol.TField("ev1", org.apache.thrift.protocol.TType.STRUCT, (short)2);
	private static final org.apache.thrift.protocol.TField EV2_FIELD_DESC = new org.apache.thrift.protocol.TField("ev2", org.apache.thrift.protocol.TType.STRUCT, (short)3);
	private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.I64, (short)4);
	private static final org.apache.thrift.protocol.TField THING_FIELD_DESC = new org.apache.thrift.protocol.TField("thing", org.apache.thrift.protocol.TType.STRING, (short)5);
	private static final org.apache.thrift.protocol.TField THING2_FIELD_DESC = new org.apache.thrift.protocol.TField("thing2", org.apache.thrift.protocol.TType.STRING, (short)6);
	private static final org.apache.thrift.protocol.TField LISTFIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("listfield", org.apache.thrift.protocol.TType.LIST, (short)7);
	private static final org.apache.thrift.protocol.TField I_D3_FIELD_DESC = new org.apache.thrift.protocol.TField("ID3", org.apache.thrift.protocol.TType.I64, (short)8);
	private static final org.apache.thrift.protocol.TField BIN_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("bin_field", org.apache.thrift.protocol.TType.STRING, (short)9);
	private static final org.apache.thrift.protocol.TField BIN_FIELD2_FIELD_DESC = new org.apache.thrift.protocol.TField("bin_field2", org.apache.thrift.protocol.TType.STRING, (short)10);
	private static final org.apache.thrift.protocol.TField BIN_FIELD3_FIELD_DESC = new org.apache.thrift.protocol.TField("bin_field3", org.apache.thrift.protocol.TType.STRING, (short)11);
	private static final org.apache.thrift.protocol.TField BIN_FIELD4_FIELD_DESC = new org.apache.thrift.protocol.TField("bin_field4", org.apache.thrift.protocol.TType.STRING, (short)12);
	private static final org.apache.thrift.protocol.TField LIST2_FIELD_DESC = new org.apache.thrift.protocol.TField("list2", org.apache.thrift.protocol.TType.LIST, (short)13);
	private static final org.apache.thrift.protocol.TField LIST3_FIELD_DESC = new org.apache.thrift.protocol.TField("list3", org.apache.thrift.protocol.TType.LIST, (short)14);
	private static final org.apache.thrift.protocol.TField LIST4_FIELD_DESC = new org.apache.thrift.protocol.TField("list4", org.apache.thrift.protocol.TType.LIST, (short)15);
	private static final org.apache.thrift.protocol.TField A_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("a_map", org.apache.thrift.protocol.TType.MAP, (short)16);
	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)17);
	private static final org.apache.thrift.protocol.TField BASE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("base_status", org.apache.thrift.protocol.TType.I32, (short)18);

	public Long ID2; // optional
	public Event ev1;
	public Event ev2;
	public Long ID;
	public String thing;
	public String thing2; // optional
	public java.util.List<Integer> listfield;
	public Long ID3;
	public java.nio.ByteBuffer bin_field;
	public java.nio.ByteBuffer bin_field2; // optional
	public java.nio.ByteBuffer bin_field3;
	public java.nio.ByteBuffer bin_field4; // optional
	public java.util.List<Integer> list2; // optional
	public java.util.List<Integer> list3; // optional
	public java.util.List<Integer> list4;
	public java.util.Map<String, String> a_map; // optional
	/**
	 * Comment for enum field.
	 */
	public HealthCondition status; // required
	public actual_base.java.base_health_condition base_status; // required
	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		I_D2((short)1, "ID2"),
		EV1((short)2, "ev1"),
		EV2((short)3, "ev2"),
		ID((short)4, "ID"),
		THING((short)5, "thing"),
		THING2((short)6, "thing2"),
		LISTFIELD((short)7, "listfield"),
		I_D3((short)8, "ID3"),
		BIN_FIELD((short)9, "bin_field"),
		BIN_FIELD2((short)10, "bin_field2"),
		BIN_FIELD3((short)11, "bin_field3"),
		BIN_FIELD4((short)12, "bin_field4"),
		LIST2((short)13, "list2"),
		LIST3((short)14, "list3"),
		LIST4((short)15, "list4"),
		A_MAP((short)16, "a_map"),
		/**
		 * Comment for enum field.
		 */
		STATUS((short)17, "status"),
		BASE_STATUS((short)18, "base_status")
		;

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
				case 1: // I_D2
					return I_D2;
				case 2: // EV1
					return EV1;
				case 3: // EV2
					return EV2;
				case 4: // ID
					return ID;
				case 5: // THING
					return THING;
				case 6: // THING2
					return THING2;
				case 7: // LISTFIELD
					return LISTFIELD;
				case 8: // I_D3
					return I_D3;
				case 9: // BIN_FIELD
					return BIN_FIELD;
				case 10: // BIN_FIELD2
					return BIN_FIELD2;
				case 11: // BIN_FIELD3
					return BIN_FIELD3;
				case 12: // BIN_FIELD4
					return BIN_FIELD4;
				case 13: // LIST2
					return LIST2;
				case 14: // LIST3
					return LIST3;
				case 15: // LIST4
					return LIST4;
				case 16: // A_MAP
					return A_MAP;
				case 17: // STATUS
					return STATUS;
				case 18: // BASE_STATUS
					return BASE_STATUS;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public TestingDefaults() {
		this.ID2 = varietyConstants.DEFAULT_ID;

		this.ev1 = new Event();
		this.ev1.setID(varietyConstants.DEFAULT_ID);
		this.ev1.setMessage("a message");

		this.ev2 = new Event();
		this.ev2.setID(5L);
		this.ev2.setMessage("a message2");

		this.ID = -2L;

		this.thing = "a constant";

		this.thing2 = "another constant";

		this.listfield = new ArrayList<Integer>();
		this.listfield.add(1);
		this.listfield.add(2);
		this.listfield.add(3);
		this.listfield.add(4);
		this.listfield.add(5);

		this.ID3 = varietyConstants.other_default;

		this.bin_field4 = varietyConstants.bin_const;

		this.list2 = new ArrayList<Integer>();
		this.list2.add(1);
		this.list2.add(3);
		this.list2.add(4);
		this.list2.add(5);
		this.list2.add(8);

		this.list4 = new ArrayList<Integer>();
		this.list4.add(1);
		this.list4.add(2);
		this.list4.add(3);
		this.list4.add(6);

		this.a_map = new HashMap<String,String>();
		this.a_map.put("k1", "v1");
		this.a_map.put("k2", "v2");

		this.status = HealthCondition.PASS;

		this.base_status = actual_base.java.base_health_condition.FAIL;

	}

	public TestingDefaults(
		Event ev1,
		Event ev2,
		Long ID,
		String thing,
		java.util.List<Integer> listfield,
		Long ID3,
		java.nio.ByteBuffer bin_field,
		java.nio.ByteBuffer bin_field3,
		java.util.List<Integer> list4,
		HealthCondition status,
		actual_base.java.base_health_condition base_status) {
		this();
		this.ev1 = ev1;
		this.ev2 = ev2;
		this.ID = ID;
		this.thing = thing;
		this.listfield = listfield;
		this.ID3 = ID3;
		this.bin_field = org.apache.thrift.TBaseHelper.copyBinary(bin_field);
		this.bin_field3 = org.apache.thrift.TBaseHelper.copyBinary(bin_field3);
		this.list4 = list4;
		this.status = status;
		this.base_status = base_status;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TestingDefaults(TestingDefaults other) {
		if (other.isSetID2()) {
			this.ID2 = other.ID2;
		}
		if (other.isSetEv1()) {
			this.ev1 = new Event(other.ev1);
		}
		if (other.isSetEv2()) {
			this.ev2 = new Event(other.ev2);
		}
		if (other.isSetID()) {
			this.ID = other.ID;
		}
		if (other.isSetThing()) {
			this.thing = other.thing;
		}
		if (other.isSetThing2()) {
			this.thing2 = other.thing2;
		}
		if (other.isSetListfield()) {
			this.listfield = new ArrayList<Integer>(other.listfield.size());
			for (Integer elem4 : other.listfield) {
				Integer elem5 = elem4;
				this.listfield.add(elem5);
			}
		}
		if (other.isSetID3()) {
			this.ID3 = other.ID3;
		}
		if (other.isSetBin_field()) {
			this.bin_field = org.apache.thrift.TBaseHelper.copyBinary(other.bin_field);
		}
		if (other.isSetBin_field2()) {
			this.bin_field2 = org.apache.thrift.TBaseHelper.copyBinary(other.bin_field2);
		}
		if (other.isSetBin_field3()) {
			this.bin_field3 = org.apache.thrift.TBaseHelper.copyBinary(other.bin_field3);
		}
		if (other.isSetBin_field4()) {
			this.bin_field4 = org.apache.thrift.TBaseHelper.copyBinary(other.bin_field4);
		}
		if (other.isSetList2()) {
			this.list2 = new ArrayList<Integer>(other.list2.size());
			for (Integer elem6 : other.list2) {
				Integer elem7 = elem6;
				this.list2.add(elem7);
			}
		}
		if (other.isSetList3()) {
			this.list3 = new ArrayList<Integer>(other.list3.size());
			for (Integer elem8 : other.list3) {
				Integer elem9 = elem8;
				this.list3.add(elem9);
			}
		}
		if (other.isSetList4()) {
			this.list4 = new ArrayList<Integer>(other.list4.size());
			for (Integer elem10 : other.list4) {
				Integer elem11 = elem10;
				this.list4.add(elem11);
			}
		}
		if (other.isSetA_map()) {
			this.a_map = new HashMap<String,String>(other.a_map);
		}
		if (other.isSetStatus()) {
			this.status = other.status;
		}
		if (other.isSetBase_status()) {
			this.base_status = other.base_status;
		}
	}

	public TestingDefaults deepCopy() {
		return new TestingDefaults(this);
	}

	@Override
	public void clear() {
		this.ID2 = varietyConstants.DEFAULT_ID;

		this.ev1 = new Event();
		this.ev1.setID(varietyConstants.DEFAULT_ID);
		this.ev1.setMessage("a message");

		this.ev2 = new Event();
		this.ev2.setID(5L);
		this.ev2.setMessage("a message2");

		this.ID = -2L;

		this.thing = "a constant";

		this.thing2 = "another constant";

		this.listfield = new ArrayList<Integer>();
		this.listfield.add(1);
		this.listfield.add(2);
		this.listfield.add(3);
		this.listfield.add(4);
		this.listfield.add(5);

		this.ID3 = varietyConstants.other_default;

		this.bin_field = null;

		this.bin_field2 = null;

		this.bin_field3 = null;

		this.bin_field4 = varietyConstants.bin_const;

		this.list2 = new ArrayList<Integer>();
		this.list2.add(1);
		this.list2.add(3);
		this.list2.add(4);
		this.list2.add(5);
		this.list2.add(8);

		this.list3 = null;

		this.list4 = new ArrayList<Integer>();
		this.list4.add(1);
		this.list4.add(2);
		this.list4.add(3);
		this.list4.add(6);

		this.a_map = new HashMap<String,String>();
		this.a_map.put("k1", "v1");
		this.a_map.put("k2", "v2");

		this.status = HealthCondition.PASS;

		this.base_status = actual_base.java.base_health_condition.FAIL;

	}

	public Long getID2() {
		return this.ID2;
	}

	public TestingDefaults setID2(Long ID2) {
		this.ID2 = ID2;
		return this;
	}

	public void unsetID2() {
		this.ID2 = null;
	}

	/** Returns true if field ID2 is set (has been assigned a value) and false otherwise */
	public boolean isSetID2() {
		return this.ID2 != null;
	}

	public void setID2IsSet(boolean value) {
		if (!value) {
			this.ID2 = null;
		}
	}

	public Event getEv1() {
		return this.ev1;
	}

	public TestingDefaults setEv1(Event ev1) {
		this.ev1 = ev1;
		return this;
	}

	public void unsetEv1() {
		this.ev1 = null;
	}

	/** Returns true if field ev1 is set (has been assigned a value) and false otherwise */
	public boolean isSetEv1() {
		return this.ev1 != null;
	}

	public void setEv1IsSet(boolean value) {
		if (!value) {
			this.ev1 = null;
		}
	}

	public Event getEv2() {
		return this.ev2;
	}

	public TestingDefaults setEv2(Event ev2) {
		this.ev2 = ev2;
		return this;
	}

	public void unsetEv2() {
		this.ev2 = null;
	}

	/** Returns true if field ev2 is set (has been assigned a value) and false otherwise */
	public boolean isSetEv2() {
		return this.ev2 != null;
	}

	public void setEv2IsSet(boolean value) {
		if (!value) {
			this.ev2 = null;
		}
	}

	public Long getID() {
		return this.ID;
	}

	public TestingDefaults setID(Long ID) {
		this.ID = ID;
		return this;
	}

	public void unsetID() {
		this.ID = null;
	}

	/** Returns true if field ID is set (has been assigned a value) and false otherwise */
	public boolean isSetID() {
		return this.ID != null;
	}

	public void setIDIsSet(boolean value) {
		if (!value) {
			this.ID = null;
		}
	}

	public String getThing() {
		return this.thing;
	}

	public TestingDefaults setThing(String thing) {
		this.thing = thing;
		return this;
	}

	public void unsetThing() {
		this.thing = null;
	}

	/** Returns true if field thing is set (has been assigned a value) and false otherwise */
	public boolean isSetThing() {
		return this.thing != null;
	}

	public void setThingIsSet(boolean value) {
		if (!value) {
			this.thing = null;
		}
	}

	public String getThing2() {
		return this.thing2;
	}

	public TestingDefaults setThing2(String thing2) {
		this.thing2 = thing2;
		return this;
	}

	public void unsetThing2() {
		this.thing2 = null;
	}

	/** Returns true if field thing2 is set (has been assigned a value) and false otherwise */
	public boolean isSetThing2() {
		return this.thing2 != null;
	}

	public void setThing2IsSet(boolean value) {
		if (!value) {
			this.thing2 = null;
		}
	}

	public int getListfieldSize() {
		return (this.listfield == null) ? 0 : this.listfield.size();
	}

	public java.util.Iterator<Integer> getListfieldIterator() {
		return (this.listfield == null) ? null : this.listfield.iterator();
	}

	public void addToListfield(Integer elem) {
		if (this.listfield == null) {
			this.listfield = new ArrayList<Integer>();
		}
		this.listfield.add(elem);
	}

	public java.util.List<Integer> getListfield() {
		return this.listfield;
	}

	public TestingDefaults setListfield(java.util.List<Integer> listfield) {
		this.listfield = listfield;
		return this;
	}

	public void unsetListfield() {
		this.listfield = null;
	}

	/** Returns true if field listfield is set (has been assigned a value) and false otherwise */
	public boolean isSetListfield() {
		return this.listfield != null;
	}

	public void setListfieldIsSet(boolean value) {
		if (!value) {
			this.listfield = null;
		}
	}

	public Long getID3() {
		return this.ID3;
	}

	public TestingDefaults setID3(Long ID3) {
		this.ID3 = ID3;
		return this;
	}

	public void unsetID3() {
		this.ID3 = null;
	}

	/** Returns true if field ID3 is set (has been assigned a value) and false otherwise */
	public boolean isSetID3() {
		return this.ID3 != null;
	}

	public void setID3IsSet(boolean value) {
		if (!value) {
			this.ID3 = null;
		}
	}

	public byte[] getBin_field() {
		setBin_field(org.apache.thrift.TBaseHelper.rightSize(bin_field));
		return bin_field == null ? null : bin_field.array();
	}

	public java.nio.ByteBuffer bufferForBin_field() {
		return org.apache.thrift.TBaseHelper.copyBinary(bin_field);
	}

	public TestingDefaults setBin_field(byte[] bin_field) {
		this.bin_field = bin_field == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(Arrays.copyOf(bin_field, bin_field.length));
		return this;
	}

	public TestingDefaults setBin_field(java.nio.ByteBuffer bin_field) {
		this.bin_field = org.apache.thrift.TBaseHelper.copyBinary(bin_field);
		return this;
	}

	public void unsetBin_field() {
		this.bin_field = null;
	}

	/** Returns true if field bin_field is set (has been assigned a value) and false otherwise */
	public boolean isSetBin_field() {
		return this.bin_field != null;
	}

	public void setBin_fieldIsSet(boolean value) {
		if (!value) {
			this.bin_field = null;
		}
	}

	public byte[] getBin_field2() {
		setBin_field2(org.apache.thrift.TBaseHelper.rightSize(bin_field2));
		return bin_field2 == null ? null : bin_field2.array();
	}

	public java.nio.ByteBuffer bufferForBin_field2() {
		return org.apache.thrift.TBaseHelper.copyBinary(bin_field2);
	}

	public TestingDefaults setBin_field2(byte[] bin_field2) {
		this.bin_field2 = bin_field2 == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(Arrays.copyOf(bin_field2, bin_field2.length));
		return this;
	}

	public TestingDefaults setBin_field2(java.nio.ByteBuffer bin_field2) {
		this.bin_field2 = org.apache.thrift.TBaseHelper.copyBinary(bin_field2);
		return this;
	}

	public void unsetBin_field2() {
		this.bin_field2 = null;
	}

	/** Returns true if field bin_field2 is set (has been assigned a value) and false otherwise */
	public boolean isSetBin_field2() {
		return this.bin_field2 != null;
	}

	public void setBin_field2IsSet(boolean value) {
		if (!value) {
			this.bin_field2 = null;
		}
	}

	public byte[] getBin_field3() {
		setBin_field3(org.apache.thrift.TBaseHelper.rightSize(bin_field3));
		return bin_field3 == null ? null : bin_field3.array();
	}

	public java.nio.ByteBuffer bufferForBin_field3() {
		return org.apache.thrift.TBaseHelper.copyBinary(bin_field3);
	}

	public TestingDefaults setBin_field3(byte[] bin_field3) {
		this.bin_field3 = bin_field3 == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(Arrays.copyOf(bin_field3, bin_field3.length));
		return this;
	}

	public TestingDefaults setBin_field3(java.nio.ByteBuffer bin_field3) {
		this.bin_field3 = org.apache.thrift.TBaseHelper.copyBinary(bin_field3);
		return this;
	}

	public void unsetBin_field3() {
		this.bin_field3 = null;
	}

	/** Returns true if field bin_field3 is set (has been assigned a value) and false otherwise */
	public boolean isSetBin_field3() {
		return this.bin_field3 != null;
	}

	public void setBin_field3IsSet(boolean value) {
		if (!value) {
			this.bin_field3 = null;
		}
	}

	public byte[] getBin_field4() {
		setBin_field4(org.apache.thrift.TBaseHelper.rightSize(bin_field4));
		return bin_field4 == null ? null : bin_field4.array();
	}

	public java.nio.ByteBuffer bufferForBin_field4() {
		return org.apache.thrift.TBaseHelper.copyBinary(bin_field4);
	}

	public TestingDefaults setBin_field4(byte[] bin_field4) {
		this.bin_field4 = bin_field4 == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(Arrays.copyOf(bin_field4, bin_field4.length));
		return this;
	}

	public TestingDefaults setBin_field4(java.nio.ByteBuffer bin_field4) {
		this.bin_field4 = org.apache.thrift.TBaseHelper.copyBinary(bin_field4);
		return this;
	}

	public void unsetBin_field4() {
		this.bin_field4 = null;
	}

	/** Returns true if field bin_field4 is set (has been assigned a value) and false otherwise */
	public boolean isSetBin_field4() {
		return this.bin_field4 != null;
	}

	public void setBin_field4IsSet(boolean value) {
		if (!value) {
			this.bin_field4 = null;
		}
	}

	public int getList2Size() {
		return (this.list2 == null) ? 0 : this.list2.size();
	}

	public java.util.Iterator<Integer> getList2Iterator() {
		return (this.list2 == null) ? null : this.list2.iterator();
	}

	public void addToList2(Integer elem) {
		if (this.list2 == null) {
			this.list2 = new ArrayList<Integer>();
		}
		this.list2.add(elem);
	}

	public java.util.List<Integer> getList2() {
		return this.list2;
	}

	public TestingDefaults setList2(java.util.List<Integer> list2) {
		this.list2 = list2;
		return this;
	}

	public void unsetList2() {
		this.list2 = null;
	}

	/** Returns true if field list2 is set (has been assigned a value) and false otherwise */
	public boolean isSetList2() {
		return this.list2 != null;
	}

	public void setList2IsSet(boolean value) {
		if (!value) {
			this.list2 = null;
		}
	}

	public int getList3Size() {
		return (this.list3 == null) ? 0 : this.list3.size();
	}

	public java.util.Iterator<Integer> getList3Iterator() {
		return (this.list3 == null) ? null : this.list3.iterator();
	}

	public void addToList3(Integer elem) {
		if (this.list3 == null) {
			this.list3 = new ArrayList<Integer>();
		}
		this.list3.add(elem);
	}

	public java.util.List<Integer> getList3() {
		return this.list3;
	}

	public TestingDefaults setList3(java.util.List<Integer> list3) {
		this.list3 = list3;
		return this;
	}

	public void unsetList3() {
		this.list3 = null;
	}

	/** Returns true if field list3 is set (has been assigned a value) and false otherwise */
	public boolean isSetList3() {
		return this.list3 != null;
	}

	public void setList3IsSet(boolean value) {
		if (!value) {
			this.list3 = null;
		}
	}

	public int getList4Size() {
		return (this.list4 == null) ? 0 : this.list4.size();
	}

	public java.util.Iterator<Integer> getList4Iterator() {
		return (this.list4 == null) ? null : this.list4.iterator();
	}

	public void addToList4(Integer elem) {
		if (this.list4 == null) {
			this.list4 = new ArrayList<Integer>();
		}
		this.list4.add(elem);
	}

	public java.util.List<Integer> getList4() {
		return this.list4;
	}

	public TestingDefaults setList4(java.util.List<Integer> list4) {
		this.list4 = list4;
		return this;
	}

	public void unsetList4() {
		this.list4 = null;
	}

	/** Returns true if field list4 is set (has been assigned a value) and false otherwise */
	public boolean isSetList4() {
		return this.list4 != null;
	}

	public void setList4IsSet(boolean value) {
		if (!value) {
			this.list4 = null;
		}
	}

	public int getA_mapSize() {
		return (this.a_map == null) ? 0 : this.a_map.size();
	}

	public void putToA_map(String key, String val) {
		if (this.a_map == null) {
			this.a_map = new HashMap<String,String>();
		}
		this.a_map.put(key, val);
	}

	public java.util.Map<String, String> getA_map() {
		return this.a_map;
	}

	public TestingDefaults setA_map(java.util.Map<String, String> a_map) {
		this.a_map = a_map;
		return this;
	}

	public void unsetA_map() {
		this.a_map = null;
	}

	/** Returns true if field a_map is set (has been assigned a value) and false otherwise */
	public boolean isSetA_map() {
		return this.a_map != null;
	}

	public void setA_mapIsSet(boolean value) {
		if (!value) {
			this.a_map = null;
		}
	}

	/**
	 * Comment for enum field.
	 */
	public HealthCondition getStatus() {
		return this.status;
	}

	/**
	 * Comment for enum field.
	 */
	public TestingDefaults setStatus(HealthCondition status) {
		this.status = status;
		return this;
	}

	public void unsetStatus() {
		this.status = null;
	}

	/** Returns true if field status is set (has been assigned a value) and false otherwise */
	public boolean isSetStatus() {
		return this.status != null;
	}

	public void setStatusIsSet(boolean value) {
		if (!value) {
			this.status = null;
		}
	}

	public actual_base.java.base_health_condition getBase_status() {
		return this.base_status;
	}

	public TestingDefaults setBase_status(actual_base.java.base_health_condition base_status) {
		this.base_status = base_status;
		return this;
	}

	public void unsetBase_status() {
		this.base_status = null;
	}

	/** Returns true if field base_status is set (has been assigned a value) and false otherwise */
	public boolean isSetBase_status() {
		return this.base_status != null;
	}

	public void setBase_statusIsSet(boolean value) {
		if (!value) {
			this.base_status = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case I_D2:
			if (value == null) {
				unsetID2();
			} else {
				setID2((Long)value);
			}
			break;

		case EV1:
			if (value == null) {
				unsetEv1();
			} else {
				setEv1((Event)value);
			}
			break;

		case EV2:
			if (value == null) {
				unsetEv2();
			} else {
				setEv2((Event)value);
			}
			break;

		case ID:
			if (value == null) {
				unsetID();
			} else {
				setID((Long)value);
			}
			break;

		case THING:
			if (value == null) {
				unsetThing();
			} else {
				setThing((String)value);
			}
			break;

		case THING2:
			if (value == null) {
				unsetThing2();
			} else {
				setThing2((String)value);
			}
			break;

		case LISTFIELD:
			if (value == null) {
				unsetListfield();
			} else {
				setListfield((java.util.List<Integer>)value);
			}
			break;

		case I_D3:
			if (value == null) {
				unsetID3();
			} else {
				setID3((Long)value);
			}
			break;

		case BIN_FIELD:
			if (value == null) {
				unsetBin_field();
			} else {
				setBin_field((java.nio.ByteBuffer)value);
			}
			break;

		case BIN_FIELD2:
			if (value == null) {
				unsetBin_field2();
			} else {
				setBin_field2((java.nio.ByteBuffer)value);
			}
			break;

		case BIN_FIELD3:
			if (value == null) {
				unsetBin_field3();
			} else {
				setBin_field3((java.nio.ByteBuffer)value);
			}
			break;

		case BIN_FIELD4:
			if (value == null) {
				unsetBin_field4();
			} else {
				setBin_field4((java.nio.ByteBuffer)value);
			}
			break;

		case LIST2:
			if (value == null) {
				unsetList2();
			} else {
				setList2((java.util.List<Integer>)value);
			}
			break;

		case LIST3:
			if (value == null) {
				unsetList3();
			} else {
				setList3((java.util.List<Integer>)value);
			}
			break;

		case LIST4:
			if (value == null) {
				unsetList4();
			} else {
				setList4((java.util.List<Integer>)value);
			}
			break;

		case A_MAP:
			if (value == null) {
				unsetA_map();
			} else {
				setA_map((java.util.Map<String, String>)value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			} else {
				setStatus((HealthCondition)value);
			}
			break;

		case BASE_STATUS:
			if (value == null) {
				unsetBase_status();
			} else {
				setBase_status((actual_base.java.base_health_condition)value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case I_D2:
			return getID2();

		case EV1:
			return getEv1();

		case EV2:
			return getEv2();

		case ID:
			return getID();

		case THING:
			return getThing();

		case THING2:
			return getThing2();

		case LISTFIELD:
			return getListfield();

		case I_D3:
			return getID3();

		case BIN_FIELD:
			return getBin_field();

		case BIN_FIELD2:
			return getBin_field2();

		case BIN_FIELD3:
			return getBin_field3();

		case BIN_FIELD4:
			return getBin_field4();

		case LIST2:
			return getList2();

		case LIST3:
			return getList3();

		case LIST4:
			return getList4();

		case A_MAP:
			return getA_map();

		case STATUS:
			return getStatus();

		case BASE_STATUS:
			return getBase_status();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case I_D2:
			return isSetID2();
		case EV1:
			return isSetEv1();
		case EV2:
			return isSetEv2();
		case ID:
			return isSetID();
		case THING:
			return isSetThing();
		case THING2:
			return isSetThing2();
		case LISTFIELD:
			return isSetListfield();
		case I_D3:
			return isSetID3();
		case BIN_FIELD:
			return isSetBin_field();
		case BIN_FIELD2:
			return isSetBin_field2();
		case BIN_FIELD3:
			return isSetBin_field3();
		case BIN_FIELD4:
			return isSetBin_field4();
		case LIST2:
			return isSetList2();
		case LIST3:
			return isSetList3();
		case LIST4:
			return isSetList4();
		case A_MAP:
			return isSetA_map();
		case STATUS:
			return isSetStatus();
		case BASE_STATUS:
			return isSetBase_status();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TestingDefaults)
			return this.equals((TestingDefaults)that);
		return false;
	}

	public boolean equals(TestingDefaults that) {
		if (that == null)
			return false;
		if (!Objects.equals(this.ID2, that.ID2))
			return false;
		if (!Objects.equals(this.ev1, that.ev1))
			return false;
		if (!Objects.equals(this.ev2, that.ev2))
			return false;
		if (!Objects.equals(this.ID, that.ID))
			return false;
		if (!Objects.equals(this.thing, that.thing))
			return false;
		if (!Objects.equals(this.thing2, that.thing2))
			return false;
		if (!Objects.equals(this.listfield, that.listfield))
			return false;
		if (!Objects.equals(this.ID3, that.ID3))
			return false;
		if (!Objects.equals(this.bin_field, that.bin_field))
			return false;
		if (!Objects.equals(this.bin_field2, that.bin_field2))
			return false;
		if (!Objects.equals(this.bin_field3, that.bin_field3))
			return false;
		if (!Objects.equals(this.bin_field4, that.bin_field4))
			return false;
		if (!Objects.equals(this.list2, that.list2))
			return false;
		if (!Objects.equals(this.list3, that.list3))
			return false;
		if (!Objects.equals(this.list4, that.list4))
			return false;
		if (!Objects.equals(this.a_map, that.a_map))
			return false;
		if (!Objects.equals(this.status, that.status))
			return false;
		if (!Objects.equals(this.base_status, that.base_status))
			return false;
		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_ID2 = true && (isSetID2());
		list.add(present_ID2);
		if (present_ID2)
			list.add(ID2);

		boolean present_ev1 = true && (isSetEv1());
		list.add(present_ev1);
		if (present_ev1)
			list.add(ev1);

		boolean present_ev2 = true && (isSetEv2());
		list.add(present_ev2);
		if (present_ev2)
			list.add(ev2);

		boolean present_ID = true && (isSetID());
		list.add(present_ID);
		if (present_ID)
			list.add(ID);

		boolean present_thing = true && (isSetThing());
		list.add(present_thing);
		if (present_thing)
			list.add(thing);

		boolean present_thing2 = true && (isSetThing2());
		list.add(present_thing2);
		if (present_thing2)
			list.add(thing2);

		boolean present_listfield = true && (isSetListfield());
		list.add(present_listfield);
		if (present_listfield)
			list.add(listfield);

		boolean present_ID3 = true && (isSetID3());
		list.add(present_ID3);
		if (present_ID3)
			list.add(ID3);

		boolean present_bin_field = true && (isSetBin_field());
		list.add(present_bin_field);
		if (present_bin_field)
			list.add(bin_field);

		boolean present_bin_field2 = true && (isSetBin_field2());
		list.add(present_bin_field2);
		if (present_bin_field2)
			list.add(bin_field2);

		boolean present_bin_field3 = true && (isSetBin_field3());
		list.add(present_bin_field3);
		if (present_bin_field3)
			list.add(bin_field3);

		boolean present_bin_field4 = true && (isSetBin_field4());
		list.add(present_bin_field4);
		if (present_bin_field4)
			list.add(bin_field4);

		boolean present_list2 = true && (isSetList2());
		list.add(present_list2);
		if (present_list2)
			list.add(list2);

		boolean present_list3 = true && (isSetList3());
		list.add(present_list3);
		if (present_list3)
			list.add(list3);

		boolean present_list4 = true && (isSetList4());
		list.add(present_list4);
		if (present_list4)
			list.add(list4);

		boolean present_a_map = true && (isSetA_map());
		list.add(present_a_map);
		if (present_a_map)
			list.add(a_map);

		boolean present_status = true && (isSetStatus());
		list.add(present_status);
		if (present_status)
			list.add(status.getValue());

		boolean present_base_status = true && (isSetBase_status());
		list.add(present_base_status);
		if (present_base_status)
			list.add(base_status.getValue());

		return list.hashCode();
	}

	@Override
	public int compareTo(TestingDefaults other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.compare(isSetID2(), other.isSetID2());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetID2()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID2, other.ID2);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetEv1(), other.isSetEv1());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEv1()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ev1, other.ev1);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetEv2(), other.isSetEv2());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEv2()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ev2, other.ev2);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetID(), other.isSetID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetThing(), other.isSetThing());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetThing()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thing, other.thing);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetThing2(), other.isSetThing2());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetThing2()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thing2, other.thing2);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetListfield(), other.isSetListfield());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetListfield()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listfield, other.listfield);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetID3(), other.isSetID3());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetID3()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID3, other.ID3);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetBin_field(), other.isSetBin_field());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBin_field()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bin_field, other.bin_field);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetBin_field2(), other.isSetBin_field2());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBin_field2()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bin_field2, other.bin_field2);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetBin_field3(), other.isSetBin_field3());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBin_field3()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bin_field3, other.bin_field3);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetBin_field4(), other.isSetBin_field4());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBin_field4()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bin_field4, other.bin_field4);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetList2(), other.isSetList2());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetList2()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list2, other.list2);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetList3(), other.isSetList3());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetList3()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list3, other.list3);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetList4(), other.isSetList4());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetList4()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list4, other.list4);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetA_map(), other.isSetA_map());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetA_map()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_map, other.a_map);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetStatus(), other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetBase_status(), other.isSetBase_status());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBase_status()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_status, other.base_status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		if (iprot.getScheme() != StandardScheme.class) {
			throw new UnsupportedOperationException();
		}
		new TestingDefaultsStandardScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		if (oprot.getScheme() != StandardScheme.class) {
			throw new UnsupportedOperationException();
		}
		new TestingDefaultsStandardScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TestingDefaults(");
		boolean first = true;

		if (isSetID2()) {
			sb.append("ID2:");
			sb.append(this.ID2);
			first = false;
		}
		if (!first) sb.append(", ");
		sb.append("ev1:");
		sb.append(this.ev1);
		first = false;
		if (!first) sb.append(", ");
		sb.append("ev2:");
		sb.append(this.ev2);
		first = false;
		if (!first) sb.append(", ");
		sb.append("ID:");
		sb.append(this.ID);
		first = false;
		if (!first) sb.append(", ");
		sb.append("thing:");
		sb.append(this.thing);
		first = false;
		if (isSetThing2()) {
			if (!first) sb.append(", ");
			sb.append("thing2:");
			sb.append(this.thing2);
			first = false;
		}
		if (!first) sb.append(", ");
		sb.append("listfield:");
		sb.append(this.listfield);
		first = false;
		if (!first) sb.append(", ");
		sb.append("ID3:");
		sb.append(this.ID3);
		first = false;
		if (!first) sb.append(", ");
		sb.append("bin_field:");
		if (this.bin_field == null) {
			sb.append("null");
		} else {
			org.apache.thrift.TBaseHelper.toString(this.bin_field, sb);
		}
		first = false;
		if (isSetBin_field2()) {
			if (!first) sb.append(", ");
			sb.append("bin_field2:");
			if (this.bin_field2 == null) {
				sb.append("null");
			} else {
				org.apache.thrift.TBaseHelper.toString(this.bin_field2, sb);
			}
			first = false;
		}
		if (!first) sb.append(", ");
		sb.append("bin_field3:");
		if (this.bin_field3 == null) {
			sb.append("null");
		} else {
			org.apache.thrift.TBaseHelper.toString(this.bin_field3, sb);
		}
		first = false;
		if (isSetBin_field4()) {
			if (!first) sb.append(", ");
			sb.append("bin_field4:");
			if (this.bin_field4 == null) {
				sb.append("null");
			} else {
				org.apache.thrift.TBaseHelper.toString(this.bin_field4, sb);
			}
			first = false;
		}
		if (isSetList2()) {
			if (!first) sb.append(", ");
			sb.append("list2:");
			sb.append(this.list2);
			first = false;
		}
		if (isSetList3()) {
			if (!first) sb.append(", ");
			sb.append("list3:");
			sb.append(this.list3);
			first = false;
		}
		if (!first) sb.append(", ");
		sb.append("list4:");
		sb.append(this.list4);
		first = false;
		if (isSetA_map()) {
			if (!first) sb.append(", ");
			sb.append("a_map:");
			sb.append(this.a_map);
			first = false;
		}
		if (!first) sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first) sb.append(", ");
		sb.append("base_status:");
		sb.append(this.base_status);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (status == null) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' is not present in struct 'TestingDefaults'");
		}
		if (base_status == null) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'base_status' is not present in struct 'TestingDefaults'");
		}
		// check for sub-struct validity
		if (ev1 != null) {
			ev1.validate();
		}
		if (ev2 != null) {
			ev2.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TestingDefaultsStandardScheme extends StandardScheme<TestingDefaults> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TestingDefaults struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					case 1: // I_D2
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.ID2 = iprot.readI64();
							struct.setID2IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // EV1
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.ev1 = new Event();
							struct.ev1.read(iprot);
							struct.setEv1IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // EV2
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.ev2 = new Event();
							struct.ev2.read(iprot);
							struct.setEv2IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.ID = iprot.readI64();
							struct.setIDIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 5: // THING
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.thing = iprot.readString();
							struct.setThingIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 6: // THING2
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.thing2 = iprot.readString();
							struct.setThing2IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 7: // LISTFIELD
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							org.apache.thrift.protocol.TList elem14 = iprot.readListBegin();
							struct.listfield = new ArrayList<Integer>(elem14.size);
							for (int elem15 = 0; elem15 < elem14.size; ++elem15) {
								Integer elem16 = iprot.readI32();
								struct.listfield.add(elem16);
							}
							iprot.readListEnd();
							struct.setListfieldIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 8: // I_D3
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.ID3 = iprot.readI64();
							struct.setID3IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 9: // BIN_FIELD
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.bin_field = iprot.readBinary();
							struct.setBin_fieldIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 10: // BIN_FIELD2
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.bin_field2 = iprot.readBinary();
							struct.setBin_field2IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 11: // BIN_FIELD3
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.bin_field3 = iprot.readBinary();
							struct.setBin_field3IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 12: // BIN_FIELD4
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.bin_field4 = iprot.readBinary();
							struct.setBin_field4IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 13: // LIST2
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							org.apache.thrift.protocol.TList elem17 = iprot.readListBegin();
							struct.list2 = new ArrayList<Integer>(elem17.size);
							for (int elem18 = 0; elem18 < elem17.size; ++elem18) {
								Integer elem19 = iprot.readI32();
								struct.list2.add(elem19);
							}
							iprot.readListEnd();
							struct.setList2IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 14: // LIST3
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							org.apache.thrift.protocol.TList elem20 = iprot.readListBegin();
							struct.list3 = new ArrayList<Integer>(elem20.size);
							for (int elem21 = 0; elem21 < elem20.size; ++elem21) {
								Integer elem22 = iprot.readI32();
								struct.list3.add(elem22);
							}
							iprot.readListEnd();
							struct.setList3IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 15: // LIST4
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							org.apache.thrift.protocol.TList elem23 = iprot.readListBegin();
							struct.list4 = new ArrayList<Integer>(elem23.size);
							for (int elem24 = 0; elem24 < elem23.size; ++elem24) {
								Integer elem25 = iprot.readI32();
								struct.list4.add(elem25);
							}
							iprot.readListEnd();
							struct.setList4IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 16: // A_MAP
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							org.apache.thrift.protocol.TMap elem26 = iprot.readMapBegin();
							struct.a_map = new HashMap<String,String>(2*elem26.size);
							for (int elem27 = 0; elem27 < elem26.size; ++elem27) {
								String elem29 = iprot.readString();
								String elem28 = iprot.readString();
								struct.a_map.put(elem29, elem28);
							}
							iprot.readMapEnd();
							struct.setA_mapIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 17: // STATUS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.status = HealthCondition.findByValue(iprot.readI32());
							struct.setStatusIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 18: // BASE_STATUS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.base_status = actual_base.java.base_health_condition.findByValue(iprot.readI32());
							struct.setBase_statusIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TestingDefaults struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.isSetID2()) {
				oprot.writeFieldBegin(I_D2_FIELD_DESC);
				Long elem30 = struct.ID2;
				if (elem30 == null) {
					elem30 = 0L;
				}
				oprot.writeI64(elem30);
				oprot.writeFieldEnd();
			}
			if (struct.isSetEv1()) {
				oprot.writeFieldBegin(EV1_FIELD_DESC);
				struct.ev1.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.isSetEv2()) {
				oprot.writeFieldBegin(EV2_FIELD_DESC);
				struct.ev2.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(ID_FIELD_DESC);
			Long elem31 = struct.ID;
			if (elem31 == null) {
				elem31 = 0L;
			}
			oprot.writeI64(elem31);
			oprot.writeFieldEnd();
			if (struct.isSetThing()) {
				oprot.writeFieldBegin(THING_FIELD_DESC);
				String elem32 = struct.thing;
				oprot.writeString(elem32);
				oprot.writeFieldEnd();
			}
			if (struct.isSetThing2()) {
				oprot.writeFieldBegin(THING2_FIELD_DESC);
				String elem33 = struct.thing2;
				oprot.writeString(elem33);
				oprot.writeFieldEnd();
			}
			if (struct.isSetListfield()) {
				oprot.writeFieldBegin(LISTFIELD_FIELD_DESC);
				oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.listfield.size()));
				for (Integer elem34 : struct.listfield) {
					Integer elem35 = elem34;
					if (elem35 == null) {
						elem35 = 0;
					}
					oprot.writeI32(elem35);
				}
				oprot.writeListEnd();
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(I_D3_FIELD_DESC);
			Long elem36 = struct.ID3;
			if (elem36 == null) {
				elem36 = 0L;
			}
			oprot.writeI64(elem36);
			oprot.writeFieldEnd();
			if (struct.isSetBin_field()) {
				oprot.writeFieldBegin(BIN_FIELD_FIELD_DESC);
				java.nio.ByteBuffer elem37 = struct.bin_field;
				oprot.writeBinary(elem37);
				oprot.writeFieldEnd();
			}
			if (struct.isSetBin_field2()) {
				oprot.writeFieldBegin(BIN_FIELD2_FIELD_DESC);
				java.nio.ByteBuffer elem38 = struct.bin_field2;
				oprot.writeBinary(elem38);
				oprot.writeFieldEnd();
			}
			if (struct.isSetBin_field3()) {
				oprot.writeFieldBegin(BIN_FIELD3_FIELD_DESC);
				java.nio.ByteBuffer elem39 = struct.bin_field3;
				oprot.writeBinary(elem39);
				oprot.writeFieldEnd();
			}
			if (struct.isSetBin_field4()) {
				oprot.writeFieldBegin(BIN_FIELD4_FIELD_DESC);
				java.nio.ByteBuffer elem40 = struct.bin_field4;
				oprot.writeBinary(elem40);
				oprot.writeFieldEnd();
			}
			if (struct.isSetList2()) {
				oprot.writeFieldBegin(LIST2_FIELD_DESC);
				oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.list2.size()));
				for (Integer elem41 : struct.list2) {
					Integer elem42 = elem41;
					if (elem42 == null) {
						elem42 = 0;
					}
					oprot.writeI32(elem42);
				}
				oprot.writeListEnd();
				oprot.writeFieldEnd();
			}
			if (struct.isSetList3()) {
				oprot.writeFieldBegin(LIST3_FIELD_DESC);
				oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.list3.size()));
				for (Integer elem43 : struct.list3) {
					Integer elem44 = elem43;
					if (elem44 == null) {
						elem44 = 0;
					}
					oprot.writeI32(elem44);
				}
				oprot.writeListEnd();
				oprot.writeFieldEnd();
			}
			if (struct.isSetList4()) {
				oprot.writeFieldBegin(LIST4_FIELD_DESC);
				oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.list4.size()));
				for (Integer elem45 : struct.list4) {
					Integer elem46 = elem45;
					if (elem46 == null) {
						elem46 = 0;
					}
					oprot.writeI32(elem46);
				}
				oprot.writeListEnd();
				oprot.writeFieldEnd();
			}
			if (struct.isSetA_map()) {
				oprot.writeFieldBegin(A_MAP_FIELD_DESC);
				oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.a_map.size()));
				for (Map.Entry<String, String> elem47 : struct.a_map.entrySet()) {
					String elem48 = elem47.getKey();
					oprot.writeString(elem48);
					String elem49 = elem47.getValue();
					oprot.writeString(elem49);
				}
				oprot.writeMapEnd();
				oprot.writeFieldEnd();
			}
			if (struct.isSetStatus()) {
				oprot.writeFieldBegin(STATUS_FIELD_DESC);
				HealthCondition elem50 = struct.status;
				oprot.writeI32(elem50.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.isSetBase_status()) {
				oprot.writeFieldBegin(BASE_STATUS_FIELD_DESC);
				actual_base.java.base_health_condition elem51 = struct.base_status;
				oprot.writeI32(elem51.getValue());
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

}
